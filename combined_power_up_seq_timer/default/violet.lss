
violet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00002c7e  00002d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000dce  00800306  00800306  00002f18  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008bb  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000059f3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000280  00000000  00000000  00005a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005170  00000000  00000000  00005ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010ba  00000000  00000000  0000ae12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001413  00000000  00000000  0000becc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a68  00000000  00000000  0000d2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b5e  00000000  00000000  0000dd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f19  00000000  00000000  0000e8a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000208  00000000  00000000  000117bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 * this copies a string into another, starting
 * at a specific index
 */
uint32 insert_str(uint8 *output, uint32 output_size, uint32 start_index, uint8 *input, uint32 input_size)
{
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
	uint32 i = start_index;
	for (i = start_index; i < start_index + input_size && i < output_size-1; i++)
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
 * insert_str
 *
 * this copies a string into another, starting
 * at a specific index
 */
uint32 insert_str(uint8 *output, uint32 output_size, uint32 start_index, uint8 *input, uint32 input_size)
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
{
	uint32 i = start_index;
	for (i = start_index; i < start_index + input_size && i < output_size-1; i++)
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
		output[i] = input[i - start_index];

	return i;
}
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_12>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_15>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_18>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__vector_20>
      54:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_21>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      70:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      74:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      78:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_30>
      7c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      80:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_32>
      84:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      88:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

0000008c <charge20Pc>:
      8c:	08 00 09 00 09 00 0a 00 0b 00 0c 00 0d 00 0d 00     ................
      9c:	0e 00 0f 00 10 00 11 00 12 00 13 00 14 00 15 00     ................
      ac:	16 00 17 00 19 00 1a 00 1b 00 1d 00 1e 00 1f 00     ................
      bc:	21 00 22 00 24 00 25 00 27 00 28 00 2b 00 2c 00     !.".$.%.'.(.+.,.
      cc:	2e 00 30 00 32 00 34 00 36 00 38 00 3b 00 3e 00     ..0.2.4.6.8.;.>.
      dc:	3f 00 42 00 45 00 48 00 4c 00 50 00 59 00 6b 00     ?.B.E.H.L.P.Y.k.
      ec:	7f 00 8a 00 9c 00 a8 00 b3 00 c1 00 ce 00 dd 00     ................
      fc:	ea 00 f9 00 0d 01 1f 01 2b 01 3f 01 7e 01 a9 01     ........+.?.~...
     10c:	b7 01 e1 01 ff 01 18 02 28 02 3d 02 4d 02 62 02     ........(.=.M.b.
     11c:	7d 02 90 02 b8 02 c5 02 d6 02 e9 02 fa 02 08 03     }...............
     12c:	16 03 25 03 32 03 40 03 4d 03 60 03 6f 03 77 03     ..%.2.@.M.`.o.w.
     13c:	83 03 95 03 9f 03 aa 03 b4 03 c0 03 c9 03 d5 03     ................
     14c:	df 03 eb 03 f5 03 00 04 05 04 12 04 19 04 22 04     ..............".
     15c:	2c 04 34 04 37 04 40 04 74 04 7e 04                 ,.4.7.@.t.~.

00000168 <discharge20Pc>:
     168:	00 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00     ................
     178:	03 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00     ................
     188:	03 00 04 00 04 00 04 00 04 00 18 00 18 00 18 00     ................
     198:	18 00 40 00 40 00 40 00 40 00 68 00 68 00 68 00     ..@.@.@.@.h.h.h.
     1a8:	68 00 99 00 99 00 99 00 99 00 cd 00 cd 00 cd 00     h...............
     1b8:	cd 00 ff 00 ff 00 ff 00 ff 00 39 01 39 01 39 01     ..........9.9.9.
     1c8:	39 01 97 01 97 01 97 01 97 01 26 02 a9 02 40 03     9.........&...@.
     1d8:	91 03 ef 03 18 04 2a 04 34 04 3e 04 45 04 4d 04     ......*.4.>.E.M.

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d0 e1       	ldi	r29, 0x10	; 16
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	13 e0       	ldi	r17, 0x03	; 3
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	ee e7       	ldi	r30, 0x7E	; 126
     1fc:	fc e2       	ldi	r31, 0x2C	; 44
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0b bf       	out	0x3b, r16	; 59
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
     204:	07 90       	elpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a6 30       	cpi	r26, 0x06	; 6
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
     20e:	20 e1       	ldi	r18, 0x10	; 16
     210:	a6 e0       	ldi	r26, 0x06	; 6
     212:	b3 e0       	ldi	r27, 0x03	; 3
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 3d       	cpi	r26, 0xD4	; 212
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <main>
     222:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <set_component>:

// UART file descriptor for debugging purposes
//FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

void set_component( uint8_t svit_index, uint8_t name, uint8_t switch_num, uint8_t switch_state, uint8_t V_mux_num, uint8_t V_mux_sel, uint8_t V_upper_limit, uint8_t V_lower_limit, uint8_t I_mux_num, uint8_t I_mux_sel, uint8_t I_upper_limit, uint8_t I_lower_limit, uint8_t T_mux_num, uint8_t T_mux_sel )
{
     22a:	8f 92       	push	r8
     22c:	af 92       	push	r10
     22e:	cf 92       	push	r12
     230:	ef 92       	push	r14
     232:	0f 93       	push	r16
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
  svit[svit_index].name = name;
     23c:	94 e2       	ldi	r25, 0x24	; 36
     23e:	89 9f       	mul	r24, r25
     240:	f0 01       	movw	r30, r0
     242:	11 24       	eor	r1, r1
     244:	e4 5c       	subi	r30, 0xC4	; 196
     246:	fc 4f       	sbci	r31, 0xFC	; 252
     248:	60 83       	st	Z, r22
  svit[svit_index].switch_num = switch_num;
     24a:	41 83       	std	Z+1, r20	; 0x01
  svit[svit_index].switch_state = switch_state;
     24c:	22 83       	std	Z+2, r18	; 0x02
  svit[svit_index].force_on = 0;
     24e:	13 82       	std	Z+3, r1	; 0x03

  svit[svit_index].V_mux_num = V_mux_num;
     250:	04 83       	std	Z+4, r16	; 0x04
  svit[svit_index].V_mux_sel = V_mux_sel;
     252:	e5 82       	std	Z+5, r14	; 0x05
  svit[svit_index].V_upper_limit = V_upper_limit;
     254:	c6 82       	std	Z+6, r12	; 0x06
  svit[svit_index].V_lower_limit = V_lower_limit;
     256:	a7 82       	std	Z+7, r10	; 0x07
  svit[svit_index].V_sample_index = 0;
     258:	13 86       	std	Z+11, r1	; 0x0b
  svit[svit_index].V_critical_value = 0;
     25a:	14 86       	std	Z+12, r1	; 0x0c

  svit[svit_index].I_mux_num = I_mux_num;
     25c:	85 86       	std	Z+13, r8	; 0x0d
  svit[svit_index].I_mux_sel = I_mux_sel;
     25e:	8a 85       	ldd	r24, Y+10	; 0x0a
     260:	86 87       	std	Z+14, r24	; 0x0e
  svit[svit_index].I_upper_limit = I_upper_limit;
     262:	8b 85       	ldd	r24, Y+11	; 0x0b
     264:	87 87       	std	Z+15, r24	; 0x0f
  svit[svit_index].I_lower_limit = I_lower_limit;
     266:	8c 85       	ldd	r24, Y+12	; 0x0c
     268:	80 8b       	std	Z+16, r24	; 0x10
  svit[svit_index].I_sample_index = 0;
     26a:	14 8a       	std	Z+20, r1	; 0x14
  svit[svit_index].I_critical_value = 0;
     26c:	15 8a       	std	Z+21, r1	; 0x15
  svit[svit_index].T_mux_num = T_mux_num;
     26e:	8d 85       	ldd	r24, Y+13	; 0x0d
     270:	86 8b       	std	Z+22, r24	; 0x16
  svit[svit_index].T_mux_sel = T_mux_sel;
     272:	8e 85       	ldd	r24, Y+14	; 0x0e
     274:	87 8b       	std	Z+23, r24	; 0x17
  svit[svit_index].T_sample_index = 0;
     276:	13 8e       	std	Z+27, r1	; 0x1b
  
  svit[svit_index].Coul_sample_index = 0;
     278:	11 a2       	std	Z+33, r1	; 0x21
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	0f 91       	pop	r16
     280:	ef 90       	pop	r14
     282:	cf 90       	pop	r12
     284:	af 90       	pop	r10
     286:	8f 90       	pop	r8
     288:	08 95       	ret

0000028a <initialize_svit>:

void initialize_svit( void )
{ 
     28a:	5f 92       	push	r5
     28c:	6f 92       	push	r6
     28e:	7f 92       	push	r7
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
  // ADC
  // Vref = AVCC = 5 V
  // ADC clock = 16 MHz / 128 = 125 kHz

  // set Vref to AVCC, left-adjust result into ADCH
  ADMUX = ( 1 << ADLAR ) | ( 1 << REFS0 );
     2a8:	80 e6       	ldi	r24, 0x60	; 96
     2aa:	87 b9       	out	0x07, r24	; 7

  // enable ADC and set ADC division factor to 128
  ADCSRA = ( 1 << ADEN ) | ( 1 << ADIE ) | ( 1 << ADPS2 ) | ( 1 << ADPS1 ) | ( 1 << ADPS0 );
     2ac:	8f e8       	ldi	r24, 0x8F	; 143
     2ae:	86 b9       	out	0x06, r24	; 6

  //sample_index = 0;
  svit_index = 0;

  //                index           name      switch_num  switch_state   V_mux_num   V_mux_sel     V_upper_limit		 I_mux_num  I_mux_sel     I_upper_limit      T_mux_num   T_mux_sel
  set_component( svit_index++,  SPECTROMETER,  SW_EN7 ,     SW_ON,          MUX0,       11,      V_THRESHOLD_VALUE, V_UNDER_VALUE,       MUX0,        6 ,    I_THRESHOLD_VALUE,   I_UNDER_VALUE,    MUX_NULL,       0     );
     2b0:	1f 92       	push	r1
     2b2:	13 e0       	ldi	r17, 0x03	; 3
     2b4:	1f 93       	push	r17
     2b6:	c0 e1       	ldi	r28, 0x10	; 16
     2b8:	cf 93       	push	r28
     2ba:	d0 ea       	ldi	r29, 0xA0	; 160
     2bc:	df 93       	push	r29
     2be:	86 e0       	ldi	r24, 0x06	; 6
     2c0:	d8 2e       	mov	r13, r24
     2c2:	df 92       	push	r13
     2c4:	81 2c       	mov	r8, r1
     2c6:	90 e1       	ldi	r25, 0x10	; 16
     2c8:	a9 2e       	mov	r10, r25
     2ca:	20 ea       	ldi	r18, 0xA0	; 160
     2cc:	c2 2e       	mov	r12, r18
     2ce:	3b e0       	ldi	r19, 0x0B	; 11
     2d0:	e3 2e       	mov	r14, r19
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	21 e0       	ldi	r18, 0x01	; 1
     2d6:	47 e0       	ldi	r20, 0x07	; 7
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  STAR_TRACKER,  SW_EN8 ,     SW_ON,          MUX0,       23,      V_THRESHOLD_VALUE,  V_UNDER_VALUE,     MUX0,        7 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,    MUX1    ,       7     );        
     2e0:	87 e0       	ldi	r24, 0x07	; 7
     2e2:	8f 93       	push	r24
     2e4:	bb 24       	eor	r11, r11
     2e6:	b3 94       	inc	r11
     2e8:	bf 92       	push	r11
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	8f 93       	push	r24
     2f0:	47 e1       	ldi	r20, 0x17	; 23
     2f2:	e4 2e       	mov	r14, r20
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	48 e0       	ldi	r20, 0x08	; 8
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  FC_5V       ,  SW_EN1 ,     SW_ON,          MUX1,       19,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,    MUX1,        0 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,    MUX_NULL,       0     );        
     300:	1f 92       	push	r1
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	88 24       	eor	r8, r8
     30c:	83 94       	inc	r8
     30e:	53 e1       	ldi	r21, 0x13	; 19
     310:	e5 2e       	mov	r14, r21
     312:	01 e0       	ldi	r16, 0x01	; 1
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	62 e0       	ldi	r22, 0x02	; 2
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  FC_3_3V     ,  SW_EN1 ,     SW_ON,          MUX2,       13,      V_THRESHOLD_VALUE,    V_UNDER_VALUE,   MUX2,        14,    I_THRESHOLD_VALUE, I_UNDER_VALUE,  MUX_NULL,       0     );        
     320:	1f 92       	push	r1
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8e e0       	ldi	r24, 0x0E	; 14
     32a:	8f 93       	push	r24
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	86 2e       	mov	r8, r22
     330:	7d e0       	ldi	r23, 0x0D	; 13
     332:	e7 2e       	mov	r14, r23
     334:	02 e0       	ldi	r16, 0x02	; 2
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	41 e0       	ldi	r20, 0x01	; 1
     33a:	63 e0       	ldi	r22, 0x03	; 3
     33c:	83 e0       	ldi	r24, 0x03	; 3
     33e:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  GPS_1       ,  SW_EN2 ,     SW_ON,          MUX1,       21,      V_THRESHOLD_VALUE,  V_UNDER_VALUE,    MUX1,        1 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     342:	1f 92       	push	r1
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	bf 92       	push	r11
     34c:	88 24       	eor	r8, r8
     34e:	83 94       	inc	r8
     350:	e5 e1       	ldi	r30, 0x15	; 21
     352:	ee 2e       	mov	r14, r30
     354:	01 e0       	ldi	r16, 0x01	; 1
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	42 e0       	ldi	r20, 0x02	; 2
     35a:	64 e0       	ldi	r22, 0x04	; 4
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  GPS_2       ,  SW_EN3 ,     SW_ON,          MUX1,       26,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,    MUX1,        2 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );    
     362:	1f 92       	push	r1
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	f2 e0       	ldi	r31, 0x02	; 2
     36c:	ff 2e       	mov	r15, r31
     36e:	ff 92       	push	r15
     370:	aa e1       	ldi	r26, 0x1A	; 26
     372:	ea 2e       	mov	r14, r26
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	43 e0       	ldi	r20, 0x03	; 3
     378:	65 e0       	ldi	r22, 0x05	; 5
     37a:	85 e0       	ldi	r24, 0x05	; 5
     37c:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  CDH_IB      ,  SW_EN4 ,     SW_ON,          MUX1,       29,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,    MUX1,        3 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     380:	1f 92       	push	r1
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	1f 93       	push	r17
     38a:	bd e1       	ldi	r27, 0x1D	; 29
     38c:	eb 2e       	mov	r14, r27
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	44 e0       	ldi	r20, 0x04	; 4
     392:	66 e0       	ldi	r22, 0x06	; 6
     394:	86 e0       	ldi	r24, 0x06	; 6
     396:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  HEATER_1    ,  SW_EN5 ,     SW_ON,          MUX1,       14,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        31,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     ); 
     39a:	8d b7       	in	r24, 0x3d	; 61
     39c:	9e b7       	in	r25, 0x3e	; 62
     39e:	83 96       	adiw	r24, 0x23	; 35
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	9e bf       	out	0x3e, r25	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	8d bf       	out	0x3d, r24	; 61
     3aa:	1f 92       	push	r1
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	8f e1       	ldi	r24, 0x1F	; 31
     3b4:	98 2e       	mov	r9, r24
     3b6:	9f 92       	push	r9
     3b8:	9e e0       	ldi	r25, 0x0E	; 14
     3ba:	e9 2e       	mov	r14, r25
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	45 e0       	ldi	r20, 0x05	; 5
     3c0:	67 e0       	ldi	r22, 0x07	; 7
     3c2:	87 e0       	ldi	r24, 0x07	; 7
     3c4:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  HEATER_2    ,  SW_EN6 ,     SW_ON,          MUX1,       27,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        4 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     3c8:	1f 92       	push	r1
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	24 e0       	ldi	r18, 0x04	; 4
     3d2:	52 2e       	mov	r5, r18
     3d4:	5f 92       	push	r5
     3d6:	3b e1       	ldi	r19, 0x1B	; 27
     3d8:	e3 2e       	mov	r14, r19
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	46 e0       	ldi	r20, 0x06	; 6
     3de:	68 e0       	ldi	r22, 0x08	; 8
     3e0:	88 e0       	ldi	r24, 0x08	; 8
     3e2:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  CMG         ,  SW_EN9 ,     SW_ON,          MUX1,       15,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        8 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     ); 
     3e6:	1f 92       	push	r1
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	48 e0       	ldi	r20, 0x08	; 8
     3f0:	64 2e       	mov	r6, r20
     3f2:	6f 92       	push	r6
     3f4:	5f e0       	ldi	r21, 0x0F	; 15
     3f6:	e5 2e       	mov	r14, r21
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	49 e0       	ldi	r20, 0x09	; 9
     3fc:	69 e0       	ldi	r22, 0x09	; 9
     3fe:	89 e0       	ldi	r24, 0x09	; 9
     400:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SUN_SENSOR  ,  SW_EN10,     SW_ON,          MUX1,       25,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        9 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     404:	1f 92       	push	r1
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	69 e0       	ldi	r22, 0x09	; 9
     40e:	76 2e       	mov	r7, r22
     410:	7f 92       	push	r7
     412:	79 e1       	ldi	r23, 0x19	; 25
     414:	e7 2e       	mov	r14, r23
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	4a e0       	ldi	r20, 0x0A	; 10
     41a:	6a e0       	ldi	r22, 0x0A	; 10
     41c:	8a e0       	ldi	r24, 0x0A	; 10
     41e:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  RADIO_1     ,  SW_EN11,     SW_OFF,          MUX1,       24,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        10,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     ); 
     422:	1f 92       	push	r1
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	8a e0       	ldi	r24, 0x0A	; 10
     42c:	8f 93       	push	r24
     42e:	e8 e1       	ldi	r30, 0x18	; 24
     430:	ee 2e       	mov	r14, r30
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	4b e0       	ldi	r20, 0x0B	; 11
     436:	6b e0       	ldi	r22, 0x0B	; 11
     438:	8b e0       	ldi	r24, 0x0B	; 11
     43a:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  RADIO_2     ,  SW_EN12,     SW_OFF,          MUX1,       17,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        16,    I_THRESHOLD_VALUE, I_UNDER_VALUE,    MUX_NULL,       0     );   
     43e:	1f 92       	push	r1
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	f1 e1       	ldi	r31, 0x11	; 17
     44a:	ef 2e       	mov	r14, r31
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	4c e0       	ldi	r20, 0x0C	; 12
     450:	6c e0       	ldi	r22, 0x0C	; 12
     452:	8c e0       	ldi	r24, 0x0C	; 12
     454:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  MAESTRO     ,  SW_EN13,     SW_ON,          MUX1,       22,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        12,    I_THRESHOLD_VALUE, I_UNDER_VALUE,    MUX2    ,       8     );  
     458:	6f 92       	push	r6
     45a:	ff 92       	push	r15
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	8c e0       	ldi	r24, 0x0C	; 12
     462:	8f 93       	push	r24
     464:	a6 e1       	ldi	r26, 0x16	; 22
     466:	ea 2e       	mov	r14, r26
     468:	21 e0       	ldi	r18, 0x01	; 1
     46a:	4d e0       	ldi	r20, 0x0D	; 13
     46c:	6d e0       	ldi	r22, 0x0D	; 13
     46e:	8d e0       	ldi	r24, 0x0D	; 13
     470:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  MAGNETOM    ,  SW_EN14,     SW_ON,          MUX0,       4 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        6 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,  MUX_NULL,       0     );    
     474:	8d b7       	in	r24, 0x3d	; 61
     476:	9e b7       	in	r25, 0x3e	; 62
     478:	83 96       	adiw	r24, 0x23	; 35
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	9e bf       	out	0x3e, r25	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	8d bf       	out	0x3d, r24	; 61
     484:	1f 92       	push	r1
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	df 92       	push	r13
     48e:	81 2c       	mov	r8, r1
     490:	b4 e0       	ldi	r27, 0x04	; 4
     492:	eb 2e       	mov	r14, r27
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	4e e0       	ldi	r20, 0x0E	; 14
     49a:	6e e0       	ldi	r22, 0x0E	; 14
     49c:	8e e0       	ldi	r24, 0x0E	; 14
     49e:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  FOG_15V     ,  SW_EN16,     SW_ON,          MUX2,       21,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX_NULL,    0,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  // Fake Data changed mux 2 20 to mux null 0
     4a2:	1f 92       	push	r1
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	1f 92       	push	r1
     4ac:	03 e0       	ldi	r16, 0x03	; 3
     4ae:	80 2e       	mov	r8, r16
     4b0:	85 e1       	ldi	r24, 0x15	; 21
     4b2:	e8 2e       	mov	r14, r24
     4b4:	02 e0       	ldi	r16, 0x02	; 2
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	40 e1       	ldi	r20, 0x10	; 16
     4ba:	6f e0       	ldi	r22, 0x0F	; 15
     4bc:	8f e0       	ldi	r24, 0x0F	; 15
     4be:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  FOG_5V      ,  SW_EN15,     SW_ON,          MUX1,       18,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        13,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  // Fake Data
     4c2:	1f 92       	push	r1
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	8d e0       	ldi	r24, 0x0D	; 13
     4cc:	8f 93       	push	r24
     4ce:	88 24       	eor	r8, r8
     4d0:	83 94       	inc	r8
     4d2:	92 e1       	ldi	r25, 0x12	; 18
     4d4:	e9 2e       	mov	r14, r25
     4d6:	01 e0       	ldi	r16, 0x01	; 1
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	4f e0       	ldi	r20, 0x0F	; 15
     4dc:	60 e1       	ldi	r22, 0x10	; 16
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  TORQUER_1   ,  SW_NULL,     SW_OFF,          MUX1,       28,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX1,        5 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     4e4:	1f 92       	push	r1
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	25 e0       	ldi	r18, 0x05	; 5
     4ee:	62 2e       	mov	r6, r18
     4f0:	6f 92       	push	r6
     4f2:	3c e1       	ldi	r19, 0x1C	; 28
     4f4:	e3 2e       	mov	r14, r19
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	4f ef       	ldi	r20, 0xFF	; 255
     4fa:	61 e1       	ldi	r22, 0x11	; 17
     4fc:	81 e1       	ldi	r24, 0x11	; 17
     4fe:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  TORQUER_2   ,  SW_NULL,     SW_OFF,          MUX2,       15,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX2,        16,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     ); 
     502:	1f 92       	push	r1
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cf 93       	push	r28
     50c:	42 e0       	ldi	r20, 0x02	; 2
     50e:	84 2e       	mov	r8, r20
     510:	5f e0       	ldi	r21, 0x0F	; 15
     512:	e5 2e       	mov	r14, r21
     514:	02 e0       	ldi	r16, 0x02	; 2
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	4f ef       	ldi	r20, 0xFF	; 255
     51a:	62 e1       	ldi	r22, 0x12	; 18
     51c:	82 e1       	ldi	r24, 0x12	; 18
     51e:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  TORQUER_3   ,  SW_NULL,     SW_OFF,          MUX2,       17,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX2,        18,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     ); 
     522:	1f 92       	push	r1
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	82 e1       	ldi	r24, 0x12	; 18
     52c:	8f 93       	push	r24
     52e:	61 e1       	ldi	r22, 0x11	; 17
     530:	e6 2e       	mov	r14, r22
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	4f ef       	ldi	r20, 0xFF	; 255
     536:	63 e1       	ldi	r22, 0x13	; 19
     538:	83 e1       	ldi	r24, 0x13	; 19
     53a:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  BATTERY_1   ,  SW_NULL,     SW_ON,          MUX0,       1 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        2 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       9     );  // Fake Data  
     53e:	7f 92       	push	r7
     540:	ff 92       	push	r15
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ff 92       	push	r15
     548:	81 2c       	mov	r8, r1
     54a:	ee 24       	eor	r14, r14
     54c:	e3 94       	inc	r14
     54e:	00 e0       	ldi	r16, 0x00	; 0
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	4f ef       	ldi	r20, 0xFF	; 255
     554:	64 e1       	ldi	r22, 0x14	; 20
     556:	84 e1       	ldi	r24, 0x14	; 20
     558:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  //set_component( svit_index++,  BATTERY_1_b  ,  SW_NULL,     SW_ON,          MUX0,       1 ,      V_THRESHOLD_VALUE,      MUX1,        23 ,    I_THRESHOLD_VALUE,    MUX2    ,       9     );  // Fake Data  
  set_component( svit_index++,  BATTERY_2   ,  SW_NULL,     SW_ON,          MUX2,       20,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX2,        30,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       11    );  // Fake Data  
     55c:	8d b7       	in	r24, 0x3d	; 61
     55e:	9e b7       	in	r25, 0x3e	; 62
     560:	83 96       	adiw	r24, 0x23	; 35
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	9e bf       	out	0x3e, r25	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	8d bf       	out	0x3d, r24	; 61
     56c:	8b e0       	ldi	r24, 0x0B	; 11
     56e:	8f 93       	push	r24
     570:	ff 92       	push	r15
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	7e e1       	ldi	r23, 0x1E	; 30
     578:	77 2e       	mov	r7, r23
     57a:	7f 92       	push	r7
     57c:	e2 e0       	ldi	r30, 0x02	; 2
     57e:	8e 2e       	mov	r8, r30
     580:	f4 e1       	ldi	r31, 0x14	; 20
     582:	ef 2e       	mov	r14, r31
     584:	02 e0       	ldi	r16, 0x02	; 2
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	4f ef       	ldi	r20, 0xFF	; 255
     58a:	65 e1       	ldi	r22, 0x15	; 21
     58c:	85 e1       	ldi	r24, 0x15	; 21
     58e:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_FULL  ,  SW_NULL,     SW_ON,          MUX0,       7 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        3 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );
     592:	1f 92       	push	r1
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	1f 93       	push	r17
     59c:	81 2c       	mov	r8, r1
     59e:	a7 e0       	ldi	r26, 0x07	; 7
     5a0:	ea 2e       	mov	r14, r26
     5a2:	00 e0       	ldi	r16, 0x00	; 0
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	4f ef       	ldi	r20, 0xFF	; 255
     5a8:	66 e1       	ldi	r22, 0x16	; 22
     5aa:	86 e1       	ldi	r24, 0x16	; 22
     5ac:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_1     ,  SW_NULL,     SW_ON,          MUX0,       18,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        20,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       0     );  
     5b0:	1f 92       	push	r1
     5b2:	ff 92       	push	r15
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	84 e1       	ldi	r24, 0x14	; 20
     5ba:	8f 93       	push	r24
     5bc:	b2 e1       	ldi	r27, 0x12	; 18
     5be:	eb 2e       	mov	r14, r27
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	4f ef       	ldi	r20, 0xFF	; 255
     5c4:	67 e1       	ldi	r22, 0x17	; 23
     5c6:	87 e1       	ldi	r24, 0x17	; 23
     5c8:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_2     ,  SW_NULL,     SW_ON,          MUX0,       19,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        21,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       1     ); 
     5cc:	bf 92       	push	r11
     5ce:	ff 92       	push	r15
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	85 e1       	ldi	r24, 0x15	; 21
     5d6:	8f 93       	push	r24
     5d8:	83 e1       	ldi	r24, 0x13	; 19
     5da:	e8 2e       	mov	r14, r24
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	4f ef       	ldi	r20, 0xFF	; 255
     5e0:	68 e1       	ldi	r22, 0x18	; 24
     5e2:	88 e1       	ldi	r24, 0x18	; 24
     5e4:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_3     ,  SW_NULL,     SW_ON,          MUX0,       10,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        22,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       2     );  
     5e8:	ff 92       	push	r15
     5ea:	ff 92       	push	r15
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	86 e1       	ldi	r24, 0x16	; 22
     5f2:	8f 93       	push	r24
     5f4:	9a e0       	ldi	r25, 0x0A	; 10
     5f6:	e9 2e       	mov	r14, r25
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	4f ef       	ldi	r20, 0xFF	; 255
     5fc:	69 e1       	ldi	r22, 0x19	; 25
     5fe:	89 e1       	ldi	r24, 0x19	; 25
     600:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_4     ,  SW_NULL,     SW_ON,          MUX0,       15,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        23,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       3     );  
     604:	1f 93       	push	r17
     606:	ff 92       	push	r15
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	87 e1       	ldi	r24, 0x17	; 23
     60e:	8f 93       	push	r24
     610:	2f e0       	ldi	r18, 0x0F	; 15
     612:	e2 2e       	mov	r14, r18
     614:	21 e0       	ldi	r18, 0x01	; 1
     616:	4f ef       	ldi	r20, 0xFF	; 255
     618:	6a e1       	ldi	r22, 0x1A	; 26
     61a:	8a e1       	ldi	r24, 0x1A	; 26
     61c:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_5     ,  SW_NULL,     SW_ON,          MUX0,       9 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        24,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       4     );  
     620:	5f 92       	push	r5
     622:	ff 92       	push	r15
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	88 e1       	ldi	r24, 0x18	; 24
     62a:	8f 93       	push	r24
     62c:	39 e0       	ldi	r19, 0x09	; 9
     62e:	e3 2e       	mov	r14, r19
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	4f ef       	ldi	r20, 0xFF	; 255
     634:	6b e1       	ldi	r22, 0x1B	; 27
     636:	8b e1       	ldi	r24, 0x1B	; 27
     638:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_6     ,  SW_NULL,     SW_ON,          MUX0,       14,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        25,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     ); 
     63c:	8d b7       	in	r24, 0x3d	; 61
     63e:	9e b7       	in	r25, 0x3e	; 62
     640:	83 96       	adiw	r24, 0x23	; 35
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	9e bf       	out	0x3e, r25	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	8d bf       	out	0x3d, r24	; 61
     64c:	1f 92       	push	r1
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	89 e1       	ldi	r24, 0x19	; 25
     656:	8f 93       	push	r24
     658:	4e e0       	ldi	r20, 0x0E	; 14
     65a:	e4 2e       	mov	r14, r20
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	4f ef       	ldi	r20, 0xFF	; 255
     660:	6c e1       	ldi	r22, 0x1C	; 28
     662:	8c e1       	ldi	r24, 0x1C	; 28
     664:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_7     ,  SW_NULL,     SW_ON,          MUX0,       16,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        26,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     668:	1f 92       	push	r1
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	8a e1       	ldi	r24, 0x1A	; 26
     672:	8f 93       	push	r24
     674:	50 e1       	ldi	r21, 0x10	; 16
     676:	e5 2e       	mov	r14, r21
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	4f ef       	ldi	r20, 0xFF	; 255
     67c:	6d e1       	ldi	r22, 0x1D	; 29
     67e:	8d e1       	ldi	r24, 0x1D	; 29
     680:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_8     ,  SW_NULL,     SW_ON,          MUX0,       8 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        27,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     684:	1f 92       	push	r1
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	8b e1       	ldi	r24, 0x1B	; 27
     68e:	8f 93       	push	r24
     690:	68 e0       	ldi	r22, 0x08	; 8
     692:	e6 2e       	mov	r14, r22
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	4f ef       	ldi	r20, 0xFF	; 255
     698:	6e e1       	ldi	r22, 0x1E	; 30
     69a:	8e e1       	ldi	r24, 0x1E	; 30
     69c:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_9     ,  SW_NULL,     SW_ON,          MUX0,       13,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        28,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       5     );  
     6a0:	6f 92       	push	r6
     6a2:	ff 92       	push	r15
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	8c e1       	ldi	r24, 0x1C	; 28
     6aa:	8f 93       	push	r24
     6ac:	7d e0       	ldi	r23, 0x0D	; 13
     6ae:	e7 2e       	mov	r14, r23
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	4f ef       	ldi	r20, 0xFF	; 255
     6b4:	6f e1       	ldi	r22, 0x1F	; 31
     6b6:	8f e1       	ldi	r24, 0x1F	; 31
     6b8:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_10    ,  SW_NULL,     SW_ON,          MUX0,       12,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        29,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     6bc:	1f 92       	push	r1
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	8d e1       	ldi	r24, 0x1D	; 29
     6c6:	8f 93       	push	r24
     6c8:	ec e0       	ldi	r30, 0x0C	; 12
     6ca:	ee 2e       	mov	r14, r30
     6cc:	21 e0       	ldi	r18, 0x01	; 1
     6ce:	4f ef       	ldi	r20, 0xFF	; 255
     6d0:	60 e2       	ldi	r22, 0x20	; 32
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_11    ,  SW_NULL,     SW_ON,          MUX0,       11,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        30,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     6d8:	1f 92       	push	r1
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	7f 92       	push	r7
     6e2:	fb e0       	ldi	r31, 0x0B	; 11
     6e4:	ef 2e       	mov	r14, r31
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	4f ef       	ldi	r20, 0xFF	; 255
     6ea:	61 e2       	ldi	r22, 0x21	; 33
     6ec:	81 e2       	ldi	r24, 0x21	; 33
     6ee:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  SOLAR_12    ,  SW_NULL,     SW_ON,          MUX0,       17,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        31,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
     6f2:	1f 92       	push	r1
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	9f 92       	push	r9
     6fc:	a1 e1       	ldi	r26, 0x11	; 17
     6fe:	ea 2e       	mov	r14, r26
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	4f ef       	ldi	r20, 0xFF	; 255
     704:	62 e2       	ldi	r22, 0x22	; 34
     706:	82 e2       	ldi	r24, 0x22	; 34
     708:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
  set_component( svit_index++,  POWER_BOARD ,  SW_NULL,     SW_ON,          MUX0,       5 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        0 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       6     );  // Fake Data
     70c:	8d b7       	in	r24, 0x3d	; 61
     70e:	9e b7       	in	r25, 0x3e	; 62
     710:	83 96       	adiw	r24, 0x23	; 35
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	9e bf       	out	0x3e, r25	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	8d bf       	out	0x3d, r24	; 61
     71c:	df 92       	push	r13
     71e:	ff 92       	push	r15
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	1f 92       	push	r1
     726:	b5 e0       	ldi	r27, 0x05	; 5
     728:	eb 2e       	mov	r14, r27
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	4f ef       	ldi	r20, 0xFF	; 255
     72e:	63 e2       	ldi	r22, 0x23	; 35
     730:	83 e2       	ldi	r24, 0x23	; 35
     732:	0e 94 15 01 	call	0x22a	; 0x22a <set_component>
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	bf 90       	pop	r11
     752:	af 90       	pop	r10
     754:	9f 90       	pop	r9
     756:	8f 90       	pop	r8
     758:	7f 90       	pop	r7
     75a:	6f 90       	pop	r6
     75c:	5f 90       	pop	r5
     75e:	08 95       	ret

00000760 <receive_message>:
  // END Timer Initializations
  //--------------------------------------------------------------------- 
}

inline void receive_message( uint8_t uart, uint8_t* message, uint8_t message_size )//was inline
{
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	f8 2e       	mov	r15, r24
     76c:	fb 01       	movw	r30, r22
  uint8_t command = message[VCP_COMMAND_FIELD];
  uint8_t payload = message[VCP_PAYLOAD_FIELD];
     76e:	c1 81       	ldd	r28, Z+1	; 0x01

  switch(command)
     770:	90 81       	ld	r25, Z
     772:	93 30       	cpi	r25, 0x03	; 3
     774:	09 f4       	brne	.+2      	; 0x778 <receive_message+0x18>
     776:	5a c0       	rjmp	.+180    	; 0x82c <receive_message+0xcc>
     778:	30 f4       	brcc	.+12     	; 0x786 <receive_message+0x26>
     77a:	0c 2f       	mov	r16, r28
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	91 30       	cpi	r25, 0x01	; 1
     780:	11 f1       	breq	.+68     	; 0x7c6 <receive_message+0x66>
     782:	90 f5       	brcc	.+100    	; 0x7e8 <receive_message+0x88>
     784:	0c c0       	rjmp	.+24     	; 0x79e <receive_message+0x3e>
     786:	95 30       	cpi	r25, 0x05	; 5
     788:	09 f4       	brne	.+2      	; 0x78c <receive_message+0x2c>
     78a:	55 c0       	rjmp	.+170    	; 0x836 <receive_message+0xd6>
     78c:	08 f4       	brcc	.+2      	; 0x790 <receive_message+0x30>
     78e:	50 c0       	rjmp	.+160    	; 0x830 <receive_message+0xd0>
     790:	96 30       	cpi	r25, 0x06	; 6
     792:	09 f4       	brne	.+2      	; 0x796 <receive_message+0x36>
     794:	60 c0       	rjmp	.+192    	; 0x856 <receive_message+0xf6>
     796:	97 30       	cpi	r25, 0x07	; 7
     798:	09 f0       	breq	.+2      	; 0x79c <receive_message+0x3c>
     79a:	7b c0       	rjmp	.+246    	; 0x892 <receive_message+0x132>
     79c:	6b c0       	rjmp	.+214    	; 0x874 <receive_message+0x114>
  {
    case VCP_COMPONENT_ON:
	
	  // Reset CDH IB Heartbeat timer
	  timer1_counter[1] = CYCLE_COUNTER_2;
     79e:	8c e2       	ldi	r24, 0x2C	; 44
     7a0:	80 93 bf 0e 	sts	0x0EBF, r24
	  
      if ( svit[payload].switch_num != SW_NULL )
     7a4:	84 e2       	ldi	r24, 0x24	; 36
     7a6:	80 9f       	mul	r24, r16
     7a8:	e0 01       	movw	r28, r0
     7aa:	81 9f       	mul	r24, r17
     7ac:	d0 0d       	add	r29, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	c4 5c       	subi	r28, 0xC4	; 196
     7b2:	dc 4f       	sbci	r29, 0xFC	; 252
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <receive_message+0x62>
      {
        switch_on( svit[payload].switch_num );
     7ba:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
        svit[payload].switch_state = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8a 83       	std	Y+2, r24	; 0x02
      }
      transmit_packet( uart, VCP_ACK, command );
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <receive_message+0x84>
      break;
    case VCP_COMPONENT_OFF:
      if ( svit[payload].switch_num != SW_NULL )
     7c6:	84 e2       	ldi	r24, 0x24	; 36
     7c8:	80 9f       	mul	r24, r16
     7ca:	e0 01       	movw	r28, r0
     7cc:	81 9f       	mul	r24, r17
     7ce:	d0 0d       	add	r29, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	c4 5c       	subi	r28, 0xC4	; 196
     7d4:	dc 4f       	sbci	r29, 0xFC	; 252
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	8f 3f       	cpi	r24, 0xFF	; 255
     7da:	19 f0       	breq	.+6      	; 0x7e2 <receive_message+0x82>
      {
        switch_off( svit[payload].switch_num );
     7dc:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
        svit[payload].switch_state = 0;
     7e0:	1a 82       	std	Y+2, r1	; 0x02
      }
      transmit_packet( uart, VCP_ACK, command );
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	62 e0       	ldi	r22, 0x02	; 2
     7e6:	57 c0       	rjmp	.+174    	; 0x896 <receive_message+0x136>
      break;
    case VCP_POWER_CYCLE:
      if ( svit[payload].switch_num != SW_NULL )
     7e8:	84 e2       	ldi	r24, 0x24	; 36
     7ea:	80 9f       	mul	r24, r16
     7ec:	e0 01       	movw	r28, r0
     7ee:	81 9f       	mul	r24, r17
     7f0:	d0 0d       	add	r29, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	c4 5c       	subi	r28, 0xC4	; 196
     7f6:	dc 4f       	sbci	r29, 0xFC	; 252
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	8f 3f       	cpi	r24, 0xFF	; 255
     7fc:	19 f0       	breq	.+6      	; 0x804 <receive_message+0xa4>
      {
        switch_off( svit[payload].switch_num );
     7fe:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
        svit[payload].switch_state = 0;
     802:	1a 82       	std	Y+2, r1	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	8a 95       	dec	r24
     808:	f1 f7       	brne	.-4      	; 0x806 <receive_message+0xa6>
      }
      _delay_us(1);
      if ( svit[payload].switch_num != SW_NULL )
     80a:	84 e2       	ldi	r24, 0x24	; 36
     80c:	80 9f       	mul	r24, r16
     80e:	e0 01       	movw	r28, r0
     810:	81 9f       	mul	r24, r17
     812:	d0 0d       	add	r29, r0
     814:	11 24       	eor	r1, r1
     816:	c4 5c       	subi	r28, 0xC4	; 196
     818:	dc 4f       	sbci	r29, 0xFC	; 252
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	8f 3f       	cpi	r24, 0xFF	; 255
     81e:	21 f0       	breq	.+8      	; 0x828 <receive_message+0xc8>
      {
        switch_on( svit[payload].switch_num );
     820:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
        svit[payload].switch_state = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	8a 83       	std	Y+2, r24	; 0x02
      }
      transmit_packet( uart, VCP_ACK, command );
     828:	42 e0       	ldi	r20, 0x02	; 2
     82a:	dc cf       	rjmp	.-72     	; 0x7e4 <receive_message+0x84>
      break;
    case VCP_TORQ_CTRL:
      transmit_packet( uart, VCP_ACK, command );
     82c:	43 e0       	ldi	r20, 0x03	; 3
     82e:	da cf       	rjmp	.-76     	; 0x7e4 <receive_message+0x84>
      break;
    case VCP_GET_TELEMETRY:
      transmit_packet( uart, VCP_POWER_TELEMETRY, 0);
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	30 c0       	rjmp	.+96     	; 0x896 <receive_message+0x136>
      break;
    case VCP_FORCE_ON:
      if ( svit[payload].switch_num != SW_NULL )
     836:	84 e2       	ldi	r24, 0x24	; 36
     838:	c8 9f       	mul	r28, r24
     83a:	e0 01       	movw	r28, r0
     83c:	11 24       	eor	r1, r1
     83e:	c4 5c       	subi	r28, 0xC4	; 196
     840:	dc 4f       	sbci	r29, 0xFC	; 252
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	8f 3f       	cpi	r24, 0xFF	; 255
     846:	29 f0       	breq	.+10     	; 0x852 <receive_message+0xf2>
      {
        switch_on( svit[payload].switch_num );
     848:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
        svit[payload].switch_state = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	8a 83       	std	Y+2, r24	; 0x02
        svit[payload].force_on = 1;  
     850:	8b 83       	std	Y+3, r24	; 0x03
      }
      transmit_packet( uart, VCP_ACK, command );                                                            
     852:	45 e0       	ldi	r20, 0x05	; 5
     854:	c7 cf       	rjmp	.-114    	; 0x7e4 <receive_message+0x84>
      break;
    case VCP_CRIT_V_CHANGE:
      if ( svit[payload].switch_num != SW_NULL )
     856:	84 e2       	ldi	r24, 0x24	; 36
     858:	c8 9f       	mul	r28, r24
     85a:	e0 01       	movw	r28, r0
     85c:	11 24       	eor	r1, r1
     85e:	c4 5c       	subi	r28, 0xC4	; 196
     860:	dc 4f       	sbci	r29, 0xFC	; 252
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	8f 3f       	cpi	r24, 0xFF	; 255
     866:	f9 f0       	breq	.+62     	; 0x8a6 <receive_message+0x146>
      {
        svit[payload].V_upper_limit = message[VCP_PAYLOAD_FIELD + 1];
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	8e 83       	std	Y+6, r24	; 0x06
        V_upper_val_change= message[VCP_PAYLOAD_FIELD + 1];
     86c:	82 81       	ldd	r24, Z+2	; 0x02
     86e:	80 93 9d 0c 	sts	0x0C9D, r24
     872:	19 c0       	rjmp	.+50     	; 0x8a6 <receive_message+0x146>
      }
      //transmit_packet( uart, VCP_ACK, 0);
      break;
        case VCP_CRIT_I_CHANGE:
      if ( svit[payload].switch_num != SW_NULL )
     874:	84 e2       	ldi	r24, 0x24	; 36
     876:	c8 9f       	mul	r28, r24
     878:	e0 01       	movw	r28, r0
     87a:	11 24       	eor	r1, r1
     87c:	c4 5c       	subi	r28, 0xC4	; 196
     87e:	dc 4f       	sbci	r29, 0xFC	; 252
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	8f 3f       	cpi	r24, 0xFF	; 255
     884:	81 f0       	breq	.+32     	; 0x8a6 <receive_message+0x146>
      {
        svit[payload].I_upper_limit = message[VCP_PAYLOAD_FIELD + 1];
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	8f 87       	std	Y+15, r24	; 0x0f
        I_upper_val_change= message[VCP_PAYLOAD_FIELD + 1];
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	80 93 98 0c 	sts	0x0C98, r24
     890:	0a c0       	rjmp	.+20     	; 0x8a6 <receive_message+0x146>
      }
      //transmit_packet( uart, VCP_ACK, 0);
      break;
    default:
      transmit_packet( uart, VCP_INVALID_COMMAND, 0 );
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	8f 2d       	mov	r24, r15
      break;
  }
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
        I_upper_val_change= message[VCP_PAYLOAD_FIELD + 1];
      }
      //transmit_packet( uart, VCP_ACK, 0);
      break;
    default:
      transmit_packet( uart, VCP_INVALID_COMMAND, 0 );
     8a2:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <transmit_packet>
      break;
  }
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	08 95       	ret

000008b2 <StateofCharge>:


uint8_t antioptimizer = 0;
void StateofCharge(void){
     8b2:	cf 93       	push	r28
	
	
	if(batt1_voltage < 0xFF  &&  hasCheckedCurr){
     8b4:	20 91 90 0a 	lds	r18, 0x0A90
     8b8:	30 91 91 0a 	lds	r19, 0x0A91
     8bc:	2f 3f       	cpi	r18, 0xFF	; 255
     8be:	31 05       	cpc	r19, r1
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <StateofCharge+0x12>
     8c2:	d1 c0       	rjmp	.+418    	; 0xa66 <StateofCharge+0x1b4>
     8c4:	80 91 7e 0a 	lds	r24, 0x0A7E
     8c8:	88 23       	and	r24, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <StateofCharge+0x1c>
     8cc:	cc c0       	rjmp	.+408    	; 0xa66 <StateofCharge+0x1b4>
		
		if(solar1_current > 0x00){
     8ce:	80 91 92 0a 	lds	r24, 0x0A92
     8d2:	88 23       	and	r24, r24
     8d4:	21 f0       	breq	.+8      	; 0x8de <StateofCharge+0x2c>
			isCharging = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 ca 0e 	sts	0x0ECA, r24
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <StateofCharge+0x30>
		}else{
			isCharging = 0;
     8de:	10 92 ca 0e 	sts	0x0ECA, r1
		}
	
		
		if(  (isCharging && (batt1_voltage <= 0x7E) && (batt1_voltage > 0x64)) || (!isCharging && (batt1_voltage <= 0x77) && (batt1_voltage > 0x64)) ){
     8e2:	80 91 ca 0e 	lds	r24, 0x0ECA
     8e6:	88 23       	and	r24, r24
     8e8:	21 f0       	breq	.+8      	; 0x8f2 <StateofCharge+0x40>
     8ea:	2f 37       	cpi	r18, 0x7F	; 127
     8ec:	31 05       	cpc	r19, r1
     8ee:	28 f0       	brcs	.+10     	; 0x8fa <StateofCharge+0x48>
     8f0:	ae c0       	rjmp	.+348    	; 0xa4e <StateofCharge+0x19c>
     8f2:	28 37       	cpi	r18, 0x78	; 120
     8f4:	31 05       	cpc	r19, r1
     8f6:	08 f0       	brcs	.+2      	; 0x8fa <StateofCharge+0x48>
     8f8:	aa c0       	rjmp	.+340    	; 0xa4e <StateofCharge+0x19c>
     8fa:	25 36       	cpi	r18, 0x65	; 101
     8fc:	31 05       	cpc	r19, r1
     8fe:	08 f4       	brcc	.+2      	; 0x902 <StateofCharge+0x50>
     900:	a1 c0       	rjmp	.+322    	; 0xa44 <StateofCharge+0x192>
			antioptimizer++;
     902:	c0 91 06 03 	lds	r28, 0x0306
     906:	9c 2f       	mov	r25, r28
     908:	9f 5f       	subi	r25, 0xFF	; 255
     90a:	90 93 06 03 	sts	0x0306, r25
			if(isCharging){
     90e:	88 23       	and	r24, r24
     910:	09 f4       	brne	.+2      	; 0x914 <StateofCharge+0x62>
     912:	46 c0       	rjmp	.+140    	; 0x9a0 <StateofCharge+0xee>
     914:	40 91 a1 0e 	lds	r20, 0x0EA1
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     918:	2a 36       	cpi	r18, 0x6A	; 106
     91a:	31 05       	cpc	r19, r1
     91c:	28 f4       	brcc	.+10     	; 0x928 <StateofCharge+0x76>
     91e:	84 2f       	mov	r24, r20
     920:	82 95       	swap	r24
     922:	86 95       	lsr	r24
     924:	86 95       	lsr	r24
     926:	12 c0       	rjmp	.+36     	; 0x94c <StateofCharge+0x9a>
				            ((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
     928:	c9 01       	movw	r24, r18
     92a:	8a 56       	subi	r24, 0x6A	; 106
     92c:	91 09       	sbc	r25, r1
		
		if(  (isCharging && (batt1_voltage <= 0x7E) && (batt1_voltage > 0x64)) || (!isCharging && (batt1_voltage <= 0x77) && (batt1_voltage > 0x64)) ){
			antioptimizer++;
			if(isCharging){
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     92e:	0a 97       	sbiw	r24, 0x0a	; 10
     930:	38 f4       	brcc	.+14     	; 0x940 <StateofCharge+0x8e>
				            ((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
     932:	84 2f       	mov	r24, r20
     934:	82 95       	swap	r24
     936:	86 95       	lsr	r24
     938:	86 95       	lsr	r24
     93a:	83 70       	andi	r24, 0x03	; 3
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	06 c0       	rjmp	.+12     	; 0x94c <StateofCharge+0x9a>
							(batt1_voltage >= 0x74) ? (((batt1_voltageLow >> 6) + 2) % 0x04) :
     940:	84 2f       	mov	r24, r20
     942:	82 95       	swap	r24
     944:	86 95       	lsr	r24
     946:	86 95       	lsr	r24
     948:	83 70       	andi	r24, 0x03	; 3
     94a:	8e 5f       	subi	r24, 0xFE	; 254
		
		if(  (isCharging && (batt1_voltage <= 0x7E) && (batt1_voltage > 0x64)) || (!isCharging && (batt1_voltage <= 0x77) && (batt1_voltage > 0x64)) ){
			antioptimizer++;
			if(isCharging){
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     94c:	83 70       	andi	r24, 0x03	; 3
     94e:	80 93 bd 0e 	sts	0x0EBD, r24
				            ((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
							(batt1_voltage >= 0x74) ? (((batt1_voltageLow >> 6) + 2) % 0x04) :
							0x00; 
				percent = (charge20Pc[(batt1_voltage - 0x65)*4 + ltOffset] - 11) / (10.57);
     952:	f9 01       	movw	r30, r18
     954:	e5 56       	subi	r30, 0x65	; 101
     956:	f0 4c       	sbci	r31, 0xC0	; 192
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	e8 0f       	add	r30, r24
     962:	f1 1d       	adc	r31, r1
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	e4 57       	subi	r30, 0x74	; 116
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	65 91       	lpm	r22, Z+
     96e:	74 91       	lpm	r23, Z
     970:	6b 50       	subi	r22, 0x0B	; 11
     972:	71 09       	sbc	r23, r1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 b9 13 	call	0x2772	; 0x2772 <__floatunsisf>
     97c:	28 eb       	ldi	r18, 0xB8	; 184
     97e:	3e e1       	ldi	r19, 0x1E	; 30
     980:	49 e2       	ldi	r20, 0x29	; 41
     982:	51 e4       	ldi	r21, 0x41	; 65
     984:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__divsf3>
     988:	60 93 53 08 	sts	0x0853, r22
     98c:	70 93 54 08 	sts	0x0854, r23
     990:	80 93 55 08 	sts	0x0855, r24
     994:	90 93 56 08 	sts	0x0856, r25
				antioptimizer+=6;
     998:	c9 5f       	subi	r28, 0xF9	; 249
     99a:	c0 93 06 03 	sts	0x0306, r28
     99e:	63 c0       	rjmp	.+198    	; 0xa66 <StateofCharge+0x1b4>
				
			}else{
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     9a0:	2a 36       	cpi	r18, 0x6A	; 106
     9a2:	31 05       	cpc	r19, r1
     9a4:	30 f4       	brcc	.+12     	; 0x9b2 <StateofCharge+0x100>
     9a6:	80 91 a1 0e 	lds	r24, 0x0EA1
     9aa:	82 95       	swap	r24
     9ac:	86 95       	lsr	r24
     9ae:	86 95       	lsr	r24
     9b0:	19 c0       	rjmp	.+50     	; 0x9e4 <StateofCharge+0x132>
							((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
     9b2:	c9 01       	movw	r24, r18
     9b4:	8a 56       	subi	r24, 0x6A	; 106
     9b6:	91 09       	sbc	r25, r1
				percent = (charge20Pc[(batt1_voltage - 0x65)*4 + ltOffset] - 11) / (10.57);
				antioptimizer+=6;
				
			}else{
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     9b8:	0a 97       	sbiw	r24, 0x0a	; 10
     9ba:	40 f4       	brcc	.+16     	; 0x9cc <StateofCharge+0x11a>
							((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
     9bc:	80 91 a1 0e 	lds	r24, 0x0EA1
     9c0:	82 95       	swap	r24
     9c2:	86 95       	lsr	r24
     9c4:	86 95       	lsr	r24
     9c6:	83 70       	andi	r24, 0x03	; 3
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <StateofCharge+0x132>
							((batt1_voltage >= 0x74) && (batt1_voltage <= 0x76)) ? (((batt1_voltageLow >> 6) + 2) % 0x04) :
     9cc:	c9 01       	movw	r24, r18
     9ce:	84 57       	subi	r24, 0x74	; 116
     9d0:	91 09       	sbc	r25, r1
				percent = (charge20Pc[(batt1_voltage - 0x65)*4 + ltOffset] - 11) / (10.57);
				antioptimizer+=6;
				
			}else{
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     9d2:	03 97       	sbiw	r24, 0x03	; 3
     9d4:	48 f4       	brcc	.+18     	; 0x9e8 <StateofCharge+0x136>
							((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
							((batt1_voltage >= 0x74) && (batt1_voltage <= 0x76)) ? (((batt1_voltageLow >> 6) + 2) % 0x04) :
     9d6:	80 91 a1 0e 	lds	r24, 0x0EA1
     9da:	82 95       	swap	r24
     9dc:	86 95       	lsr	r24
     9de:	86 95       	lsr	r24
     9e0:	83 70       	andi	r24, 0x03	; 3
     9e2:	8e 5f       	subi	r24, 0xFE	; 254
				percent = (charge20Pc[(batt1_voltage - 0x65)*4 + ltOffset] - 11) / (10.57);
				antioptimizer+=6;
				
			}else{
				
				ltOffset =  (batt1_voltage <= 0x69) ? (batt1_voltageLow >> 6) :
     9e4:	83 70       	andi	r24, 0x03	; 3
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <StateofCharge+0x138>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	80 93 bd 0e 	sts	0x0EBD, r24
							((batt1_voltage >= 0x6A) && (batt1_voltage <= 0x73)) ? (((batt1_voltageLow >> 6) + 1) % 0x04) :
							((batt1_voltage >= 0x74) && (batt1_voltage <= 0x76)) ? (((batt1_voltageLow >> 6) + 2) % 0x04) :
							0x00;
				
				percent = 100 - ((discharge20Pc[(0x77 - batt1_voltage)*4 - ltOffset]) ) / (10.07);
     9ee:	4c ef       	ldi	r20, 0xFC	; 252
     9f0:	42 03       	mulsu	r20, r18
     9f2:	f0 01       	movw	r30, r0
     9f4:	43 9f       	mul	r20, r19
     9f6:	f0 0d       	add	r31, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	e4 52       	subi	r30, 0x24	; 36
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	e8 1b       	sub	r30, r24
     a00:	f1 09       	sbc	r31, r1
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e8 59       	subi	r30, 0x98	; 152
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	65 91       	lpm	r22, Z+
     a0c:	74 91       	lpm	r23, Z
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 b9 13 	call	0x2772	; 0x2772 <__floatunsisf>
     a16:	28 eb       	ldi	r18, 0xB8	; 184
     a18:	3e e1       	ldi	r19, 0x1E	; 30
     a1a:	41 e2       	ldi	r20, 0x21	; 33
     a1c:	51 e4       	ldi	r21, 0x41	; 65
     a1e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__divsf3>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	88 ec       	ldi	r24, 0xC8	; 200
     a2c:	92 e4       	ldi	r25, 0x42	; 66
     a2e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__subsf3>
     a32:	60 93 53 08 	sts	0x0853, r22
     a36:	70 93 54 08 	sts	0x0854, r23
     a3a:	80 93 55 08 	sts	0x0855, r24
     a3e:	90 93 56 08 	sts	0x0856, r25
     a42:	11 c0       	rjmp	.+34     	; 0xa66 <StateofCharge+0x1b4>
			}
		}else if(batt1_voltage <= 0x64){
			percent = -1;
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e8       	ldi	r26, 0x80	; 128
     a4a:	bf eb       	ldi	r27, 0xBF	; 191
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <StateofCharge+0x1a4>
		}else if(  ((batt1_voltage > 0x7E)&&isCharging) || ((!isCharging)&&(batt1_voltage > 0x77)) ){
			percent = 108;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a8 ed       	ldi	r26, 0xD8	; 216
     a54:	b2 e4       	ldi	r27, 0x42	; 66
     a56:	80 93 53 08 	sts	0x0853, r24
     a5a:	90 93 54 08 	sts	0x0854, r25
     a5e:	a0 93 55 08 	sts	0x0855, r26
     a62:	b0 93 56 08 	sts	0x0856, r27
		}
	}
	
	if(solar1_current < 0xFF && solar1_current > 0x00){
     a66:	80 91 92 0a 	lds	r24, 0x0A92
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	8e 3f       	cpi	r24, 0xFE	; 254
     a6e:	28 f4       	brcc	.+10     	; 0xa7a <StateofCharge+0x1c8>
		antioptimizer++;
     a70:	80 91 06 03 	lds	r24, 0x0306
     a74:	8f 5f       	subi	r24, 0xFF	; 255
     a76:	80 93 06 03 	sts	0x0306, r24
	}
	
	
}
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <assign_charge_fit>:



/* Assigns values to the Fourier coefficients of the charge approximation */
void assign_charge_fit( void ) {
  charge_max_time = 10188;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e3       	ldi	r25, 0x30	; 48
     a82:	af e1       	ldi	r26, 0x1F	; 31
     a84:	b6 e4       	ldi	r27, 0x46	; 70
     a86:	80 93 94 0a 	sts	0x0A94, r24
     a8a:	90 93 95 0a 	sts	0x0A95, r25
     a8e:	a0 93 96 0a 	sts	0x0A96, r26
     a92:	b0 93 97 0a 	sts	0x0A97, r27
  // x is normalized by mean 13.13 and std 0.1754
  p1 = 18.57;
     a96:	8c e5       	ldi	r24, 0x5C	; 92
     a98:	9f e8       	ldi	r25, 0x8F	; 143
     a9a:	a4 e9       	ldi	r26, 0x94	; 148
     a9c:	b1 e4       	ldi	r27, 0x41	; 65
     a9e:	80 93 6d 0a 	sts	0x0A6D, r24
     aa2:	90 93 6e 0a 	sts	0x0A6E, r25
     aa6:	a0 93 6f 0a 	sts	0x0A6F, r26
     aaa:	b0 93 70 0a 	sts	0x0A70, r27
  p2 = 184.8;
     aae:	8d ec       	ldi	r24, 0xCD	; 205
     ab0:	9c ec       	ldi	r25, 0xCC	; 204
     ab2:	a8 e3       	ldi	r26, 0x38	; 56
     ab4:	b3 e4       	ldi	r27, 0x43	; 67
     ab6:	80 93 25 03 	sts	0x0325, r24
     aba:	90 93 26 03 	sts	0x0326, r25
     abe:	a0 93 27 03 	sts	0x0327, r26
     ac2:	b0 93 28 03 	sts	0x0328, r27
  p3 = 663.6;
     ac6:	86 e6       	ldi	r24, 0x66	; 102
     ac8:	96 ee       	ldi	r25, 0xE6	; 230
     aca:	a5 e2       	ldi	r26, 0x25	; 37
     acc:	b4 e4       	ldi	r27, 0x44	; 68
     ace:	80 93 b1 0e 	sts	0x0EB1, r24
     ad2:	90 93 b2 0e 	sts	0x0EB2, r25
     ad6:	a0 93 b3 0e 	sts	0x0EB3, r26
     ada:	b0 93 b4 0e 	sts	0x0EB4, r27
  p4 = 838.6;
     ade:	86 e6       	ldi	r24, 0x66	; 102
     ae0:	96 ea       	ldi	r25, 0xA6	; 166
     ae2:	a1 e5       	ldi	r26, 0x51	; 81
     ae4:	b4 e4       	ldi	r27, 0x44	; 68
     ae6:	80 93 cd 0e 	sts	0x0ECD, r24
     aea:	90 93 ce 0e 	sts	0x0ECE, r25
     aee:	a0 93 cf 0e 	sts	0x0ECF, r26
     af2:	b0 93 d0 0e 	sts	0x0ED0, r27
  //where x is normalized by mean 13.7 and std 0.1558
  q1 = 78.49;
     af6:	81 ee       	ldi	r24, 0xE1	; 225
     af8:	9a ef       	ldi	r25, 0xFA	; 250
     afa:	ac e9       	ldi	r26, 0x9C	; 156
     afc:	b2 e4       	ldi	r27, 0x42	; 66
     afe:	80 93 8b 0a 	sts	0x0A8B, r24
     b02:	90 93 8c 0a 	sts	0x0A8C, r25
     b06:	a0 93 8d 0a 	sts	0x0A8D, r26
     b0a:	b0 93 8e 0a 	sts	0x0A8E, r27
  q2 = 543.1;
     b0e:	86 e6       	ldi	r24, 0x66	; 102
     b10:	96 ec       	ldi	r25, 0xC6	; 198
     b12:	a7 e0       	ldi	r26, 0x07	; 7
     b14:	b4 e4       	ldi	r27, 0x44	; 68
     b16:	80 93 4c 08 	sts	0x084C, r24
     b1a:	90 93 4d 08 	sts	0x084D, r25
     b1e:	a0 93 4e 08 	sts	0x084E, r26
     b22:	b0 93 4f 08 	sts	0x084F, r27
  q3 = 2427;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 eb       	ldi	r25, 0xB0	; 176
     b2a:	a7 e1       	ldi	r26, 0x17	; 23
     b2c:	b5 e4       	ldi	r27, 0x45	; 69
     b2e:	80 93 87 0a 	sts	0x0A87, r24
     b32:	90 93 88 0a 	sts	0x0A88, r25
     b36:	a0 93 89 0a 	sts	0x0A89, r26
     b3a:	b0 93 8a 0a 	sts	0x0A8A, r27
  q4 = 5587;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	98 e9       	ldi	r25, 0x98	; 152
     b42:	ae ea       	ldi	r26, 0xAE	; 174
     b44:	b5 e4       	ldi	r27, 0x45	; 69
     b46:	80 93 c2 0e 	sts	0x0EC2, r24
     b4a:	90 93 c3 0e 	sts	0x0EC3, r25
     b4e:	a0 93 c4 0e 	sts	0x0EC4, r26
     b52:	b0 93 c5 0e 	sts	0x0EC5, r27
     b56:	08 95       	ret

00000b58 <assign_discharge_fit>:
}

/* Assigns values to the Fourier coefficients of the discharge approximation */

void assign_discharge_fit( void ) {
  discharge_max_time = 17547;
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	96 e1       	ldi	r25, 0x16	; 22
     b5c:	a9 e8       	ldi	r26, 0x89	; 137
     b5e:	b6 e4       	ldi	r27, 0x46	; 70
     b60:	80 93 61 08 	sts	0x0861, r24
     b64:	90 93 62 08 	sts	0x0862, r25
     b68:	a0 93 63 08 	sts	0x0863, r26
     b6c:	b0 93 64 08 	sts	0x0864, r27
  f0 = -1.543291233254410E4;
     b70:	88 eb       	ldi	r24, 0xB8	; 184
     b72:	93 ec       	ldi	r25, 0xC3	; 195
     b74:	90 93 aa 0e 	sts	0x0EAA, r25
     b78:	80 93 a9 0e 	sts	0x0EA9, r24
  f1 = -1.819810644993805E4;
     b7c:	8a ee       	ldi	r24, 0xEA	; 234
     b7e:	98 eb       	ldi	r25, 0xB8	; 184
     b80:	90 93 b8 0e 	sts	0x0EB8, r25
     b84:	80 93 b7 0e 	sts	0x0EB7, r24
  b1 = -2.548949173344369E4;
     b88:	8f e6       	ldi	r24, 0x6F	; 111
     b8a:	9c e9       	ldi	r25, 0x9C	; 156
     b8c:	90 93 51 08 	sts	0x0851, r25
     b90:	80 93 50 08 	sts	0x0850, r24
  f2 = 1.141365113433748E4;
     b94:	85 e9       	ldi	r24, 0x95	; 149
     b96:	9c e2       	ldi	r25, 0x2C	; 44
     b98:	90 93 84 0a 	sts	0x0A84, r25
     b9c:	80 93 83 0a 	sts	0x0A83, r24
  b2 = -2.190399298389397E4;
     ba0:	81 e7       	ldi	r24, 0x71	; 113
     ba2:	9a ea       	ldi	r25, 0xAA	; 170
     ba4:	90 93 23 03 	sts	0x0323, r25
     ba8:	80 93 22 03 	sts	0x0322, r24
  f3 = 1.453849538420288E4;
     bac:	8a ec       	ldi	r24, 0xCA	; 202
     bae:	98 e3       	ldi	r25, 0x38	; 56
     bb0:	90 93 78 0a 	sts	0x0A78, r25
     bb4:	80 93 77 0a 	sts	0x0A77, r24
  b3 = 7.700208204268025E2;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	93 e0       	ldi	r25, 0x03	; 3
     bbc:	90 93 ac 0e 	sts	0x0EAC, r25
     bc0:	80 93 ab 0e 	sts	0x0EAB, r24
  f4 = 1.965482651710955E3;
     bc4:	8d ea       	ldi	r24, 0xAD	; 173
     bc6:	97 e0       	ldi	r25, 0x07	; 7
     bc8:	90 93 b6 0e 	sts	0x0EB6, r25
     bcc:	80 93 b5 0e 	sts	0x0EB5, r24
  b4 = 5.504490550919407E3;
     bd0:	80 e8       	ldi	r24, 0x80	; 128
     bd2:	95 e1       	ldi	r25, 0x15	; 21
     bd4:	90 93 6c 08 	sts	0x086C, r25
     bd8:	80 93 6b 08 	sts	0x086B, r24
  f5 = -9.466488439471518E2;
     bdc:	8e e4       	ldi	r24, 0x4E	; 78
     bde:	9c ef       	ldi	r25, 0xFC	; 252
     be0:	90 93 69 08 	sts	0x0869, r25
     be4:	80 93 68 08 	sts	0x0868, r24
  b5 = 8.270458368650347E2;
     be8:	8b e3       	ldi	r24, 0x3B	; 59
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	90 93 a8 0e 	sts	0x0EA8, r25
     bf0:	80 93 a7 0e 	sts	0x0EA7, r24
  w = 2.725333178515558;
     bf4:	8c ed       	ldi	r24, 0xDC	; 220
     bf6:	9b e6       	ldi	r25, 0x6B	; 107
     bf8:	ae e2       	ldi	r26, 0x2E	; 46
     bfa:	b0 e4       	ldi	r27, 0x40	; 64
     bfc:	80 93 57 08 	sts	0x0857, r24
     c00:	90 93 58 08 	sts	0x0858, r25
     c04:	a0 93 59 08 	sts	0x0859, r26
     c08:	b0 93 5a 08 	sts	0x085A, r27
  
  h0 = 2.979485572689352E8;
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	95 e5       	ldi	r25, 0x55	; 85
     c10:	a2 ec       	ldi	r26, 0xC2	; 194
     c12:	b1 e1       	ldi	r27, 0x11	; 17
     c14:	80 93 7f 0a 	sts	0x0A7F, r24
     c18:	90 93 80 0a 	sts	0x0A80, r25
     c1c:	a0 93 81 0a 	sts	0x0A81, r26
     c20:	b0 93 82 0a 	sts	0x0A82, r27
  h1 = 2.088787459098652E8;
     c24:	80 ea       	ldi	r24, 0xA0	; 160
     c26:	9c e3       	ldi	r25, 0x3C	; 60
     c28:	a3 e7       	ldi	r26, 0x73	; 115
     c2a:	bc e0       	ldi	r27, 0x0C	; 12
     c2c:	80 93 2d 03 	sts	0x032D, r24
     c30:	90 93 2e 03 	sts	0x032E, r25
     c34:	a0 93 2f 03 	sts	0x032F, r26
     c38:	b0 93 30 03 	sts	0x0330, r27
  g1 = 4.359717315569648E8;
     c3c:	80 ea       	ldi	r24, 0xA0	; 160
     c3e:	96 e6       	ldi	r25, 0x66	; 102
     c40:	ac ef       	ldi	r26, 0xFC	; 252
     c42:	b9 e1       	ldi	r27, 0x19	; 25
     c44:	80 93 32 03 	sts	0x0332, r24
     c48:	90 93 33 03 	sts	0x0333, r25
     c4c:	a0 93 34 03 	sts	0x0334, r26
     c50:	b0 93 35 03 	sts	0x0335, r27
  h2 =  -1.569778955752849E8;
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	95 eb       	ldi	r25, 0xB5	; 181
     c58:	a4 ea       	ldi	r26, 0xA4	; 164
     c5a:	b6 ef       	ldi	r27, 0xF6	; 246
     c5c:	80 93 7a 0a 	sts	0x0A7A, r24
     c60:	90 93 7b 0a 	sts	0x0A7B, r25
     c64:	a0 93 7c 0a 	sts	0x0A7C, r26
     c68:	b0 93 7d 0a 	sts	0x0A7D, r27
  g2 =  1.969854815603661E8;
     c6c:	80 e9       	ldi	r24, 0x90	; 144
     c6e:	92 ec       	ldi	r25, 0xC2	; 194
     c70:	ad eb       	ldi	r26, 0xBD	; 189
     c72:	bb e0       	ldi	r27, 0x0B	; 11
     c74:	80 93 72 0a 	sts	0x0A72, r24
     c78:	90 93 73 0a 	sts	0x0A73, r25
     c7c:	a0 93 74 0a 	sts	0x0A74, r26
     c80:	b0 93 75 0a 	sts	0x0A75, r27
  h3 =  -7.513816845838763E7;
     c84:	88 e8       	ldi	r24, 0x88	; 136
     c86:	9b e7       	ldi	r25, 0x7B	; 123
     c88:	a5 e8       	ldi	r26, 0x85	; 133
     c8a:	bb ef       	ldi	r27, 0xFB	; 251
     c8c:	80 93 b9 0e 	sts	0x0EB9, r24
     c90:	90 93 ba 0e 	sts	0x0EBA, r25
     c94:	a0 93 bb 0e 	sts	0x0EBB, r26
     c98:	b0 93 bc 0e 	sts	0x0EBC, r27
  g3 =  -1.633385950799686E7;
     c9c:	8c ed       	ldi	r24, 0xDC	; 220
     c9e:	93 ec       	ldi	r25, 0xC3	; 195
     ca0:	a6 e0       	ldi	r26, 0x06	; 6
     ca2:	bf ef       	ldi	r27, 0xFF	; 255
     ca4:	80 93 1e 03 	sts	0x031E, r24
     ca8:	90 93 1f 03 	sts	0x031F, r25
     cac:	a0 93 20 03 	sts	0x0320, r26
     cb0:	b0 93 21 03 	sts	0x0321, r27
  h4 =   -2.642581886559125E6;
     cb4:	8a e6       	ldi	r24, 0x6A	; 106
     cb6:	9d ea       	ldi	r25, 0xAD	; 173
     cb8:	a7 ed       	ldi	r26, 0xD7	; 215
     cba:	bf ef       	ldi	r27, 0xFF	; 255
     cbc:	80 93 9d 0e 	sts	0x0E9D, r24
     cc0:	90 93 9e 0e 	sts	0x0E9E, r25
     cc4:	a0 93 9f 0e 	sts	0x0E9F, r26
     cc8:	b0 93 a0 0e 	sts	0x0EA0, r27
  g4 =   -1.016608352073227E7;
     ccc:	8c eb       	ldi	r24, 0xBC	; 188
     cce:	90 ee       	ldi	r25, 0xE0	; 224
     cd0:	a4 e6       	ldi	r26, 0x64	; 100
     cd2:	bf ef       	ldi	r27, 0xFF	; 255
     cd4:	80 93 09 03 	sts	0x0309, r24
     cd8:	90 93 0a 03 	sts	0x030A, r25
     cdc:	a0 93 0b 03 	sts	0x030B, r26
     ce0:	b0 93 0c 03 	sts	0x030C, r27
  w2 =  0.364797662747743;
     ce4:	82 ec       	ldi	r24, 0xC2	; 194
     ce6:	96 ec       	ldi	r25, 0xC6	; 198
     ce8:	aa eb       	ldi	r26, 0xBA	; 186
     cea:	be e3       	ldi	r27, 0x3E	; 62
     cec:	80 93 99 0c 	sts	0x0C99, r24
     cf0:	90 93 9a 0c 	sts	0x0C9A, r25
     cf4:	a0 93 9b 0c 	sts	0x0C9B, r26
     cf8:	b0 93 9c 0c 	sts	0x0C9C, r27
     cfc:	08 95       	ret

00000cfe <initialize>:
  set_component( svit_index++,  SOLAR_12    ,  SW_NULL,     SW_ON,          MUX0,       17,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        31,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX_NULL,       0     );  
  set_component( svit_index++,  POWER_BOARD ,  SW_NULL,     SW_ON,          MUX0,       5 ,      V_THRESHOLD_VALUE,   V_UNDER_VALUE,      MUX0,        0 ,    I_THRESHOLD_VALUE, I_UNDER_VALUE,   MUX2    ,       6     );  // Fake Data
}

void initialize( void )
{
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
   // pin initialization
  DDRA  = 0b11111111;
     d0a:	1f ef       	ldi	r17, 0xFF	; 255
     d0c:	1a bb       	out	0x1a, r17	; 26
  PORTA = 0b00000111;
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	8b bb       	out	0x1b, r24	; 27

  DDRB  = 0b11111111;
     d12:	17 bb       	out	0x17, r17	; 23
  PORTB = 0b11100000;
     d14:	80 ee       	ldi	r24, 0xE0	; 224
     d16:	88 bb       	out	0x18, r24	; 24

  DDRC  = 0b11111111;
     d18:	14 bb       	out	0x14, r17	; 20
  PORTC = 0b11111111;
     d1a:	15 bb       	out	0x15, r17	; 21

  DDRD  = 0b11111011;
     d1c:	8b ef       	ldi	r24, 0xFB	; 251
     d1e:	81 bb       	out	0x11, r24	; 17
  PORTD = 0b11110000;
     d20:	80 ef       	ldi	r24, 0xF0	; 240
     d22:	82 bb       	out	0x12, r24	; 18

  DDRE  = 0b11111110;
     d24:	8e ef       	ldi	r24, 0xFE	; 254
     d26:	82 b9       	out	0x02, r24	; 2
  PORTE = 0b00000000;
     d28:	13 b8       	out	0x03, r1	; 3

  DDRF  = //0b11110000;
     d2a:	10 93 61 00 	sts	0x0061, r17
  0b11111111;	//testing
  PORTF = 0b00000000;
     d2e:	10 92 62 00 	sts	0x0062, r1

  DDRG  = 0b00011111;
     d32:	8f e1       	ldi	r24, 0x1F	; 31
     d34:	80 93 64 00 	sts	0x0064, r24
  PORTG = 0b00000100;
     d38:	04 e0       	ldi	r16, 0x04	; 4
     d3a:	00 93 65 00 	sts	0x0065, r16
  // compare value = 124
  // compare match interrupt freq = (14.7456 MHz / 1024 / 100) = 144 Hz
  // use timer0_counter to get 144 / 144 = 1 Hz

  // enable clear on match interrupt
  TIMSK = ( 1 << OCIE0 );
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	87 bf       	out	0x37, r24	; 55
  OCR0 = 71;
     d42:	87 e4       	ldi	r24, 0x47	; 71
     d44:	81 bf       	out	0x31, r24	; 49

  // enable clear on match mode, set prescalar to 1024
  TCCR0 = ( 1 << WGM01 ) | ( 1 << CS02 ) | ( 1 << CS01 ) | ( 1 << CS00 );
     d46:	8f e0       	ldi	r24, 0x0F	; 15
     d48:	83 bf       	out	0x33, r24	; 51

  timer0_counter[0] = 99;
     d4a:	83 e6       	ldi	r24, 0x63	; 99
     d4c:	80 93 96 0c 	sts	0x0C96, r24
  timer0_counter[1] = 199;
     d50:	87 ec       	ldi	r24, 0xC7	; 199
     d52:	80 93 97 0c 	sts	0x0C97, r24
  period of interrupts = 28800 / 14400 Hz = 2 s/interrupt
  use timer1_counter to get a total period of 2*65535 =  s (24 hours is 86400 seconds)
  */
  
  // Enable clear on match interrupt for the 16 bit timer/counter 1, register A
  OCR1A = 28800;		//28800 corresponds to 2 seconds
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	90 e7       	ldi	r25, 0x70	; 112
     d5a:	9b bd       	out	0x2b, r25	; 43
     d5c:	8a bd       	out	0x2a, r24	; 42

  // Enable clear on match mode, set prescalar to 1024.
  // CS[2:0] = 101 (1024 prescalar)
  // WGM[3:0] = 0100 (Clear Timer on Compare (CTC) when timer matches OCR1A)
  
  TCCR1B = ( 1 << WGM12 ) | ( 1 << CS12 ) | ( 1 << CS10 );
     d5e:	8d e0       	ldi	r24, 0x0D	; 13
     d60:	8e bd       	out	0x2e, r24	; 46
  // Explicit Default Defs
  // TCCR1A |= 0;
  // TCNT1 = 0;
  timer1_counter[0] = CYCLE_COUNTER;	//CYCLE_COUNTER   = 900 for 2 seconds interrupt handler = 1800 secs (30 minutes)
     d62:	84 e8       	ldi	r24, 0x84	; 132
     d64:	80 93 be 0e 	sts	0x0EBE, r24
  timer1_counter[1] = CYCLE_COUNTER_2;	//CYCLE_COUNTER_2 = 300 for 2 seconds interrupt handler = 600 secs  (10 minutes)
     d68:	8c e2       	ldi	r24, 0x2C	; 44
     d6a:	80 93 bf 0e 	sts	0x0EBF, r24
  //---------------------------------------------------------------------  
  // End of timer 1 Setup
  //--------------------------------------------------------------------- 
  
  // communication
  uart_init();
     d6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <uart_init>

  // for use in debugging
  // stdout = stdin = stderr = &uart_str;

  tel_packet_size[0] = 0;
     d72:	10 92 2a 03 	sts	0x032A, r1
     d76:	10 92 29 03 	sts	0x0329, r1
  tel_packet_size[1] = 0;
     d7a:	10 92 2c 03 	sts	0x032C, r1
     d7e:	10 92 2b 03 	sts	0x032B, r1
  tel_packet_index[0] = 0;
     d82:	10 92 65 08 	sts	0x0865, r1
  tel_packet_index[1] = 0;
     d86:	10 92 66 08 	sts	0x0866, r1
  uart_vcp_buff[0] = (vcp_ptrbuffer*)malloc( sizeof( vcp_ptrbuffer ) );
     d8a:	8a e0       	ldi	r24, 0x0A	; 10
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <malloc>
     d92:	7c 01       	movw	r14, r24
     d94:	e6 ec       	ldi	r30, 0xC6	; 198
     d96:	fe e0       	ldi	r31, 0x0E	; 14
     d98:	80 83       	st	Z, r24
     d9a:	f1 82       	std	Z+1, r15	; 0x01
  uart_vcp_buff[1] = (vcp_ptrbuffer*)malloc( sizeof( vcp_ptrbuffer ) );
     d9c:	8a e0       	ldi	r24, 0x0A	; 10
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <malloc>
     da4:	c8 ec       	ldi	r28, 0xC8	; 200
     da6:	de e0       	ldi	r29, 0x0E	; 14
     da8:	88 83       	st	Y, r24
     daa:	99 83       	std	Y+1, r25	; 0x01
  vcpptr_init( uart_vcp_buff[0], uart_message_buff[0], BUFFER_SIZE );
     dac:	4f ef       	ldi	r20, 0xFF	; 255
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	6f e9       	ldi	r22, 0x9F	; 159
     db2:	7c e0       	ldi	r23, 0x0C	; 12
     db4:	c7 01       	movw	r24, r14
     db6:	0e 94 a6 0b 	call	0x174c	; 0x174c <vcpptr_init>
  vcpptr_init( uart_vcp_buff[1], uart_message_buff[1], BUFFER_SIZE );
     dba:	4f ef       	ldi	r20, 0xFF	; 255
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	6e e9       	ldi	r22, 0x9E	; 158
     dc0:	7d e0       	ldi	r23, 0x0D	; 13
     dc2:	88 81       	ld	r24, Y
     dc4:	99 81       	ldd	r25, Y+1	; 0x01
     dc6:	0e 94 a6 0b 	call	0x174c	; 0x174c <vcpptr_init>

  rx_flag[0] = 0;
     dca:	10 92 cb 0e 	sts	0x0ECB, r1
  rx_flag[1] = 0;
     dce:	10 92 cc 0e 	sts	0x0ECC, r1

  // svit
  initialize_svit();
     dd2:	0e 94 45 01 	call	0x28a	; 0x28a <initialize_svit>

  // rev up those interrupts
  sei();
     dd6:	78 94       	sei

  //ADC conversions
  adc_flag = 1;
     dd8:	c1 e0       	ldi	r28, 0x01	; 1
     dda:	c0 93 6c 0a 	sts	0x0A6C, r28
	adc_component = 0;
     dde:	10 92 37 03 	sts	0x0337, r1
	adc_sensor_type = ADC_INIT;//get default case on first interation as to not enter switch
     de2:	00 93 79 0a 	sts	0x0A79, r16
  ADC_high = 0;
     de6:	10 92 86 0a 	sts	0x0A86, r1

  V_upper_val_change = 0;
     dea:	10 92 9d 0c 	sts	0x0C9D, r1
  I_upper_val_change = 0;
     dee:	10 92 98 0c 	sts	0x0C98, r1

  //---------------------------------------------------------------------  
  // SOC Initializations
  //--------------------------------------------------------------------- 
  // and shunt and safe transmit flags
  safe_mode = 0;
     df2:	10 92 76 0a 	sts	0x0A76, r1
  transmit_safe = 0;
     df6:	10 92 71 0a 	sts	0x0A71, r1
  transmit_shunt = 0;
     dfa:	10 92 a6 0e 	sts	0x0EA6, r1
  been_to_safe = 0;
     dfe:	10 92 31 03 	sts	0x0331, r1
  been_to_shunt = 0;
     e02:	10 92 93 0a 	sts	0x0A93, r1
  assign_charge_fit();
     e06:	0e 94 3f 05 	call	0xa7e	; 0xa7e <assign_charge_fit>
  assign_discharge_fit();
     e0a:	0e 94 ac 05 	call	0xb58	; 0xb58 <assign_discharge_fit>
  
  // First get battery voltage so that the SoC can
  // accurately determine whether batteries are charging or discharging
  batt1_voltage = 0xff;
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 91 0a 	sts	0x0A91, r25
     e16:	80 93 90 0a 	sts	0x0A90, r24
  batt2_voltage = 0xff;
     e1a:	10 93 9e 0c 	sts	0x0C9E, r17
  charging = 0xff;
     e1e:	10 93 5c 08 	sts	0x085C, r17
  chargeforward = 0;
     e22:	10 92 c1 0e 	sts	0x0EC1, r1
  chargebackward = 0;
     e26:	10 92 36 03 	sts	0x0336, r1
  debug = 0;
     e2a:	10 92 5b 08 	sts	0x085B, r1
  debug2 = 0;
     e2e:	10 92 67 08 	sts	0x0867, r1
  percent = 0;
     e32:	10 92 53 08 	sts	0x0853, r1
     e36:	10 92 54 08 	sts	0x0854, r1
     e3a:	10 92 55 08 	sts	0x0855, r1
     e3e:	10 92 56 08 	sts	0x0856, r1
  soc = 0;
     e42:	10 92 cf 10 	sts	0x10CF, r1
  high = 0;
     e46:	10 92 85 0a 	sts	0x0A85, r1
  low = 0;
     e4a:	10 92 8f 0a 	sts	0x0A8F, r1
  limit_check_overriden = 0; // Initially limit checking is NOT OVERRIDEN
     e4e:	10 92 52 08 	sts	0x0852, r1
  isCharging = 0;
     e52:	10 92 ca 0e 	sts	0x0ECA, r1
  hasCheckedCurr = 0;
     e56:	10 92 7e 0a 	sts	0x0A7E, r1
  
  coul_percent = 0;
     e5a:	10 92 ad 0e 	sts	0x0EAD, r1
     e5e:	10 92 ae 0e 	sts	0x0EAE, r1
     e62:	10 92 af 0e 	sts	0x0EAF, r1
     e66:	10 92 b0 0e 	sts	0x0EB0, r1
  total_percent = percent;
     e6a:	10 92 38 03 	sts	0x0338, r1
     e6e:	10 92 39 03 	sts	0x0339, r1
     e72:	10 92 3a 03 	sts	0x033A, r1
     e76:	10 92 3b 03 	sts	0x033B, r1
  //--------------------------------------------------------------------- 

  //---------------------------------------------------------------------  
  // Timer Initializations
  //---------------------------------------------------------------------
  cdh_heartbeat_flag = 0;	//Default: do not have flag to restart components on
     e7a:	10 92 24 03 	sts	0x0324, r1
  rad_torq_flag = 1;		//Indicates need to delay radio/torquer on signals later
     e7e:	c0 93 0d 03 	sts	0x030D, r28
  SVIT_t *component; 	// Initialize Radios to be OFF
  component = &svit[components[RADIO_1]];
     e82:	a0 91 19 03 	lds	r26, 0x0319
     e86:	c4 e2       	ldi	r28, 0x24	; 36
     e88:	ca 9f       	mul	r28, r26
     e8a:	d0 01       	movw	r26, r0
     e8c:	11 24       	eor	r1, r1
  switch_off( component->switch_num );
     e8e:	a4 5c       	subi	r26, 0xC4	; 196
     e90:	bc 4f       	sbci	r27, 0xFC	; 252
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	8c 91       	ld	r24, X
     e96:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
  component = &svit[components[RADIO_2]];
     e9a:	e0 91 1a 03 	lds	r30, 0x031A
     e9e:	ce 9f       	mul	r28, r30
     ea0:	f0 01       	movw	r30, r0
     ea2:	11 24       	eor	r1, r1
  switch_off( component->switch_num );
     ea4:	e4 5c       	subi	r30, 0xC4	; 196
     ea6:	fc 4f       	sbci	r31, 0xFC	; 252
     ea8:	81 81       	ldd	r24, Z+1	; 0x01
     eaa:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
  component = &svit[TORQUER_1];	// Initialize Torque Coils to be OFF
  component->switch_state = SW_OFF;
     eae:	10 92 a2 05 	sts	0x05A2, r1
  component = &svit[TORQUER_2];
  component->switch_state = SW_OFF;
     eb2:	10 92 c6 05 	sts	0x05C6, r1
  component = &svit[TORQUER_3];
  component->switch_state = SW_OFF;
     eb6:	10 92 ea 05 	sts	0x05EA, r1
  torquer_off(TORQUER_1);
     eba:	81 e1       	ldi	r24, 0x11	; 17
     ebc:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
  torquer_off(TORQUER_2);
     ec0:	82 e1       	ldi	r24, 0x12	; 18
     ec2:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
  torquer_off(TORQUER_3);
     ec6:	83 e1       	ldi	r24, 0x13	; 19
  //---------------------------------------------------------------------  
  // END Timer Initializations
  //--------------------------------------------------------------------- 
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
  component->switch_state = SW_OFF;
  component = &svit[TORQUER_3];
  component->switch_state = SW_OFF;
  torquer_off(TORQUER_1);
  torquer_off(TORQUER_2);
  torquer_off(TORQUER_3);
     ed4:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <torquer_off>

00000ed8 <compareVoltage>:
void compareVoltage( void ) {
  SVIT_t *component;
  //component = &svit[BATTERY_1_b];
  //chargebackward = average_samples( component->I_samples );
  component = &svit[BATTERY_1];
  chargeforward= average_samples( component->I_samples );
     ed8:	8d e1       	ldi	r24, 0x1D	; 29
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
     ee0:	80 93 c1 0e 	sts	0x0EC1, r24
  if (chargeforward > 2){
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	10 f0       	brcs	.+4      	; 0xeec <compareVoltage+0x14>
    charging = 0xdd;//discharging
     ee8:	8d ed       	ldi	r24, 0xDD	; 221
     eea:	01 c0       	rjmp	.+2      	; 0xeee <compareVoltage+0x16>
    }
  else{
    charging = 0xcc;
     eec:	8c ec       	ldi	r24, 0xCC	; 204
     eee:	80 93 5c 08 	sts	0x085C, r24
     ef2:	08 95       	ret

00000ef4 <limit_check>:
we should at least get the framework set up for limit checking on arbitrary values.
The power board should have upper and lower limits for vsense and csense data, 
and turn off components if their voltage/current is too high. ONLY CHECKS
BATTERY 1 VOLTAGE LINE RIGHT NOW.
*/
void limit_check( void ) {
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
	unsigned char sw;
	SVIT_t *component;

	// turn off all switches and send ack_command w/ value of SAFE_MODE
	if (percent < SAFE_MODE  && !((percent<-.56) && (percent>-.57) )   ) {
     f04:	c0 90 53 08 	lds	r12, 0x0853
     f08:	d0 90 54 08 	lds	r13, 0x0854
     f0c:	e0 90 55 08 	lds	r14, 0x0855
     f10:	f0 90 56 08 	lds	r15, 0x0856
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a9 01       	movw	r20, r18
     f1a:	c7 01       	movw	r24, r14
     f1c:	b6 01       	movw	r22, r12
     f1e:	0e 94 4d 13 	call	0x269a	; 0x269a <__cmpsf2>
     f22:	87 ff       	sbrs	r24, 7
     f24:	4c c0       	rjmp	.+152    	; 0xfbe <limit_check+0xca>
     f26:	29 e2       	ldi	r18, 0x29	; 41
     f28:	3c e5       	ldi	r19, 0x5C	; 92
     f2a:	4f e0       	ldi	r20, 0x0F	; 15
     f2c:	5f eb       	ldi	r21, 0xBF	; 191
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 4d 13 	call	0x269a	; 0x269a <__cmpsf2>
     f36:	87 ff       	sbrs	r24, 7
     f38:	0a c0       	rjmp	.+20     	; 0xf4e <limit_check+0x5a>
     f3a:	25 e8       	ldi	r18, 0x85	; 133
     f3c:	3b ee       	ldi	r19, 0xEB	; 235
     f3e:	41 e1       	ldi	r20, 0x11	; 17
     f40:	5f eb       	ldi	r21, 0xBF	; 191
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__gesf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	c4 f1       	brlt	.+112    	; 0xfbe <limit_check+0xca>
		safe_mode = 1;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 76 0a 	sts	0x0A76, r24
     f54:	0e e0       	ldi	r16, 0x0E	; 14
     f56:	13 e0       	ldi	r17, 0x03	; 3
		for (sw = 0; sw < sizeof(components); sw++) {
			component = &svit[components[sw]];
     f58:	34 e2       	ldi	r19, 0x24	; 36
     f5a:	f3 2e       	mov	r15, r19
     f5c:	f8 01       	movw	r30, r16
     f5e:	c1 91       	ld	r28, Z+
     f60:	8f 01       	movw	r16, r30
     f62:	fc 9e       	mul	r15, r28
     f64:	e0 01       	movw	r28, r0
     f66:	11 24       	eor	r1, r1
     f68:	c4 5c       	subi	r28, 0xC4	; 196
     f6a:	dc 4f       	sbci	r29, 0xFC	; 252
			switch_off( component->switch_num );
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
			component->switch_state = SW_OFF;
     f72:	1a 82       	std	Y+2, r1	; 0x02
	SVIT_t *component;

	// turn off all switches and send ack_command w/ value of SAFE_MODE
	if (percent < SAFE_MODE  && !((percent<-.56) && (percent>-.57) )   ) {
		safe_mode = 1;
		for (sw = 0; sw < sizeof(components); sw++) {
     f74:	f3 e0       	ldi	r31, 0x03	; 3
     f76:	0e 31       	cpi	r16, 0x1E	; 30
     f78:	1f 07       	cpc	r17, r31
     f7a:	81 f7       	brne	.-32     	; 0xf5c <limit_check+0x68>
			component = &svit[components[sw]];
			switch_off( component->switch_num );
			component->switch_state = SW_OFF;
		}
		component = &svit[TORQUER_1];
		component->switch_state = SW_OFF;
     f7c:	10 92 a2 05 	sts	0x05A2, r1
		component = &svit[TORQUER_2];
		component->switch_state = SW_OFF;
     f80:	10 92 c6 05 	sts	0x05C6, r1
		component = &svit[TORQUER_3];
		component->switch_state = SW_OFF;
     f84:	10 92 ea 05 	sts	0x05EA, r1
		torquer_off(TORQUER_1);
     f88:	81 e1       	ldi	r24, 0x11	; 17
     f8a:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
		torquer_off(TORQUER_2);
     f8e:	82 e1       	ldi	r24, 0x12	; 18
     f90:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
		torquer_off(TORQUER_3);
     f94:	83 e1       	ldi	r24, 0x13	; 19
     f96:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
		// Only transmit once
		if (!transmit_safe && !been_to_safe) { 
     f9a:	80 91 71 0a 	lds	r24, 0x0A71
     f9e:	81 11       	cpse	r24, r1
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <limit_check+0xbe>
     fa2:	80 91 31 03 	lds	r24, 0x0331
     fa6:	81 11       	cpse	r24, r1
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <limit_check+0xbe>
			transmit_packet( 0, VCP_ACK, SAFE_MODE);
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	62 e0       	ldi	r22, 0x02	; 2
     fae:	0e 94 3b 12 	call	0x2476	; 0x2476 <transmit_packet>
			transmit_safe = 1;
		}
		else {}
		been_to_safe = 1;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 31 03 	sts	0x0331, r24
		transmit_safe = 1;
     fb8:	80 93 71 0a 	sts	0x0A71, r24
     fbc:	28 c0       	rjmp	.+80     	; 0x100e <limit_check+0x11a>
	}
	else if (percent > SHUNT_MODE  && isCharging) {
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	48 ec       	ldi	r20, 0xC8	; 200
     fc4:	52 e4       	ldi	r21, 0x42	; 66
     fc6:	c7 01       	movw	r24, r14
     fc8:	b6 01       	movw	r22, r12
     fca:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__gesf2>
     fce:	18 16       	cp	r1, r24
     fd0:	f4 f4       	brge	.+60     	; 0x100e <limit_check+0x11a>
     fd2:	80 91 ca 0e 	lds	r24, 0x0ECA
     fd6:	88 23       	and	r24, r24
     fd8:	d1 f0       	breq	.+52     	; 0x100e <limit_check+0x11a>
	    safe_mode = 0;
     fda:	10 92 76 0a 	sts	0x0A76, r1
		// turn on the maestro and send ack_command w/ value of SHUNT_MODE
		component = &svit[MAESTRO];
		switch_on( component->switch_num );
     fde:	80 91 11 05 	lds	r24, 0x0511
     fe2:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
		component->switch_state = SW_ON;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 12 05 	sts	0x0512, r24
		// Only transmit once
		if (!transmit_shunt && !been_to_shunt) {
     fec:	80 91 a6 0e 	lds	r24, 0x0EA6
     ff0:	81 11       	cpse	r24, r1
     ff2:	08 c0       	rjmp	.+16     	; 0x1004 <limit_check+0x110>
     ff4:	80 91 93 0a 	lds	r24, 0x0A93
     ff8:	81 11       	cpse	r24, r1
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <limit_check+0x110>
			transmit_packet( 0, VCP_ACK, SHUNT_MODE);
     ffc:	44 e6       	ldi	r20, 0x64	; 100
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	0e 94 3b 12 	call	0x2476	; 0x2476 <transmit_packet>
		}
		else {}	
		been_to_shunt = 1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 93 0a 	sts	0x0A93, r24
		transmit_shunt = 1;	
    100a:	80 93 a6 0e 	sts	0x0EA6, r24
	}
	else {} // To avoid annoying compile warning 
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	08 95       	ret

00001020 <coulombCount>:
	SVIT_t *component;
	uint8_t sampled_i;
	int16_t acc_curr;
	component = &svit[adc_component];
	//MaxCharge = 17275 * 2.2;
	if(coul_en == 1){
    1020:	80 91 6a 08 	lds	r24, 0x086A
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	51 f4       	brne	.+20     	; 0x103c <coulombCount+0x1c>
		coul_en=0;
    1028:	10 92 6a 08 	sts	0x086A, r1
			acc_curr = 0;
		}
		else if(acc_curr > MAX_CHARGE){
			acc_curr = MAX_CHARGE;
		}
		coul_percent = acc_curr / MAX_CHARGE * 100;
    102c:	10 92 ad 0e 	sts	0x0EAD, r1
    1030:	10 92 ae 0e 	sts	0x0EAE, r1
    1034:	10 92 af 0e 	sts	0x0EAF, r1
    1038:	10 92 b0 0e 	sts	0x0EB0, r1
    103c:	08 95       	ret

0000103e <consolidatePercent>:
	}
}

void consolidatePercent( void ){
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
	if(coul_percent > 0){
    1046:	c0 90 ad 0e 	lds	r12, 0x0EAD
    104a:	d0 90 ae 0e 	lds	r13, 0x0EAE
    104e:	e0 90 af 0e 	lds	r14, 0x0EAF
    1052:	f0 90 b0 0e 	lds	r15, 0x0EB0
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	a9 01       	movw	r20, r18
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__gesf2>
    1064:	18 16       	cp	r1, r24
    1066:	3c f5       	brge	.+78     	; 0x10b6 <consolidatePercent+0x78>
		total_percent = .4*coul_percent + .6*percent;
    1068:	2d ec       	ldi	r18, 0xCD	; 205
    106a:	3c ec       	ldi	r19, 0xCC	; 204
    106c:	4c ec       	ldi	r20, 0xCC	; 204
    106e:	5e e3       	ldi	r21, 0x3E	; 62
    1070:	c7 01       	movw	r24, r14
    1072:	b6 01       	movw	r22, r12
    1074:	0e 94 6f 14 	call	0x28de	; 0x28de <__mulsf3>
    1078:	6b 01       	movw	r12, r22
    107a:	7c 01       	movw	r14, r24
    107c:	2a e9       	ldi	r18, 0x9A	; 154
    107e:	39 e9       	ldi	r19, 0x99	; 153
    1080:	49 e1       	ldi	r20, 0x19	; 25
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	60 91 53 08 	lds	r22, 0x0853
    1088:	70 91 54 08 	lds	r23, 0x0854
    108c:	80 91 55 08 	lds	r24, 0x0855
    1090:	90 91 56 08 	lds	r25, 0x0856
    1094:	0e 94 6f 14 	call	0x28de	; 0x28de <__mulsf3>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__addsf3>
    10a4:	60 93 38 03 	sts	0x0338, r22
    10a8:	70 93 39 03 	sts	0x0339, r23
    10ac:	80 93 3a 03 	sts	0x033A, r24
    10b0:	90 93 3b 03 	sts	0x033B, r25
    10b4:	10 c0       	rjmp	.+32     	; 0x10d6 <consolidatePercent+0x98>
	}
	else{
		total_percent = percent;
    10b6:	80 91 53 08 	lds	r24, 0x0853
    10ba:	90 91 54 08 	lds	r25, 0x0854
    10be:	a0 91 55 08 	lds	r26, 0x0855
    10c2:	b0 91 56 08 	lds	r27, 0x0856
    10c6:	80 93 38 03 	sts	0x0338, r24
    10ca:	90 93 39 03 	sts	0x0339, r25
    10ce:	a0 93 3a 03 	sts	0x033A, r26
    10d2:	b0 93 3b 03 	sts	0x033B, r27
	}
}
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	df 90       	pop	r13
    10dc:	cf 90       	pop	r12
    10de:	08 95       	ret

000010e0 <main>:


// MAIN
int main( void ) 
{  
  initialize();
    10e0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <initialize>
  //fprintf( stdout, "uart initialized\n" );
	
  //Testing
  cntr = 0;
    10e4:	10 92 6b 0a 	sts	0x0A6B, r1

  while(1)
  {
	cntr = 1 - cntr; //Testing
    10e8:	11 e0       	ldi	r17, 0x01	; 1
	
    if ( timer0_counter[1] == 0 )
    {
        timer0_counter[1] = 199;
    10ea:	c7 ec       	ldi	r28, 0xC7	; 199
		//PORTC ^= 0x02;
		//Set flag off
		cdh_heartbeat_flag = 0;
		
		//reset appropriate timer counter to cycle_counter_2     //DOUBLECHECK that this adheres to the spec!!!
		timer1_counter[1] = CYCLE_COUNTER_2;
    10ec:	dc e2       	ldi	r29, 0x2C	; 44
  //Testing
  cntr = 0;

  while(1)
  {
	cntr = 1 - cntr; //Testing
    10ee:	80 91 6b 0a 	lds	r24, 0x0A6B
    10f2:	91 2f       	mov	r25, r17
    10f4:	98 1b       	sub	r25, r24
    10f6:	90 93 6b 0a 	sts	0x0A6B, r25
	
    if ( timer0_counter[1] == 0 )
    10fa:	80 91 97 0c 	lds	r24, 0x0C97
    10fe:	81 11       	cpse	r24, r1
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <__stack+0x11>
    {
        timer0_counter[1] = 199;
    1102:	c0 93 97 0c 	sts	0x0C97, r28
        transmit_packet( 1, VCP_POWER_TELEMETRY, 0);
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	0e 94 3b 12 	call	0x2476	; 0x2476 <transmit_packet>
    }
	  if ( timer0_counter[0] == 0 )
    1110:	80 91 96 0c 	lds	r24, 0x0C96
    1114:	81 11       	cpse	r24, r1
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <__stack+0x25>
    {
        timer0_counter[0] = 199;
    1118:	c0 93 96 0c 	sts	0x0C96, r28
        transmit_packet( 0, VCP_POWER_TELEMETRY, 0);
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	0e 94 3b 12 	call	0x2476	; 0x2476 <transmit_packet>
    }
	  if ( rx_flag[0] > 0 )
    1124:	80 91 cb 0e 	lds	r24, 0x0ECB
    1128:	88 23       	and	r24, r24
    112a:	c9 f0       	breq	.+50     	; 0x115e <__stack+0x5f>
    {
        rx_flag[0]--;
    112c:	80 91 cb 0e 	lds	r24, 0x0ECB
    1130:	81 50       	subi	r24, 0x01	; 1
    1132:	80 93 cb 0e 	sts	0x0ECB, r24
        receive_message( 0, uart_vcp_buff[0]->message, uart_vcp_buff[0]->index );
    1136:	e0 91 c6 0e 	lds	r30, 0x0EC6
    113a:	f0 91 c7 0e 	lds	r31, 0x0EC7
    113e:	61 81       	ldd	r22, Z+1	; 0x01
    1140:	72 81       	ldd	r23, Z+2	; 0x02
    1142:	47 81       	ldd	r20, Z+7	; 0x07
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e 94 b0 03 	call	0x760	; 0x760 <receive_message>
        vcpptr_init( uart_vcp_buff[0], uart_message_buff[0], BUFFER_SIZE );
    114a:	4f ef       	ldi	r20, 0xFF	; 255
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	6f e9       	ldi	r22, 0x9F	; 159
    1150:	7c e0       	ldi	r23, 0x0C	; 12
    1152:	80 91 c6 0e 	lds	r24, 0x0EC6
    1156:	90 91 c7 0e 	lds	r25, 0x0EC7
    115a:	0e 94 a6 0b 	call	0x174c	; 0x174c <vcpptr_init>
    }
	  if ( rx_flag[1] > 0 )
    115e:	80 91 cc 0e 	lds	r24, 0x0ECC
    1162:	88 23       	and	r24, r24
    1164:	c9 f0       	breq	.+50     	; 0x1198 <__stack+0x99>
    {
        rx_flag[1]--;
    1166:	80 91 cc 0e 	lds	r24, 0x0ECC
    116a:	81 50       	subi	r24, 0x01	; 1
    116c:	80 93 cc 0e 	sts	0x0ECC, r24
        receive_message( 1, uart_vcp_buff[1]->message, uart_vcp_buff[1]->index );
    1170:	e0 91 c8 0e 	lds	r30, 0x0EC8
    1174:	f0 91 c9 0e 	lds	r31, 0x0EC9
    1178:	61 81       	ldd	r22, Z+1	; 0x01
    117a:	72 81       	ldd	r23, Z+2	; 0x02
    117c:	47 81       	ldd	r20, Z+7	; 0x07
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	0e 94 b0 03 	call	0x760	; 0x760 <receive_message>
        vcpptr_init( uart_vcp_buff[1], uart_message_buff[1], BUFFER_SIZE );
    1184:	4f ef       	ldi	r20, 0xFF	; 255
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	6e e9       	ldi	r22, 0x9E	; 158
    118a:	7d e0       	ldi	r23, 0x0D	; 13
    118c:	80 91 c8 0e 	lds	r24, 0x0EC8
    1190:	90 91 c9 0e 	lds	r25, 0x0EC9
    1194:	0e 94 a6 0b 	call	0x174c	; 0x174c <vcpptr_init>
    }
    if (adc_flag == 1)
    1198:	80 91 6c 0a 	lds	r24, 0x0A6C
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	b1 f4       	brne	.+44     	; 0x11cc <__stack+0xcd>
    {
        adc_flag = 0;
    11a0:	10 92 6c 0a 	sts	0x0A6C, r1
        read_VIT();
    11a4:	0e 94 40 0a 	call	0x1480	; 0x1480 <read_VIT>
		//calcSOC();
		StateofCharge();
    11a8:	0e 94 59 04 	call	0x8b2	; 0x8b2 <StateofCharge>
		coulombCount();
    11ac:	0e 94 10 08 	call	0x1020	; 0x1020 <coulombCount>
		consolidatePercent();
    11b0:	0e 94 1f 08 	call	0x103e	; 0x103e <consolidatePercent>
		/*
		Manual Override on Limit Checking: The power board must be able to receive a 
		command to disable and/or change the limits in the limit checking code
		*/
		if (!limit_check_overriden) {
    11b4:	80 91 52 08 	lds	r24, 0x0852
    11b8:	81 11       	cpse	r24, r1
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <__stack+0xc1>
			limit_check(); // First determine if voltage is within valid range, then switch
    11bc:	0e 94 7a 07 	call	0xef4	; 0xef4 <limit_check>
		}

		if ( adc_component == 23 ) 
    11c0:	80 91 37 03 	lds	r24, 0x0337
    11c4:	87 31       	cpi	r24, 0x17	; 23
    11c6:	11 f4       	brne	.+4      	; 0x11cc <__stack+0xcd>
      	{ //23ish anything after battery values are calculated
  			  compareVoltage();
    11c8:	0e 94 6c 07 	call	0xed8	; 0xed8 <compareVoltage>
	   	}
    }	
	
	//Restart all board components if CDH-IB heartbeat timeout
	if (cdh_heartbeat_flag == 1){
    11cc:	80 91 24 03 	lds	r24, 0x0324
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__stack+0xd7>
    11d4:	8c cf       	rjmp	.-232    	; 0x10ee <main+0xe>
		//Restart all components
		//PORTC ^= 0x02;
		//Set flag off
		cdh_heartbeat_flag = 0;
    11d6:	10 92 24 03 	sts	0x0324, r1
		
		//reset appropriate timer counter to cycle_counter_2     //DOUBLECHECK that this adheres to the spec!!!
		timer1_counter[1] = CYCLE_COUNTER_2;
    11da:	d0 93 bf 0e 	sts	0x0EBF, r29
    11de:	87 cf       	rjmp	.-242    	; 0x10ee <main+0xe>

000011e0 <torquer_off.part.0>:
void torquer_off( uint8_t torquer_num )
{
  switch( torquer_num )
  {
    case TORQUER_1:
      CLR( PORTC, 0 );
    11e0:	a8 98       	cbi	0x15, 0	; 21
	  CLR( PORTG, 1 );
    11e2:	e5 e6       	ldi	r30, 0x65	; 101
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8d 7f       	andi	r24, 0xFD	; 253
    11ea:	80 83       	st	Z, r24
    11ec:	08 95       	ret

000011ee <set_mux_sel>:
#include "mcupwr-Defs.h"


void set_mux_sel( uint8_t mux_num, uint8_t mux_sel )
{
  switch( mux_num )
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	f9 f0       	breq	.+62     	; 0x1230 <set_mux_sel+0x42>
    11f2:	20 f0       	brcs	.+8      	; 0x11fc <set_mux_sel+0xe>
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	09 f0       	breq	.+2      	; 0x11fa <set_mux_sel+0xc>
    11f8:	4e c0       	rjmp	.+156    	; 0x1296 <set_mux_sel+0xa8>
    11fa:	34 c0       	rjmp	.+104    	; 0x1264 <set_mux_sel+0x76>
  {
    case MUX0:
      READ( mux_sel, 4 ) ? SET( PORTA, 7 ) : CLR( PORTA, 7 );
    11fc:	64 ff       	sbrs	r22, 4
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <set_mux_sel+0x16>
    1200:	df 9a       	sbi	0x1b, 7	; 27
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <set_mux_sel+0x18>
    1204:	df 98       	cbi	0x1b, 7	; 27
      READ( mux_sel, 3 ) ? SET( PORTA, 6 ) : CLR( PORTA, 6 );
    1206:	63 ff       	sbrs	r22, 3
    1208:	02 c0       	rjmp	.+4      	; 0x120e <set_mux_sel+0x20>
    120a:	de 9a       	sbi	0x1b, 6	; 27
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <set_mux_sel+0x22>
    120e:	de 98       	cbi	0x1b, 6	; 27
      READ( mux_sel, 2 ) ? SET( PORTA, 5 ) : CLR( PORTA, 5 );
    1210:	62 ff       	sbrs	r22, 2
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <set_mux_sel+0x2a>
    1214:	dd 9a       	sbi	0x1b, 5	; 27
    1216:	01 c0       	rjmp	.+2      	; 0x121a <set_mux_sel+0x2c>
    1218:	dd 98       	cbi	0x1b, 5	; 27
      READ( mux_sel, 1 ) ? SET( PORTA, 4 ) : CLR( PORTA, 4 );
    121a:	61 ff       	sbrs	r22, 1
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <set_mux_sel+0x34>
    121e:	dc 9a       	sbi	0x1b, 4	; 27
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <set_mux_sel+0x36>
    1222:	dc 98       	cbi	0x1b, 4	; 27
      READ( mux_sel, 0 ) ? SET( PORTA, 3 ) : CLR( PORTA, 3 );
    1224:	60 ff       	sbrs	r22, 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <set_mux_sel+0x3e>
    1228:	db 9a       	sbi	0x1b, 3	; 27
    122a:	08 95       	ret
    122c:	db 98       	cbi	0x1b, 3	; 27
    122e:	08 95       	ret

      break;

    case MUX1:
      READ( mux_sel, 4 ) ? SET( PORTB, 0 ) : CLR( PORTB, 0 );
    1230:	64 ff       	sbrs	r22, 4
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <set_mux_sel+0x4a>
    1234:	c0 9a       	sbi	0x18, 0	; 24
    1236:	01 c0       	rjmp	.+2      	; 0x123a <set_mux_sel+0x4c>
    1238:	c0 98       	cbi	0x18, 0	; 24
      READ( mux_sel, 3 ) ? SET( PORTB, 1 ) : CLR( PORTB, 1 );
    123a:	63 ff       	sbrs	r22, 3
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <set_mux_sel+0x54>
    123e:	c1 9a       	sbi	0x18, 1	; 24
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <set_mux_sel+0x56>
    1242:	c1 98       	cbi	0x18, 1	; 24
      READ( mux_sel, 2 ) ? SET( PORTB, 2 ) : CLR( PORTB, 2 );
    1244:	62 ff       	sbrs	r22, 2
    1246:	02 c0       	rjmp	.+4      	; 0x124c <set_mux_sel+0x5e>
    1248:	c2 9a       	sbi	0x18, 2	; 24
    124a:	01 c0       	rjmp	.+2      	; 0x124e <set_mux_sel+0x60>
    124c:	c2 98       	cbi	0x18, 2	; 24
      READ( mux_sel, 1 ) ? SET( PORTB, 3 ) : CLR( PORTB, 3 );
    124e:	61 ff       	sbrs	r22, 1
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <set_mux_sel+0x68>
    1252:	c3 9a       	sbi	0x18, 3	; 24
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <set_mux_sel+0x6a>
    1256:	c3 98       	cbi	0x18, 3	; 24
      READ( mux_sel, 0 ) ? SET( PORTB, 4 ) : CLR( PORTB, 4 );
    1258:	60 ff       	sbrs	r22, 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <set_mux_sel+0x72>
    125c:	c4 9a       	sbi	0x18, 4	; 24
    125e:	08 95       	ret
    1260:	c4 98       	cbi	0x18, 4	; 24
    1262:	08 95       	ret

      break;

    case MUX2:
      READ( mux_sel, 4 ) ? SET( PORTE, 3 ) : CLR( PORTE, 3 );
    1264:	64 ff       	sbrs	r22, 4
    1266:	02 c0       	rjmp	.+4      	; 0x126c <set_mux_sel+0x7e>
    1268:	1b 9a       	sbi	0x03, 3	; 3
    126a:	01 c0       	rjmp	.+2      	; 0x126e <set_mux_sel+0x80>
    126c:	1b 98       	cbi	0x03, 3	; 3
      READ( mux_sel, 3 ) ? SET( PORTE, 4 ) : CLR( PORTE, 4 );
    126e:	63 ff       	sbrs	r22, 3
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <set_mux_sel+0x88>
    1272:	1c 9a       	sbi	0x03, 4	; 3
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <set_mux_sel+0x8a>
    1276:	1c 98       	cbi	0x03, 4	; 3
      READ( mux_sel, 2 ) ? SET( PORTE, 5 ) : CLR( PORTE, 5 );
    1278:	62 ff       	sbrs	r22, 2
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <set_mux_sel+0x92>
    127c:	1d 9a       	sbi	0x03, 5	; 3
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <set_mux_sel+0x94>
    1280:	1d 98       	cbi	0x03, 5	; 3
      READ( mux_sel, 1 ) ? SET( PORTE, 6 ) : CLR( PORTE, 6 );
    1282:	61 ff       	sbrs	r22, 1
    1284:	02 c0       	rjmp	.+4      	; 0x128a <set_mux_sel+0x9c>
    1286:	1e 9a       	sbi	0x03, 6	; 3
    1288:	01 c0       	rjmp	.+2      	; 0x128c <set_mux_sel+0x9e>
    128a:	1e 98       	cbi	0x03, 6	; 3
      READ( mux_sel, 0 ) ? SET( PORTE, 7 ) : CLR( PORTE, 7 );
    128c:	60 ff       	sbrs	r22, 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <set_mux_sel+0xa6>
    1290:	1f 9a       	sbi	0x03, 7	; 3
    1292:	08 95       	ret
    1294:	1f 98       	cbi	0x03, 7	; 3
    1296:	08 95       	ret

00001298 <torquer_off>:
  }
}

void torquer_off( uint8_t torquer_num )
{
  switch( torquer_num )
    1298:	82 31       	cpi	r24, 0x12	; 18
    129a:	31 f0       	breq	.+12     	; 0x12a8 <torquer_off+0x10>
    129c:	83 31       	cpi	r24, 0x13	; 19
    129e:	59 f0       	breq	.+22     	; 0x12b6 <torquer_off+0x1e>
    12a0:	81 31       	cpi	r24, 0x11	; 17
    12a2:	99 f4       	brne	.+38     	; 0x12ca <torquer_off+0x32>
    12a4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <torquer_off.part.0>
      CLR( PORTC, 0 );
	  CLR( PORTG, 1 );
      break;

    case TORQUER_2:
      CLR( PORTG, 0 );
    12a8:	80 91 65 00 	lds	r24, 0x0065
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	80 93 65 00 	sts	0x0065, r24
	  CLR( PORTD, 0 );
    12b2:	90 98       	cbi	0x12, 0	; 18
      break;
    12b4:	08 95       	ret

    case TORQUER_3:
      CLR( PORTG, 3 );
    12b6:	80 91 65 00 	lds	r24, 0x0065
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	80 93 65 00 	sts	0x0065, r24
	  CLR( PORTG, 4 );
    12c0:	80 91 65 00 	lds	r24, 0x0065
    12c4:	8f 7e       	andi	r24, 0xEF	; 239
    12c6:	80 93 65 00 	sts	0x0065, r24
    12ca:	08 95       	ret

000012cc <torquer_on>:
  }  
}

void torquer_on( uint8_t torquer_num )
{
  switch( torquer_num )
    12cc:	82 31       	cpi	r24, 0x12	; 18
    12ce:	49 f0       	breq	.+18     	; 0x12e2 <torquer_on+0x16>
    12d0:	83 31       	cpi	r24, 0x13	; 19
    12d2:	71 f0       	breq	.+28     	; 0x12f0 <torquer_on+0x24>
    12d4:	81 31       	cpi	r24, 0x11	; 17
    12d6:	b1 f4       	brne	.+44     	; 0x1304 <torquer_on+0x38>
  {
    case TORQUER_1:
      SET( PORTC, 0 );
    12d8:	a8 9a       	sbi	0x15, 0	; 21
	  SET( PORTG, 1 );
    12da:	80 91 65 00 	lds	r24, 0x0065
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <torquer_on+0x34>
      break;

    case TORQUER_2:
      SET( PORTG, 0 );
    12e2:	80 91 65 00 	lds	r24, 0x0065
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	80 93 65 00 	sts	0x0065, r24
	  SET( PORTD, 0 );
    12ec:	90 9a       	sbi	0x12, 0	; 18
      break;
    12ee:	08 95       	ret

    case TORQUER_3:
      SET( PORTG, 3 );
    12f0:	80 91 65 00 	lds	r24, 0x0065
    12f4:	88 60       	ori	r24, 0x08	; 8
    12f6:	80 93 65 00 	sts	0x0065, r24
	  SET( PORTG, 4 );
    12fa:	80 91 65 00 	lds	r24, 0x0065
    12fe:	80 61       	ori	r24, 0x10	; 16
    1300:	80 93 65 00 	sts	0x0065, r24
    1304:	08 95       	ret

00001306 <switch_on>:
  }
}

void switch_on( uint8_t switch_num )
{
  switch ( switch_num )
    1306:	88 30       	cpi	r24, 0x08	; 8
    1308:	59 f1       	breq	.+86     	; 0x1360 <switch_on+0x5a>
    130a:	68 f4       	brcc	.+26     	; 0x1326 <switch_on+0x20>
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	01 f1       	breq	.+64     	; 0x1350 <switch_on+0x4a>
    1310:	30 f4       	brcc	.+12     	; 0x131e <switch_on+0x18>
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	c9 f0       	breq	.+50     	; 0x1348 <switch_on+0x42>
    1316:	d0 f4       	brcc	.+52     	; 0x134c <switch_on+0x46>
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	b9 f5       	brne	.+110    	; 0x138a <switch_on+0x84>
    131c:	13 c0       	rjmp	.+38     	; 0x1344 <switch_on+0x3e>
    131e:	86 30       	cpi	r24, 0x06	; 6
    1320:	d9 f0       	breq	.+54     	; 0x1358 <switch_on+0x52>
    1322:	e0 f4       	brcc	.+56     	; 0x135c <switch_on+0x56>
    1324:	17 c0       	rjmp	.+46     	; 0x1354 <switch_on+0x4e>
    1326:	8c 30       	cpi	r24, 0x0C	; 12
    1328:	39 f1       	breq	.+78     	; 0x1378 <switch_on+0x72>
    132a:	20 f4       	brcc	.+8      	; 0x1334 <switch_on+0x2e>
    132c:	8a 30       	cpi	r24, 0x0A	; 10
    132e:	01 f1       	breq	.+64     	; 0x1370 <switch_on+0x6a>
    1330:	08 f5       	brcc	.+66     	; 0x1374 <switch_on+0x6e>
    1332:	18 c0       	rjmp	.+48     	; 0x1364 <switch_on+0x5e>
    1334:	8e 30       	cpi	r24, 0x0E	; 14
    1336:	21 f1       	breq	.+72     	; 0x1380 <switch_on+0x7a>
    1338:	08 f1       	brcs	.+66     	; 0x137c <switch_on+0x76>
    133a:	8f 30       	cpi	r24, 0x0F	; 15
    133c:	19 f1       	breq	.+70     	; 0x1384 <switch_on+0x7e>
    133e:	80 31       	cpi	r24, 0x10	; 16
    1340:	21 f5       	brne	.+72     	; 0x138a <switch_on+0x84>
    1342:	22 c0       	rjmp	.+68     	; 0x1388 <switch_on+0x82>
  {
    case 1:
      SET( PORTA, 0 );
    1344:	d8 9a       	sbi	0x1b, 0	; 27
      break;
    1346:	08 95       	ret

    case 2:
      SET( PORTA, 1 );
    1348:	d9 9a       	sbi	0x1b, 1	; 27
      break;
    134a:	08 95       	ret

    case 3:
      SET( PORTA, 2 );
    134c:	da 9a       	sbi	0x1b, 2	; 27
      break;
    134e:	08 95       	ret

    case 4:
      SET( PORTB, 5 );
    1350:	c5 9a       	sbi	0x18, 5	; 24
      break;
    1352:	08 95       	ret

    case 5:
      SET( PORTB, 6 );
    1354:	c6 9a       	sbi	0x18, 6	; 24
      break;
    1356:	08 95       	ret

    case 6:
      SET( PORTB, 7 );
    1358:	c7 9a       	sbi	0x18, 7	; 24
      break;
    135a:	08 95       	ret

    case 7:
      SET( PORTD, 4 );
    135c:	94 9a       	sbi	0x12, 4	; 18
      break;
    135e:	08 95       	ret

    case 8:
      SET( PORTD, 5 );
    1360:	95 9a       	sbi	0x12, 5	; 18
      break;
    1362:	08 95       	ret

    case 9:
      SET( PORTG, 2 );
    1364:	80 91 65 00 	lds	r24, 0x0065
    1368:	84 60       	ori	r24, 0x04	; 4
    136a:	80 93 65 00 	sts	0x0065, r24
      break;
    136e:	08 95       	ret

    case 10: 
      SET( PORTC, 7 );
    1370:	af 9a       	sbi	0x15, 7	; 21
      break;
    1372:	08 95       	ret

    case 11:
      SET( PORTC, 6 );
    1374:	ae 9a       	sbi	0x15, 6	; 21
      break;
    1376:	08 95       	ret

    case 12:
      SET( PORTC, 5 );
    1378:	ad 9a       	sbi	0x15, 5	; 21
      break;
    137a:	08 95       	ret

    case 13:
      SET( PORTC, 4 );
    137c:	ac 9a       	sbi	0x15, 4	; 21
      break;
    137e:	08 95       	ret

    case 14:
      SET( PORTC, 3 );
    1380:	ab 9a       	sbi	0x15, 3	; 21
      break;
    1382:	08 95       	ret

    case 15:
      SET( PORTC, 2 );
    1384:	aa 9a       	sbi	0x15, 2	; 21
      break;
    1386:	08 95       	ret

    case 16:
      SET( PORTC, 1 );
    1388:	a9 9a       	sbi	0x15, 1	; 21
    138a:	08 95       	ret

0000138c <switch_off>:
  }
}

void switch_off( uint8_t switch_num )
{
  switch ( switch_num )
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	59 f1       	breq	.+86     	; 0x13e6 <switch_off+0x5a>
    1390:	68 f4       	brcc	.+26     	; 0x13ac <switch_off+0x20>
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	01 f1       	breq	.+64     	; 0x13d6 <switch_off+0x4a>
    1396:	30 f4       	brcc	.+12     	; 0x13a4 <switch_off+0x18>
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	c9 f0       	breq	.+50     	; 0x13ce <switch_off+0x42>
    139c:	d0 f4       	brcc	.+52     	; 0x13d2 <switch_off+0x46>
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	b9 f5       	brne	.+110    	; 0x1410 <switch_off+0x84>
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <switch_off+0x3e>
    13a4:	86 30       	cpi	r24, 0x06	; 6
    13a6:	d9 f0       	breq	.+54     	; 0x13de <switch_off+0x52>
    13a8:	e0 f4       	brcc	.+56     	; 0x13e2 <switch_off+0x56>
    13aa:	17 c0       	rjmp	.+46     	; 0x13da <switch_off+0x4e>
    13ac:	8c 30       	cpi	r24, 0x0C	; 12
    13ae:	39 f1       	breq	.+78     	; 0x13fe <switch_off+0x72>
    13b0:	20 f4       	brcc	.+8      	; 0x13ba <switch_off+0x2e>
    13b2:	8a 30       	cpi	r24, 0x0A	; 10
    13b4:	01 f1       	breq	.+64     	; 0x13f6 <switch_off+0x6a>
    13b6:	08 f5       	brcc	.+66     	; 0x13fa <switch_off+0x6e>
    13b8:	18 c0       	rjmp	.+48     	; 0x13ea <switch_off+0x5e>
    13ba:	8e 30       	cpi	r24, 0x0E	; 14
    13bc:	21 f1       	breq	.+72     	; 0x1406 <switch_off+0x7a>
    13be:	08 f1       	brcs	.+66     	; 0x1402 <switch_off+0x76>
    13c0:	8f 30       	cpi	r24, 0x0F	; 15
    13c2:	19 f1       	breq	.+70     	; 0x140a <switch_off+0x7e>
    13c4:	80 31       	cpi	r24, 0x10	; 16
    13c6:	21 f5       	brne	.+72     	; 0x1410 <switch_off+0x84>
    13c8:	22 c0       	rjmp	.+68     	; 0x140e <switch_off+0x82>
  {
    case 1:
      CLR( PORTA, 0 );
    13ca:	d8 98       	cbi	0x1b, 0	; 27
      break;
    13cc:	08 95       	ret

    case 2:
      CLR( PORTA, 1 );
    13ce:	d9 98       	cbi	0x1b, 1	; 27
      break;
    13d0:	08 95       	ret

    case 3:
      CLR( PORTA, 2 );
    13d2:	da 98       	cbi	0x1b, 2	; 27
      break;
    13d4:	08 95       	ret

    case 4:
      CLR( PORTB, 5 );
    13d6:	c5 98       	cbi	0x18, 5	; 24
      break;
    13d8:	08 95       	ret

    case 5:
      CLR( PORTB, 6 );
    13da:	c6 98       	cbi	0x18, 6	; 24
      break;
    13dc:	08 95       	ret

    case 6:
      CLR( PORTB, 7 );
    13de:	c7 98       	cbi	0x18, 7	; 24
      break;
    13e0:	08 95       	ret

    case 7:
      CLR( PORTD, 4 );
    13e2:	94 98       	cbi	0x12, 4	; 18
      break;
    13e4:	08 95       	ret

    case 8:
      CLR( PORTD, 5 );
    13e6:	95 98       	cbi	0x12, 5	; 18
      break;
    13e8:	08 95       	ret

    case 9:
      CLR( PORTG, 2 );
    13ea:	80 91 65 00 	lds	r24, 0x0065
    13ee:	8b 7f       	andi	r24, 0xFB	; 251
    13f0:	80 93 65 00 	sts	0x0065, r24
      break;
    13f4:	08 95       	ret

    case 10: 
      CLR( PORTC, 7 );
    13f6:	af 98       	cbi	0x15, 7	; 21
      break;
    13f8:	08 95       	ret

    case 11:
      CLR( PORTC, 6 );
    13fa:	ae 98       	cbi	0x15, 6	; 21
      break;
    13fc:	08 95       	ret

    case 12:
      CLR( PORTC, 5 );
    13fe:	ad 98       	cbi	0x15, 5	; 21
      break;
    1400:	08 95       	ret

    case 13:
      CLR( PORTC, 4 );
    1402:	ac 98       	cbi	0x15, 4	; 21
      break;
    1404:	08 95       	ret

    case 14:
      CLR( PORTC, 3 );
    1406:	ab 98       	cbi	0x15, 3	; 21
      break;
    1408:	08 95       	ret

    case 15:
      CLR( PORTC, 2 );
    140a:	aa 98       	cbi	0x15, 2	; 21
      break;
    140c:	08 95       	ret

    case 16:
      CLR( PORTC, 1 );
    140e:	a9 98       	cbi	0x15, 1	; 21
    1410:	08 95       	ret

00001412 <average_samples>:
    return  average_samples( component->I_samples );
  }
}

uint8_t average_samples( uint8_t samples[NUM_SAMPLES] )
{
    1412:	fc 01       	movw	r30, r24
  uint8_t average = 0;
  uint16_t sum = 0;

  for(uint8_t avg_index = 0; avg_index < NUM_SAMPLES; avg_index++)
    sum += samples[avg_index];
    1414:	21 81       	ldd	r18, Z+1	; 0x01
    1416:	80 81       	ld	r24, Z
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	82 0f       	add	r24, r18
    141c:	91 1d       	adc	r25, r1
    141e:	22 81       	ldd	r18, Z+2	; 0x02
    1420:	82 0f       	add	r24, r18
    1422:	91 1d       	adc	r25, r1

  average = sum / NUM_SAMPLES;
    1424:	63 e0       	ldi	r22, 0x03	; 3
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodhi4>
    142c:	86 2f       	mov	r24, r22

  return average;
}
    142e:	08 95       	ret

00001430 <SVIT_check_I_critical>:
}

uint8_t SVIT_check_I_critical( uint8_t name )
{
  uint8_t temp;
  SVIT_t* component= &svit[name];
    1430:	94 e2       	ldi	r25, 0x24	; 36
    1432:	89 9f       	mul	r24, r25
    1434:	f0 01       	movw	r30, r0
    1436:	11 24       	eor	r1, r1
    1438:	e4 5c       	subi	r30, 0xC4	; 196
    143a:	fc 4f       	sbci	r31, 0xFC	; 252
  if ( component->I_critical_value != 0 )
    143c:	85 89       	ldd	r24, Z+21	; 0x15
    143e:	88 23       	and	r24, r24
    1440:	11 f0       	breq	.+4      	; 0x1446 <SVIT_check_I_critical+0x16>
  {
    temp= component->I_critical_value;
    component->I_critical_value = 0;
    1442:	15 8a       	std	Z+21, r1	; 0x15
    1444:	08 95       	ret
    return temp;
  }
  else
  {
    return  average_samples( component->I_samples );
    1446:	cf 01       	movw	r24, r30
    1448:	41 96       	adiw	r24, 0x11	; 17
    144a:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <average_samples>

0000144e <SVIT_check_V_critical>:
}

uint8_t SVIT_check_V_critical( uint8_t name )
{
  uint8_t temp;
  SVIT_t* component= &svit[name];
    144e:	94 e2       	ldi	r25, 0x24	; 36
    1450:	89 9f       	mul	r24, r25
    1452:	f0 01       	movw	r30, r0
    1454:	11 24       	eor	r1, r1
    1456:	e4 5c       	subi	r30, 0xC4	; 196
    1458:	fc 4f       	sbci	r31, 0xFC	; 252
  if ( component->V_critical_value != 0 )
    145a:	84 85       	ldd	r24, Z+12	; 0x0c
    145c:	88 23       	and	r24, r24
    145e:	11 f0       	breq	.+4      	; 0x1464 <SVIT_check_V_critical+0x16>
  {
    temp= component->V_critical_value;
    component->V_critical_value = 0;
    1460:	14 86       	std	Z+12, r1	; 0x0c
    1462:	08 95       	ret
    return temp;
  }
  else
  {
    return  average_samples( component->V_samples );
    1464:	cf 01       	movw	r24, r30
    1466:	08 96       	adiw	r24, 0x08	; 8
    1468:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <average_samples>

0000146c <perform_ADC>:
}

void perform_ADC( uint8_t mux_num )
{
  // set Vref to AVCC and set the ADC channel to the correct pin ( mux_num )
  ADMUX = (1 << ADLAR) | ( 1 << REFS0 );
    146c:	90 e6       	ldi	r25, 0x60	; 96
    146e:	97 b9       	out	0x07, r25	; 7
  ADMUX &= ~0x3;
    1470:	97 b1       	in	r25, 0x07	; 7
    1472:	9c 7f       	andi	r25, 0xFC	; 252
    1474:	97 b9       	out	0x07, r25	; 7
  ADMUX |= mux_num;
    1476:	97 b1       	in	r25, 0x07	; 7
    1478:	98 2b       	or	r25, r24
    147a:	97 b9       	out	0x07, r25	; 7

  // signal ADC to start a new conversion
  ADCSRA |= ( 1 << ADSC );
    147c:	36 9a       	sbi	0x06, 6	; 6
    147e:	08 95       	ret

00001480 <read_VIT>:

  // when the conversion finishes, the result is stored in ADCL and ADCH
}

void read_VIT( void )
{
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
  SVIT_t* component;
  uint8_t sample_index;
  uint8_t c_samp_idx;
  //analyze completed ADC conversion 
  
  switch ( adc_sensor_type ){
    1486:	80 91 79 0a 	lds	r24, 0x0A79
    //-------------------------------------------------------------------
    // Measure current
    //-------------------------------------------------------------------
	  case ADC_CURRENT:
     
	    component = &svit[adc_component];
    148a:	c0 91 37 03 	lds	r28, 0x0337
  SVIT_t* component;
  uint8_t sample_index;
  uint8_t c_samp_idx;
  //analyze completed ADC conversion 
  
  switch ( adc_sensor_type ){
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	09 f4       	brne	.+2      	; 0x1494 <read_VIT+0x14>
    1492:	6c c0       	rjmp	.+216    	; 0x156c <read_VIT+0xec>
    1494:	20 f4       	brcc	.+8      	; 0x149e <read_VIT+0x1e>
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	09 f0       	breq	.+2      	; 0x149c <read_VIT+0x1c>
    149a:	18 c1       	rjmp	.+560    	; 0x16cc <read_VIT+0x24c>
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <read_VIT+0x2c>
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <read_VIT+0x24>
    14a2:	d8 c0       	rjmp	.+432    	; 0x1654 <read_VIT+0x1d4>
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	09 f0       	breq	.+2      	; 0x14aa <read_VIT+0x2a>
    14a8:	11 c1       	rjmp	.+546    	; 0x16cc <read_VIT+0x24c>
    14aa:	fc c0       	rjmp	.+504    	; 0x16a4 <read_VIT+0x224>
		case ADC_VOLTAGE:
			component = &svit[adc_component];
    14ac:	84 e2       	ldi	r24, 0x24	; 36
    14ae:	c8 9f       	mul	r28, r24
    14b0:	e0 01       	movw	r28, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	c4 5c       	subi	r28, 0xC4	; 196
    14b6:	dc 4f       	sbci	r29, 0xFC	; 252
			sample_index = component->V_sample_index;
			component->V_sample_index = ( sample_index + 1 ) % NUM_SAMPLES;
    14b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	c9 01       	movw	r24, r18
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	63 e0       	ldi	r22, 0x03	; 3
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__divmodhi4>
    14c8:	8b 87       	std	Y+11, r24	; 0x0b

			// SoC: If component is a battery, store in different global variable
			if (component->name == BATTERY_1) {
    14ca:	98 81       	ld	r25, Y
    14cc:	94 31       	cpi	r25, 0x14	; 20
    14ce:	99 f4       	brne	.+38     	; 0x14f6 <read_VIT+0x76>
				batt1_voltage = ADC_high;
    14d0:	80 91 86 0a 	lds	r24, 0x0A86
    14d4:	80 93 90 0a 	sts	0x0A90, r24
    14d8:	10 92 91 0a 	sts	0x0A91, r1
				batt1_voltageLow = ADC_low;
    14dc:	80 91 c0 0e 	lds	r24, 0x0EC0
    14e0:	80 93 a1 0e 	sts	0x0EA1, r24
				high = ADC_high;
    14e4:	80 91 86 0a 	lds	r24, 0x0A86
    14e8:	80 93 85 0a 	sts	0x0A85, r24
				low = ADC_low;
    14ec:	80 91 c0 0e 	lds	r24, 0x0EC0
    14f0:	80 93 8f 0a 	sts	0x0A8F, r24
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <read_VIT+0x82>
				//batt1_voltage = (ADC_high << 8) + ADC_low;
				//debug = adc_component;
			}
			else if (component->name == BATTERY_2) {
    14f6:	95 31       	cpi	r25, 0x15	; 21
    14f8:	21 f4       	brne	.+8      	; 0x1502 <read_VIT+0x82>
				batt2_voltage = ADC_high;
    14fa:	80 91 86 0a 	lds	r24, 0x0A86
    14fe:	80 93 9e 0c 	sts	0x0C9E, r24
			}
			component->V_samples[sample_index] = ADC_high;
    1502:	80 91 86 0a 	lds	r24, 0x0A86
    1506:	fe 01       	movw	r30, r28
    1508:	e2 0f       	add	r30, r18
    150a:	f3 1f       	adc	r31, r19
    150c:	80 87       	std	Z+8, r24	; 0x08
            
			//OverVoltage
	  		if ( ( ADC_high > component->V_upper_limit ) && ( component->force_on != 1 ) ){
    150e:	20 91 86 0a 	lds	r18, 0x0A86
    1512:	8e 81       	ldd	r24, Y+6	; 0x06
    1514:	82 17       	cp	r24, r18
    1516:	20 f4       	brcc	.+8      	; 0x1520 <read_VIT+0xa0>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	09 f0       	breq	.+2      	; 0x1520 <read_VIT+0xa0>
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <read_VIT+0xb0>
  				}
				component->switch_state = SW_OFF;
				component->V_critical_value = ADC_high;
			}
			//UnderVoltage
			else if((ADC_high < component->V_lower_limit) && component->switch_state){
    1520:	20 91 86 0a 	lds	r18, 0x0A86
    1524:	8f 81       	ldd	r24, Y+7	; 0x07
    1526:	28 17       	cp	r18, r24
    1528:	d8 f4       	brcc	.+54     	; 0x1560 <read_VIT+0xe0>
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 23       	and	r24, r24
    152e:	c1 f0       	breq	.+48     	; 0x1560 <read_VIT+0xe0>
				if ( component->switch_num != SW_NULL ){
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	8f 3f       	cpi	r24, 0xFF	; 255
    1534:	19 f0       	breq	.+6      	; 0x153c <read_VIT+0xbc>
					switch_off( component->switch_num );
    1536:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
    153a:	0e c0       	rjmp	.+28     	; 0x1558 <read_VIT+0xd8>
				}else {
					switch ( component->name ){
    153c:	92 31       	cpi	r25, 0x12	; 18
    153e:	39 f0       	breq	.+14     	; 0x154e <read_VIT+0xce>
    1540:	93 31       	cpi	r25, 0x13	; 19
    1542:	39 f0       	breq	.+14     	; 0x1552 <read_VIT+0xd2>
    1544:	91 31       	cpi	r25, 0x11	; 17
    1546:	41 f4       	brne	.+16     	; 0x1558 <read_VIT+0xd8>
    1548:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <torquer_off.part.0>
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <read_VIT+0xd8>
						case TORQUER_1:
							torquer_off( TORQUER_1 );
							break;
						case TORQUER_2:
							torquer_off( TORQUER_2 );
    154e:	82 e1       	ldi	r24, 0x12	; 18
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <read_VIT+0xd4>
							break;
						case TORQUER_3:
							torquer_off( TORQUER_3 );
    1552:	83 e1       	ldi	r24, 0x13	; 19
    1554:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
							break;
						default:
							break;
					}
				}
				component->switch_state = SW_OFF;
    1558:	1a 82       	std	Y+2, r1	; 0x02
				component->V_critical_value = ADC_high;
    155a:	80 91 86 0a 	lds	r24, 0x0A86
    155e:	8c 87       	std	Y+12, r24	; 0x0c
			}
			adc_sensor_type = ADC_CURRENT;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	80 93 79 0a 	sts	0x0A79, r24

		    //perform next ADC conversion
		    mux_num = component->I_mux_num;
    1566:	1d 85       	ldd	r17, Y+13	; 0x0d
		    mux_sel = component->I_mux_sel;
		    set_mux_sel( mux_num, mux_sel );
    1568:	6e 85       	ldd	r22, Y+14	; 0x0e
    156a:	a7 c0       	rjmp	.+334    	; 0x16ba <read_VIT+0x23a>
    //-------------------------------------------------------------------
    // Measure current
    //-------------------------------------------------------------------
	  case ADC_CURRENT:
     
	    component = &svit[adc_component];
    156c:	94 e2       	ldi	r25, 0x24	; 36
    156e:	c9 9f       	mul	r28, r25
    1570:	e0 01       	movw	r28, r0
    1572:	11 24       	eor	r1, r1
    1574:	c4 5c       	subi	r28, 0xC4	; 196
    1576:	dc 4f       	sbci	r29, 0xFC	; 252
	  	sample_index = component->I_sample_index;
	  	component->I_sample_index = ( sample_index + 1 ) % NUM_SAMPLES;
    1578:	2c 89       	ldd	r18, Y+20	; 0x14
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	c9 01       	movw	r24, r18
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	63 e0       	ldi	r22, 0x03	; 3
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__divmodhi4>
    1588:	8c 8b       	std	Y+20, r24	; 0x14
		// SoC hardcode backward current
//		if (adc_component == BATTERY_1_b) {
			//debug = 5;
		//}
		
		if(component->name == SOLAR_1){
    158a:	48 81       	ld	r20, Y
    158c:	47 31       	cpi	r20, 0x17	; 23
    158e:	39 f4       	brne	.+14     	; 0x159e <read_VIT+0x11e>
			solar1_current = ADC_high;
    1590:	80 91 86 0a 	lds	r24, 0x0A86
    1594:	80 93 92 0a 	sts	0x0A92, r24
			hasCheckedCurr = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 7e 0a 	sts	0x0A7E, r24
		}

	  	component->I_samples[sample_index] = ADC_high;
    159e:	80 91 86 0a 	lds	r24, 0x0A86
    15a2:	fe 01       	movw	r30, r28
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	81 8b       	std	Z+17, r24	; 0x11
		
			if(component->name == BATTERY_1){
    15aa:	44 31       	cpi	r20, 0x14	; 20
    15ac:	99 f4       	brne	.+38     	; 0x15d4 <read_VIT+0x154>
				c_samp_idx = component->Coul_sample_index;
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
				if(c_samp_idx == CURRENT_SAMPLES-1){
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	19 f4       	brne	.+6      	; 0x15ba <read_VIT+0x13a>
					coul_en = 1;
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	90 93 6a 08 	sts	0x086A, r25
				}

				component->Coul_samples[c_samp_idx] = ADC_high;
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	20 91 86 0a 	lds	r18, 0x0A86
    15c0:	fe 01       	movw	r30, r28
    15c2:	e8 0f       	add	r30, r24
    15c4:	f9 1f       	adc	r31, r25
    15c6:	24 8f       	std	Z+28, r18	; 0x1c
				component->Coul_sample_index = (c_samp_idx + 1) % CURRENT_SAMPLES;
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	65 e0       	ldi	r22, 0x05	; 5
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__divmodhi4>
    15d2:	89 a3       	std	Y+33, r24	; 0x21
			}	
		
	    if ( ( ADC_high > component->I_upper_limit ) && ( component->force_on != 1 ) )
    15d4:	90 91 86 0a 	lds	r25, 0x0A86
    15d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15da:	89 17       	cp	r24, r25
    15dc:	d8 f4       	brcc	.+54     	; 0x1614 <read_VIT+0x194>
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	c1 f0       	breq	.+48     	; 0x1614 <read_VIT+0x194>
	  	{
	  		if ( component->switch_num != SW_NULL )
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	8f 3f       	cpi	r24, 0xFF	; 255
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <read_VIT+0x170>
	  		{
	  		  switch_off( component->switch_num );
    15ea:	0e 94 c6 09 	call	0x138c	; 0x138c <switch_off>
    15ee:	0e c0       	rjmp	.+28     	; 0x160c <read_VIT+0x18c>
	  		}
	  		else
	  		{
	  		  switch ( component->name )
    15f0:	42 31       	cpi	r20, 0x12	; 18
    15f2:	39 f0       	breq	.+14     	; 0x1602 <read_VIT+0x182>
    15f4:	43 31       	cpi	r20, 0x13	; 19
    15f6:	39 f0       	breq	.+14     	; 0x1606 <read_VIT+0x186>
    15f8:	41 31       	cpi	r20, 0x11	; 17
    15fa:	41 f4       	brne	.+16     	; 0x160c <read_VIT+0x18c>
    15fc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <torquer_off.part.0>
    1600:	05 c0       	rjmp	.+10     	; 0x160c <read_VIT+0x18c>
		  	  {
  		  		case TORQUER_1:
	  	  		  torquer_off( TORQUER_1 );
		    		  break;
			    	case TORQUER_2:
			  	    torquer_off( TORQUER_2 );
    1602:	82 e1       	ldi	r24, 0x12	; 18
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <read_VIT+0x188>
			  	    break;
  		  		case TORQUER_3:
	  	  		  torquer_off( TORQUER_3 );
    1606:	83 e1       	ldi	r24, 0x13	; 19
    1608:	0e 94 4c 09 	call	0x1298	; 0x1298 <torquer_off>
		    		  break;
			     	default:
				      break;
			    }
			  }
			  component->switch_state = 0;
    160c:	1a 82       	std	Y+2, r1	; 0x02
        component->I_critical_value = ADC_high;
    160e:	80 91 86 0a 	lds	r24, 0x0A86
    1612:	8d 8b       	std	Y+21, r24	; 0x15
		  }
      //perform next ADC conversion
      mux_num = component->T_mux_num;
    1614:	1e 89       	ldd	r17, Y+22	; 0x16
      if( mux_num != MUX_NULL )
    1616:	13 30       	cpi	r17, 0x03	; 3
    1618:	29 f0       	breq	.+10     	; 0x1624 <read_VIT+0x1a4>
      {
		    adc_sensor_type = ADC_TEMPERATURE;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	80 93 79 0a 	sts	0x0A79, r24
        mux_sel = component->T_mux_sel;        
    1620:	6f 89       	ldd	r22, Y+23	; 0x17
    1622:	4b c0       	rjmp	.+150    	; 0x16ba <read_VIT+0x23a>
		  }
      else
      {
        adc_sensor_type = ADC_VOLTAGE;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 93 79 0a 	sts	0x0A79, r24
		    adc_component = ( adc_component + 1 ) % SVIT_SZ;
    162a:	80 91 37 03 	lds	r24, 0x0337
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	64 e2       	ldi	r22, 0x24	; 36
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__divmodhi4>
    163a:	80 93 37 03 	sts	0x0337, r24
        component = &svit[adc_component];
    163e:	24 e2       	ldi	r18, 0x24	; 36
    1640:	28 9f       	mul	r18, r24
    1642:	f0 01       	movw	r30, r0
    1644:	29 9f       	mul	r18, r25
    1646:	f0 0d       	add	r31, r0
    1648:	11 24       	eor	r1, r1
    164a:	e4 5c       	subi	r30, 0xC4	; 196
    164c:	fc 4f       	sbci	r31, 0xFC	; 252
        mux_num = component->V_mux_num;
    164e:	14 81       	ldd	r17, Z+4	; 0x04
        mux_sel = component->V_mux_sel;
    1650:	65 81       	ldd	r22, Z+5	; 0x05
    1652:	33 c0       	rjmp	.+102    	; 0x16ba <read_VIT+0x23a>
      break;
    //-------------------------------------------------------------------
    // Measure temperature
    //-------------------------------------------------------------------
	  case ADC_TEMPERATURE:
		  component = &svit[adc_component];
    1654:	d0 e0       	ldi	r29, 0x00	; 0
    1656:	44 e2       	ldi	r20, 0x24	; 36
    1658:	4c 9f       	mul	r20, r28
    165a:	f0 01       	movw	r30, r0
    165c:	4d 9f       	mul	r20, r29
    165e:	f0 0d       	add	r31, r0
    1660:	11 24       	eor	r1, r1
    1662:	e4 5c       	subi	r30, 0xC4	; 196
    1664:	fc 4f       	sbci	r31, 0xFC	; 252
		  sample_index = component->T_sample_index;
		  component->T_sample_index = ( sample_index + 1 ) % NUM_SAMPLES;
    1666:	23 8d       	ldd	r18, Z+27	; 0x1b
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	c9 01       	movw	r24, r18
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	63 e0       	ldi	r22, 0x03	; 3
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__divmodhi4>
    1676:	83 8f       	std	Z+27, r24	; 0x1b
		  component->T_samples[sample_index] = ADC_high;
    1678:	80 91 86 0a 	lds	r24, 0x0A86
    167c:	e2 0f       	add	r30, r18
    167e:	f3 1f       	adc	r31, r19
    1680:	80 8f       	std	Z+24, r24	; 0x18
      //perform next ADC conversion
  	  adc_sensor_type = ADC_VOLTAGE;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 93 79 0a 	sts	0x0A79, r24
		  adc_component = ( adc_component + 1 ) % SVIT_SZ;
    1688:	ce 01       	movw	r24, r28
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	64 e2       	ldi	r22, 0x24	; 36
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__divmodhi4>
    1694:	80 93 37 03 	sts	0x0337, r24
      component = &svit[adc_component];
    1698:	48 9f       	mul	r20, r24
    169a:	f0 01       	movw	r30, r0
    169c:	49 9f       	mul	r20, r25
    169e:	f0 0d       	add	r31, r0
    16a0:	11 24       	eor	r1, r1
    16a2:	1d c0       	rjmp	.+58     	; 0x16de <read_VIT+0x25e>
	  _delay_ms(ADC_DELAY_MS);
      perform_ADC( mux_num );
		  break;
    case ADC_INIT:
      //perform next ADC conversion
		  adc_sensor_type = ADC_VOLTAGE;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 79 0a 	sts	0x0A79, r24
      component = &svit[adc_component];
    16aa:	94 e2       	ldi	r25, 0x24	; 36
    16ac:	c9 9f       	mul	r28, r25
    16ae:	e0 01       	movw	r28, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	c4 5c       	subi	r28, 0xC4	; 196
    16b4:	dc 4f       	sbci	r29, 0xFC	; 252
      mux_num = component->V_mux_num;
    16b6:	1c 81       	ldd	r17, Y+4	; 0x04
      mux_sel = component->V_mux_sel;
      set_mux_sel( mux_num, mux_sel );
    16b8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ba:	81 2f       	mov	r24, r17
    16bc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <set_mux_sel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16c0:	83 e3       	ldi	r24, 0x33	; 51
    16c2:	93 e7       	ldi	r25, 0x73	; 115
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <read_VIT+0x244>
      //_delay_us(1);
	  //_delay_us(6000);
	  _delay_ms(ADC_DELAY_MS);
      perform_ADC( mux_num );
    16c8:	81 2f       	mov	r24, r17
    16ca:	15 c0       	rjmp	.+42     	; 0x16f6 <read_VIT+0x276>
      break;
	  default:
      //perform next ADC conversion
		  adc_sensor_type = ADC_VOLTAGE;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 79 0a 	sts	0x0A79, r24
      component = &svit[adc_component];
    16d2:	e0 91 37 03 	lds	r30, 0x0337
    16d6:	94 e2       	ldi	r25, 0x24	; 36
    16d8:	e9 9f       	mul	r30, r25
    16da:	f0 01       	movw	r30, r0
    16dc:	11 24       	eor	r1, r1
    16de:	e4 5c       	subi	r30, 0xC4	; 196
    16e0:	fc 4f       	sbci	r31, 0xFC	; 252
      mux_num = component->V_mux_num;
    16e2:	c4 81       	ldd	r28, Z+4	; 0x04
      mux_sel = component->V_mux_sel;
      set_mux_sel( mux_num, mux_sel );
    16e4:	65 81       	ldd	r22, Z+5	; 0x05
    16e6:	8c 2f       	mov	r24, r28
    16e8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <set_mux_sel>
    16ec:	83 e3       	ldi	r24, 0x33	; 51
    16ee:	93 e7       	ldi	r25, 0x73	; 115
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <read_VIT+0x270>
      //_delay_us(1);
      //_delay_us(6000);
	  _delay_ms(ADC_DELAY_MS);
	  perform_ADC( mux_num );
    16f4:	8c 2f       	mov	r24, r28
      break;
  } 
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
      mux_sel = component->V_mux_sel;
      set_mux_sel( mux_num, mux_sel );
      //_delay_us(1);
      //_delay_us(6000);
	  _delay_ms(ADC_DELAY_MS);
	  perform_ADC( mux_num );
    16fc:	0c 94 36 0a 	jmp	0x146c	; 0x146c <perform_ADC>

00001700 <uart_init>:
{
  #if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = UCSR1A = _BV(U2X); /* improve baud rate error by using 2x clk */
  UBRR0L = UBRR1L = (F_CPU / (8UL * UART_BAUD)) - 1;
  #else
  UBRR0L = UBRR1L = 7;//(F_CPU / (16UL * UART_BAUD)) - 1;//7;
    1700:	87 e0       	ldi	r24, 0x07	; 7
    1702:	80 93 99 00 	sts	0x0099, r24
    1706:	89 b9       	out	0x09, r24	; 9
  #endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1708:	88 e1       	ldi	r24, 0x18	; 24
    170a:	8a b9       	out	0x0a, r24	; 10
  UCSR1B = _BV(TXEN1) | _BV(RXEN1); /* tx/rx enable */
    170c:	ea e9       	ldi	r30, 0x9A	; 154
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 83       	st	Z, r24


  UCSR1B = UCSR1B | _BV(TXCIE1);
    1712:	80 81       	ld	r24, Z
    1714:	80 64       	ori	r24, 0x40	; 64
    1716:	80 83       	st	Z, r24
  UCSR1B = UCSR1B | _BV(RXCIE1);
    1718:	80 81       	ld	r24, Z
    171a:	80 68       	ori	r24, 0x80	; 128
    171c:	80 83       	st	Z, r24
  UCSR0B = UCSR0B | _BV(TXCIE0);
    171e:	56 9a       	sbi	0x0a, 6	; 10
  UCSR0B = UCSR0B | _BV(RXCIE0);
    1720:	57 9a       	sbi	0x0a, 7	; 10
    1722:	08 95       	ret

00001724 <append_crc16>:
 * Adds a byte of data into the crc calculation using
 * the table above.
 */
void append_crc16(uint8 byte, uint16ptr crc)
{
	*crc = ((*crc) >> 8) ^ ccitt_crc16[((*crc) ^ (byte)) & 0xff];
    1724:	fb 01       	movw	r30, r22
    1726:	20 81       	ld	r18, Z
    1728:	31 81       	ldd	r19, Z+1	; 0x01
    172a:	f9 01       	movw	r30, r18
    172c:	e8 27       	eor	r30, r24
    172e:	ff 27       	eor	r31, r31
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	ea 5f       	subi	r30, 0xFA	; 250
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	23 2f       	mov	r18, r19
    173a:	33 27       	eor	r19, r19
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	82 27       	eor	r24, r18
    1742:	93 27       	eor	r25, r19
    1744:	fb 01       	movw	r30, r22
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
    174a:	08 95       	ret

0000174c <vcpptr_init>:
// Parameters: 
// vcp_ptrbuffer	*buff -					Pointer to the vcp buffer structure
// uint8			*message_buffer -		Pointer to the allocated data buffer
// uint16			message_buffer_size -	Size of the allocated data buffer
void vcpptr_init(vcp_ptrbuffer *buff, uint8 *message_buffer, uint16 message_buffer_size)
{
    174c:	fc 01       	movw	r30, r24
	buff->address =	0;
    174e:	10 82       	st	Z, r1
	buff->message =	message_buffer;
    1750:	72 83       	std	Z+2, r23	; 0x02
    1752:	61 83       	std	Z+1, r22	; 0x01
	buff->size =	message_buffer_size;
    1754:	56 83       	std	Z+6, r21	; 0x06
    1756:	45 83       	std	Z+5, r20	; 0x05
	buff->index	=	0;
    1758:	10 86       	std	Z+8, r1	; 0x08
    175a:	17 82       	std	Z+7, r1	; 0x07
	buff->crc =		CRC16_INIT_VALUE;
    175c:	14 82       	std	Z+4, r1	; 0x04
    175e:	13 82       	std	Z+3, r1	; 0x03
	buff->status =	VCP_IDLE;
    1760:	11 86       	std	Z+9, r1	; 0x09
    1762:	08 95       	ret

00001764 <Create_VCP_frame>:
// uint16ptr	dst_size -	Pointer to the destination size. This will contain the frame size after the function exits.
// uint8		addr -		Source peripheral VCP address 
// uint8ptr		src -		Pointer to the source buffer
// uint16		src_size -	Source size
uint8_t Create_VCP_frame(uint8ptr dst, uint16_t* dst_size, uint8 addr, uint8ptr src, uint16 src_size)
{
    1764:	4f 92       	push	r4
    1766:	5f 92       	push	r5
    1768:	6f 92       	push	r6
    176a:	7f 92       	push	r7
    176c:	8f 92       	push	r8
    176e:	9f 92       	push	r9
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	00 d0       	rcall	.+0      	; 0x1786 <Create_VCP_frame+0x22>
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	6c 01       	movw	r12, r24
    178e:	5b 01       	movw	r10, r22
    1790:	79 01       	movw	r14, r18
	uint16_t crc = CRC16_INIT_VALUE;
    1792:	1a 82       	std	Y+2, r1	; 0x02
    1794:	19 82       	std	Y+1, r1	; 0x01
	uint16_t src_index = 0;
	uint16_t dst_index = 0;
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	09 f4       	brne	.+2      	; 0x179c <Create_VCP_frame+0x38>
    179a:	58 c0       	rjmp	.+176    	; 0x184c <Create_VCP_frame+0xe8>
    179c:	21 15       	cp	r18, r1
    179e:	31 05       	cpc	r19, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <Create_VCP_frame+0x40>
    17a2:	54 c0       	rjmp	.+168    	; 0x184c <Create_VCP_frame+0xe8>
		return VCP_NULL_ERR;

	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
    17a4:	4c 30       	cpi	r20, 0x0C	; 12
    17a6:	18 f0       	brcs	.+6      	; 0x17ae <Create_VCP_frame+0x4a>
    17a8:	48 33       	cpi	r20, 0x38	; 56
    17aa:	09 f0       	breq	.+2      	; 0x17ae <Create_VCP_frame+0x4a>
    17ac:	51 c0       	rjmp	.+162    	; 0x1850 <Create_VCP_frame+0xec>
		return VCP_ADDR_ERR;
		
	// Calculate CRC:
	append_crc16(addr, &crc);
    17ae:	44 24       	eor	r4, r4
    17b0:	43 94       	inc	r4
    17b2:	51 2c       	mov	r5, r1
    17b4:	4c 0e       	add	r4, r28
    17b6:	5d 1e       	adc	r5, r29
    17b8:	b2 01       	movw	r22, r4
    17ba:	84 2f       	mov	r24, r20
    17bc:	4b 83       	std	Y+3, r20	; 0x03
    17be:	0e 94 92 0b 	call	0x1724	; 0x1724 <append_crc16>
// uint8ptr		dst -		Pointer to the destination buffer
// uint16ptr	dst_size -	Pointer to the destination size. This will contain the frame size after the function exits.
// uint8		addr -		Source peripheral VCP address 
// uint8ptr		src -		Pointer to the source buffer
// uint16		src_size -	Source size
uint8_t Create_VCP_frame(uint8ptr dst, uint16_t* dst_size, uint8 addr, uint8ptr src, uint16 src_size)
    17c2:	37 01       	movw	r6, r14
    17c4:	60 0e       	add	r6, r16
    17c6:	71 1e       	adc	r7, r17
		return VCP_ADDR_ERR;
		
	// Calculate CRC:
	append_crc16(addr, &crc);

	for (src_index = 0; src_index < src_size; src_index++)
    17c8:	47 01       	movw	r8, r14
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <Create_VCP_frame+0x76>
	  append_crc16(src[src_index], &crc);
    17cc:	b2 01       	movw	r22, r4
    17ce:	f4 01       	movw	r30, r8
    17d0:	81 91       	ld	r24, Z+
    17d2:	4f 01       	movw	r8, r30
    17d4:	4b 83       	std	Y+3, r20	; 0x03
    17d6:	0e 94 92 0b 	call	0x1724	; 0x1724 <append_crc16>
    17da:	4b 81       	ldd	r20, Y+3	; 0x03
		return VCP_ADDR_ERR;
		
	// Calculate CRC:
	append_crc16(addr, &crc);

	for (src_index = 0; src_index < src_size; src_index++)
    17dc:	86 14       	cp	r8, r6
    17de:	97 04       	cpc	r9, r7
    17e0:	a9 f7       	brne	.-22     	; 0x17cc <Create_VCP_frame+0x68>
	  append_crc16(src[src_index], &crc);
	
	// Add CRC to the end of the source buffer
	src[src_index++] = ((crc >> 8) & 0xFF);
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	f7 01       	movw	r30, r14
    17e8:	e0 0f       	add	r30, r16
    17ea:	f1 1f       	adc	r31, r17
    17ec:	90 83       	st	Z, r25
	src[src_index++] = (crc & 0xFF);
    17ee:	81 83       	std	Z+1, r24	; 0x01
    17f0:	0e 5f       	subi	r16, 0xFE	; 254
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
	payload_size = src_index;
	
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
    17f4:	80 ec       	ldi	r24, 0xC0	; 192
    17f6:	f6 01       	movw	r30, r12
    17f8:	80 83       	st	Z, r24
	// then insert VCP address
	dst[dst_index++] =					addr;
    17fa:	41 83       	std	Z+1, r20	; 0x01
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    17fc:	d7 01       	movw	r26, r14
	// Build KISS Frame:
	
	// Start the frame with FEND
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
    17fe:	42 e0       	ldi	r20, 0x02	; 2
    1800:	50 e0       	ldi	r21, 0x00	; 0
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
    1802:	2d ed       	ldi	r18, 0xDD	; 221
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
	{
		if (src[src_index] == FEND)
		{
			dst[dst_index++] =			FESC;
    1804:	3b ed       	ldi	r19, 0xDB	; 219
			dst[dst_index++] =			TFEND;
    1806:	6c ed       	ldi	r22, 0xDC	; 220
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <Create_VCP_frame+0xc4>
	{
		if (src[src_index] == FEND)
    180a:	8d 91       	ld	r24, X+
    180c:	80 3c       	cpi	r24, 0xC0	; 192
    180e:	19 f4       	brne	.+6      	; 0x1816 <Create_VCP_frame+0xb2>
		{
			dst[dst_index++] =			FESC;
    1810:	30 83       	st	Z, r19
			dst[dst_index++] =			TFEND;
    1812:	61 83       	std	Z+1, r22	; 0x01
    1814:	04 c0       	rjmp	.+8      	; 0x181e <Create_VCP_frame+0xba>
		}
		else if (src[src_index] == FESC)
		{
			dst[dst_index++] =			FESC;
    1816:	80 83       	st	Z, r24
		if (src[src_index] == FEND)
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFEND;
		}
		else if (src[src_index] == FESC)
    1818:	8b 3d       	cpi	r24, 0xDB	; 219
    181a:	21 f4       	brne	.+8      	; 0x1824 <Create_VCP_frame+0xc0>
		{
			dst[dst_index++] =			FESC;
			dst[dst_index++] =			TFESC;
    181c:	21 83       	std	Z+1, r18	; 0x01
    181e:	4e 5f       	subi	r20, 0xFE	; 254
    1820:	5f 4f       	sbci	r21, 0xFF	; 255
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <Create_VCP_frame+0xc4>
		}
		else
		{
			dst[dst_index++] =			src[src_index];
    1824:	4f 5f       	subi	r20, 0xFF	; 255
    1826:	5f 4f       	sbci	r21, 0xFF	; 255
	dst[dst_index++] =					FEND;
	// then insert VCP address
	dst[dst_index++] =					addr;
	
	// Copy src to dst and Escape when necessary
	for (src_index = 0; src_index < payload_size; src_index++ )
    1828:	cd 01       	movw	r24, r26
    182a:	8e 19       	sub	r24, r14
    182c:	9f 09       	sbc	r25, r15
    182e:	f6 01       	movw	r30, r12
    1830:	e4 0f       	add	r30, r20
    1832:	f5 1f       	adc	r31, r21
    1834:	80 17       	cp	r24, r16
    1836:	91 07       	cpc	r25, r17
    1838:	40 f3       	brcs	.-48     	; 0x180a <Create_VCP_frame+0xa6>
		//if (dst_index >= *dst_size - 1)
			//return VCP_OVR_ERR;
	}
	
	// End the frame with FEND
	dst[dst_index++] =					FEND;
    183a:	80 ec       	ldi	r24, 0xC0	; 192
    183c:	80 83       	st	Z, r24
    183e:	4f 5f       	subi	r20, 0xFF	; 255
    1840:	5f 4f       	sbci	r21, 0xFF	; 255
	
	// Save the frame size
	*dst_size = dst_index;
    1842:	f5 01       	movw	r30, r10
    1844:	51 83       	std	Z+1, r21	; 0x01
    1846:	40 83       	st	Z, r20
	
	// All good
	return VCP_TERM;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <Create_VCP_frame+0xee>
	uint16_t dst_index = 0;
	uint16_t payload_size;
	
	// Check for invalid buffers
	if (dst == NULL || src == NULL)
		return VCP_NULL_ERR;
    184c:	85 e0       	ldi	r24, 0x05	; 5
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <Create_VCP_frame+0xee>

	// Check for invalid VCP address	
	if (addr > VCP_FC && addr != VCP_SUN_SENSOR)
		return VCP_ADDR_ERR;
    1850:	86 e0       	ldi	r24, 0x06	; 6
	// Save the frame size
	*dst_size = dst_index;
	
	// All good
	return VCP_TERM;
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	bf 90       	pop	r11
    186a:	af 90       	pop	r10
    186c:	9f 90       	pop	r9
    186e:	8f 90       	pop	r8
    1870:	7f 90       	pop	r7
    1872:	6f 90       	pop	r6
    1874:	5f 90       	pop	r5
    1876:	4f 90       	pop	r4
    1878:	08 95       	ret

0000187a <Receive_VCP_byte>:
// and return VCP status.
// Parameters:
// vcp_ptrbuffer	*buff -	Pointer to the vcp buffer structure
// uint8			byte -	received byte
uint8_t Receive_VCP_byte(vcp_ptrbuffer *buff, uint8 byte)
{
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
	uint16_t payload_index;
	uint16_t message_crc;
	
	// Check for invalid buffer
	if (buff->message == NULL)
    188c:	29 81       	ldd	r18, Y+1	; 0x01
    188e:	3a 81       	ldd	r19, Y+2	; 0x02
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <Receive_VCP_byte+0x1e>
    1896:	84 c0       	rjmp	.+264    	; 0x19a0 <Receive_VCP_byte+0x126>
		return VCP_NULL_ERR;
	
	// Check if the buffer will overflow
	if (buff->index >= buff->size-1)
    1898:	8f 81       	ldd	r24, Y+7	; 0x07
    189a:	98 85       	ldd	r25, Y+8	; 0x08
    189c:	4d 81       	ldd	r20, Y+5	; 0x05
    189e:	5e 81       	ldd	r21, Y+6	; 0x06
    18a0:	41 50       	subi	r20, 0x01	; 1
    18a2:	51 09       	sbc	r21, r1
    18a4:	84 17       	cp	r24, r20
    18a6:	95 07       	cpc	r25, r21
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <Receive_VCP_byte+0x32>
    18aa:	7c c0       	rjmp	.+248    	; 0x19a4 <Receive_VCP_byte+0x12a>
		return VCP_OVR_ERR;
	
	// State Machine
	switch (buff->status)
    18ac:	49 85       	ldd	r20, Y+9	; 0x09
    18ae:	42 30       	cpi	r20, 0x02	; 2
    18b0:	39 f1       	breq	.+78     	; 0x1900 <Receive_VCP_byte+0x86>
    18b2:	18 f4       	brcc	.+6      	; 0x18ba <Receive_VCP_byte+0x40>
    18b4:	44 23       	and	r20, r20
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <Receive_VCP_byte+0x4a>
    18b8:	38 c0       	rjmp	.+112    	; 0x192a <Receive_VCP_byte+0xb0>
    18ba:	40 31       	cpi	r20, 0x10	; 16
    18bc:	31 f0       	breq	.+12     	; 0x18ca <Receive_VCP_byte+0x50>
    18be:	40 32       	cpi	r20, 0x20	; 32
    18c0:	a1 f5       	brne	.+104    	; 0x192a <Receive_VCP_byte+0xb0>
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <Receive_VCP_byte+0x5e>
	{
		case VCP_IDLE:										
			if (byte == FEND)
    18c4:	60 3c       	cpi	r22, 0xC0	; 192
    18c6:	91 f5       	brne	.+100    	; 0x192c <Receive_VCP_byte+0xb2>
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <Receive_VCP_byte+0x6a>
				buff->status = VCP_ADDRESS;	
			break;
		case VCP_ADDRESS:
			// Check for invalid VCP address
			if (byte > VCP_FC && byte != VCP_SUN_SENSOR)
    18ca:	6c 30       	cpi	r22, 0x0C	; 12
    18cc:	18 f0       	brcs	.+6      	; 0x18d4 <Receive_VCP_byte+0x5a>
    18ce:	68 33       	cpi	r22, 0x38	; 56
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <Receive_VCP_byte+0x5a>
    18d2:	6a c0       	rjmp	.+212    	; 0x19a8 <Receive_VCP_byte+0x12e>
				return VCP_ADDR_ERR;
			else
			{
				buff->address = byte;
    18d4:	68 83       	st	Y, r22
    18d6:	26 c0       	rjmp	.+76     	; 0x1924 <Receive_VCP_byte+0xaa>
				buff->status = VCP_RECEIVING;
			}	
			break;
		case VCP_RECEIVING:
			if (byte == FEND)
    18d8:	60 3c       	cpi	r22, 0xC0	; 192
    18da:	31 f4       	brne	.+12     	; 0x18e8 <Receive_VCP_byte+0x6e>
			{
				if (buff->index > 0)
    18dc:	89 2b       	or	r24, r25
    18de:	11 f0       	breq	.+4      	; 0x18e4 <Receive_VCP_byte+0x6a>
					// Done
					buff->status = VCP_TERM;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	21 c0       	rjmp	.+66     	; 0x1926 <Receive_VCP_byte+0xac>
				else
					// No data between FENDs - assume lost sync and start over
					buff->status = VCP_ADDRESS;
    18e4:	80 e1       	ldi	r24, 0x10	; 16
    18e6:	1f c0       	rjmp	.+62     	; 0x1926 <Receive_VCP_byte+0xac>
			}
			else if (byte == FESC)
    18e8:	6b 3d       	cpi	r22, 0xDB	; 219
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <Receive_VCP_byte+0x76>
				buff->status = VCP_ESC;
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	1b c0       	rjmp	.+54     	; 0x1926 <Receive_VCP_byte+0xac>
			else
			{
				buff->message[(buff->index)++] = byte;	
    18f0:	f9 01       	movw	r30, r18
    18f2:	e8 0f       	add	r30, r24
    18f4:	f9 1f       	adc	r31, r25
    18f6:	60 83       	st	Z, r22
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	8f 83       	std	Y+7, r24	; 0x07
    18fe:	16 c0       	rjmp	.+44     	; 0x192c <Receive_VCP_byte+0xb2>
			}						
			break;
		case VCP_ESC:
			if (byte == TFEND)
    1900:	6c 3d       	cpi	r22, 0xDC	; 220
    1902:	29 f4       	brne	.+10     	; 0x190e <Receive_VCP_byte+0x94>
			{
				buff->message[(buff->index)++] = FEND;
    1904:	f9 01       	movw	r30, r18
    1906:	e8 0f       	add	r30, r24
    1908:	f9 1f       	adc	r31, r25
    190a:	40 ec       	ldi	r20, 0xC0	; 192
    190c:	07 c0       	rjmp	.+14     	; 0x191c <Receive_VCP_byte+0xa2>
				buff->status = VCP_RECEIVING;
			}
			else if (byte == TFESC)
    190e:	6d 3d       	cpi	r22, 0xDD	; 221
    1910:	09 f0       	breq	.+2      	; 0x1914 <Receive_VCP_byte+0x9a>
    1912:	4c c0       	rjmp	.+152    	; 0x19ac <Receive_VCP_byte+0x132>
			{
				buff->message[(buff->index)++] = FESC;
    1914:	f9 01       	movw	r30, r18
    1916:	e8 0f       	add	r30, r24
    1918:	f9 1f       	adc	r31, r25
    191a:	4b ed       	ldi	r20, 0xDB	; 219
    191c:	40 83       	st	Z, r20
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	98 87       	std	Y+8, r25	; 0x08
    1922:	8f 83       	std	Y+7, r24	; 0x07
				buff->status = VCP_RECEIVING;
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	89 87       	std	Y+9, r24	; 0x09
    1928:	01 c0       	rjmp	.+2      	; 0x192c <Receive_VCP_byte+0xb2>
			}
			else
				return VCP_ESC_ERR;	
			break;
		default:
			buff->status = VCP_IDLE;
    192a:	19 86       	std	Y+9, r1	; 0x09
			break; 
	}
	
	// End of frame
	if (buff->status == VCP_TERM)
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	11 f0       	breq	.+4      	; 0x1936 <Receive_VCP_byte+0xbc>
		// Check Calculated CRC against Received CRC
		if (buff->crc != message_crc)
			return VCP_CRC_ERR;
	}

	return buff->status;
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	3c c0       	rjmp	.+120    	; 0x19ae <Receive_VCP_byte+0x134>
	
	// End of frame
	if (buff->status == VCP_TERM)
	{
		// Message CRC is last 2 bytes 
		message_crc = (buff->message[buff->index-2] << 8 ) + buff->message[buff->index-1];
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	4f 81       	ldd	r20, Y+7	; 0x07
    193c:	58 85       	ldd	r21, Y+8	; 0x08
    193e:	84 0f       	add	r24, r20
    1940:	95 1f       	adc	r25, r21
    1942:	fc 01       	movw	r30, r24
    1944:	32 97       	sbiw	r30, 0x02	; 2
    1946:	30 81       	ld	r19, Z
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	fc 01       	movw	r30, r24
    194c:	31 97       	sbiw	r30, 0x01	; 1
    194e:	80 81       	ld	r24, Z
    1950:	69 01       	movw	r12, r18
    1952:	c8 0e       	add	r12, r24
    1954:	d1 1c       	adc	r13, r1
		// Remove CRC bytes from the message
		buff->index -= 2;
    1956:	42 50       	subi	r20, 0x02	; 2
    1958:	51 09       	sbc	r21, r1
    195a:	58 87       	std	Y+8, r21	; 0x08
    195c:	4f 83       	std	Y+7, r20	; 0x07
		// Calculate CRC on received message (including address)
		append_crc16(buff->address, &(buff->crc));
    195e:	7e 01       	movw	r14, r28
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	e8 0e       	add	r14, r24
    1964:	f1 1c       	adc	r15, r1
    1966:	b7 01       	movw	r22, r14
    1968:	88 81       	ld	r24, Y
    196a:	0e 94 92 0b 	call	0x1724	; 0x1724 <append_crc16>
		for (payload_index = 0; payload_index < buff->index; payload_index++)
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	10 e0       	ldi	r17, 0x00	; 0
    1972:	0a c0       	rjmp	.+20     	; 0x1988 <Receive_VCP_byte+0x10e>
		{
			append_crc16(buff->message[payload_index], &buff->crc);
    1974:	e9 81       	ldd	r30, Y+1	; 0x01
    1976:	fa 81       	ldd	r31, Y+2	; 0x02
    1978:	e0 0f       	add	r30, r16
    197a:	f1 1f       	adc	r31, r17
    197c:	b7 01       	movw	r22, r14
    197e:	80 81       	ld	r24, Z
    1980:	0e 94 92 0b 	call	0x1724	; 0x1724 <append_crc16>
		message_crc = (buff->message[buff->index-2] << 8 ) + buff->message[buff->index-1];
		// Remove CRC bytes from the message
		buff->index -= 2;
		// Calculate CRC on received message (including address)
		append_crc16(buff->address, &(buff->crc));
		for (payload_index = 0; payload_index < buff->index; payload_index++)
    1984:	0f 5f       	subi	r16, 0xFF	; 255
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	8f 81       	ldd	r24, Y+7	; 0x07
    198a:	98 85       	ldd	r25, Y+8	; 0x08
    198c:	08 17       	cp	r16, r24
    198e:	19 07       	cpc	r17, r25
    1990:	88 f3       	brcs	.-30     	; 0x1974 <Receive_VCP_byte+0xfa>
		{
			append_crc16(buff->message[payload_index], &buff->crc);
		}
		// Check Calculated CRC against Received CRC
		if (buff->crc != message_crc)
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	8c 15       	cp	r24, r12
    1998:	9d 05       	cpc	r25, r13
    199a:	59 f2       	breq	.-106    	; 0x1932 <Receive_VCP_byte+0xb8>
			return VCP_CRC_ERR;
    199c:	84 e0       	ldi	r24, 0x04	; 4
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <Receive_VCP_byte+0x134>
	uint16_t payload_index;
	uint16_t message_crc;
	
	// Check for invalid buffer
	if (buff->message == NULL)
		return VCP_NULL_ERR;
    19a0:	85 e0       	ldi	r24, 0x05	; 5
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <Receive_VCP_byte+0x134>
	
	// Check if the buffer will overflow
	if (buff->index >= buff->size-1)
		return VCP_OVR_ERR;
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <Receive_VCP_byte+0x134>
				buff->status = VCP_ADDRESS;	
			break;
		case VCP_ADDRESS:
			// Check for invalid VCP address
			if (byte > VCP_FC && byte != VCP_SUN_SENSOR)
				return VCP_ADDR_ERR;
    19a8:	86 e0       	ldi	r24, 0x06	; 6
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <Receive_VCP_byte+0x134>
			{
				buff->message[(buff->index)++] = FESC;
				buff->status = VCP_RECEIVING;
			}
			else
				return VCP_ESC_ERR;	
    19ac:	87 e0       	ldi	r24, 0x07	; 7
		if (buff->crc != message_crc)
			return VCP_CRC_ERR;
	}

	return buff->status;
}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	df 90       	pop	r13
    19bc:	cf 90       	pop	r12
    19be:	08 95       	ret

000019c0 <tx_put_byte.part.0>:

void tx_put_byte( uint8_t uart )
{
  if ( uart != 0 && uart != 1 )
    return;
  if( tel_packet_index[uart] < tel_packet_size[uart] )
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	f9 01       	movw	r30, r18
    19c6:	eb 59       	subi	r30, 0x9B	; 155
    19c8:	f7 4f       	sbci	r31, 0xF7	; 247
    19ca:	60 81       	ld	r22, Z
    19cc:	d9 01       	movw	r26, r18
    19ce:	aa 0f       	add	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	a7 5d       	subi	r26, 0xD7	; 215
    19d4:	bc 4f       	sbci	r27, 0xFC	; 252
    19d6:	4d 91       	ld	r20, X+
    19d8:	5c 91       	ld	r21, X
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	64 17       	cp	r22, r20
    19de:	75 07       	cpc	r23, r21
    19e0:	10 f5       	brcc	.+68     	; 0x1a26 <tx_put_byte.part.0+0x66>
  {
      if ( uart == 0 )
    19e2:	81 11       	cpse	r24, r1
    19e4:	0e c0       	rjmp	.+28     	; 0x1a02 <tx_put_byte.part.0+0x42>
      UDR0 = tel_packet[uart][tel_packet_index[uart]++];
    19e6:	80 81       	ld	r24, Z
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	92 9f       	mul	r25, r18
    19ec:	d0 01       	movw	r26, r0
    19ee:	93 9f       	mul	r25, r19
    19f0:	b0 0d       	add	r27, r0
    19f2:	11 24       	eor	r1, r1
    19f4:	a8 0f       	add	r26, r24
    19f6:	b1 1d       	adc	r27, r1
    19f8:	a3 59       	subi	r26, 0x93	; 147
    19fa:	b7 4f       	sbci	r27, 0xF7	; 247
    19fc:	9c 91       	ld	r25, X
    19fe:	9c b9       	out	0x0c, r25	; 12
    1a00:	10 c0       	rjmp	.+32     	; 0x1a22 <tx_put_byte.part.0+0x62>
    else if ( uart == 1 )
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	81 f4       	brne	.+32     	; 0x1a26 <tx_put_byte.part.0+0x66>
      UDR1 = tel_packet[uart][tel_packet_index[uart]++];
    1a06:	80 81       	ld	r24, Z
    1a08:	9f ef       	ldi	r25, 0xFF	; 255
    1a0a:	92 9f       	mul	r25, r18
    1a0c:	d0 01       	movw	r26, r0
    1a0e:	93 9f       	mul	r25, r19
    1a10:	b0 0d       	add	r27, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	a8 0f       	add	r26, r24
    1a16:	b1 1d       	adc	r27, r1
    1a18:	a3 59       	subi	r26, 0x93	; 147
    1a1a:	b7 4f       	sbci	r27, 0xF7	; 247
    1a1c:	9c 91       	ld	r25, X
    1a1e:	90 93 9c 00 	sts	0x009C, r25
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	80 83       	st	Z, r24
    1a26:	08 95       	ret

00001a28 <__vector_15>:
#include "vcp_library.h"
#include "crclib.h"
#include "uart.h"

ISR(TIMER0_COMP_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	8f 93       	push	r24
  if ( timer0_counter[0] > 0 )
    1a34:	80 91 96 0c 	lds	r24, 0x0C96
    1a38:	88 23       	and	r24, r24
    1a3a:	29 f0       	breq	.+10     	; 0x1a46 <__vector_15+0x1e>
    --timer0_counter[0];
    1a3c:	80 91 96 0c 	lds	r24, 0x0C96
    1a40:	81 50       	subi	r24, 0x01	; 1
    1a42:	80 93 96 0c 	sts	0x0C96, r24
  if ( timer0_counter[1] > 0 )
    1a46:	80 91 97 0c 	lds	r24, 0x0C97
    1a4a:	88 23       	and	r24, r24
    1a4c:	29 f0       	breq	.+10     	; 0x1a58 <__vector_15+0x30>
    --timer0_counter[1];
    1a4e:	80 91 97 0c 	lds	r24, 0x0C97
    1a52:	81 50       	subi	r24, 0x01	; 1
    1a54:	80 93 97 0c 	sts	0x0C97, r24
	//if (cntr == 0)
	//	PORTC |= 0x01;
	//else
	//	PORTC &= 0xFE;
	//_delay_ms(500);
}
    1a58:	8f 91       	pop	r24
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_12>:

/* Timer 1(A) routine */
ISR(TIMER1_COMPA_vect)		//Handle Radio & Torquer 30 min delays here; handle 10 min CDH-IB no heartbeat restart
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	0b b6       	in	r0, 0x3b	; 59
    1a70:	0f 92       	push	r0
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	cf 93       	push	r28
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
	SVIT_t *component;
	
	//Testing
	PORTF ^= 0xFF;
    1a8c:	80 91 62 00 	lds	r24, 0x0062
    1a90:	80 95       	com	r24
    1a92:	80 93 62 00 	sts	0x0062, r24
		
	if (timer1_counter[0] <= 0	  &&     rad_torq_flag){	//provides 30 minute delay			
    1a96:	80 91 be 0e 	lds	r24, 0x0EBE
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	31 c0       	rjmp	.+98     	; 0x1b00 <__vector_12+0x9c>
    1a9e:	80 91 0d 03 	lds	r24, 0x030D
    1aa2:	88 23       	and	r24, r24
    1aa4:	69 f1       	breq	.+90     	; 0x1b00 <__vector_12+0x9c>
	//if ( receive_flag == 1){		//If message is received, reset timer1_counter[0] to CYCLE_COUNTER
	    timer1_counter[0] = CYCLE_COUNTER;
    1aa6:	84 e8       	ldi	r24, 0x84	; 132
    1aa8:	80 93 be 0e 	sts	0x0EBE, r24
		
		//CHECK: Should the ISR do this code or not?
		
		//Turn on radios
		component = &svit[RADIO_1];
		switch_on( component->switch_num );
    1aac:	80 91 c9 04 	lds	r24, 0x04C9
    1ab0:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
		component->switch_state = SW_ON;
    1ab4:	c1 e0       	ldi	r28, 0x01	; 1
    1ab6:	c0 93 ca 04 	sts	0x04CA, r28
		component = &svit[RADIO_2];
		switch_on( component->switch_num );
    1aba:	80 91 ed 04 	lds	r24, 0x04ED
    1abe:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
		component->switch_state = SW_ON;
    1ac2:	c0 93 ee 04 	sts	0x04EE, r28
		
		//Turn on torque coils			
		component = &svit[TORQUER_1];
		switch_on( component->switch_num );
    1ac6:	80 91 a1 05 	lds	r24, 0x05A1
    1aca:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
		component->switch_state = SW_ON;
    1ace:	c0 93 a2 05 	sts	0x05A2, r28
		component = &svit[TORQUER_2];
		switch_on( component->switch_num );
    1ad2:	80 91 c5 05 	lds	r24, 0x05C5
    1ad6:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
		component->switch_state = SW_ON;
    1ada:	c0 93 c6 05 	sts	0x05C6, r28
		component = &svit[TORQUER_3];
		switch_on( component->switch_num );
    1ade:	80 91 e9 05 	lds	r24, 0x05E9
    1ae2:	0e 94 83 09 	call	0x1306	; 0x1306 <switch_on>
		component->switch_state = SW_ON;
    1ae6:	c0 93 ea 05 	sts	0x05EA, r28
		torquer_on(TORQUER_1);
    1aea:	81 e1       	ldi	r24, 0x11	; 17
    1aec:	0e 94 66 09 	call	0x12cc	; 0x12cc <torquer_on>
		torquer_on(TORQUER_2);
    1af0:	82 e1       	ldi	r24, 0x12	; 18
    1af2:	0e 94 66 09 	call	0x12cc	; 0x12cc <torquer_on>
		torquer_on(TORQUER_3);
    1af6:	83 e1       	ldi	r24, 0x13	; 19
    1af8:	0e 94 66 09 	call	0x12cc	; 0x12cc <torquer_on>
		
		//PORTC ^= 0x02;	//LED for STK testing
		//PORTC ^= 0x01;
		
		//Don't reexecute this code
		rad_torq_flag = 0;
    1afc:	10 92 0d 03 	sts	0x030D, r1
	}
	
	if (timer1_counter[1] <= 0   &&   !cdh_heartbeat_flag){		//If heartbeat timer 1 has expired AND we haven't already ordered a restart
    1b00:	80 91 bf 0e 	lds	r24, 0x0EBF
    1b04:	81 11       	cpse	r24, r1
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <__vector_12+0xb2>
    1b08:	80 91 24 03 	lds	r24, 0x0324
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <__vector_12+0xb2>
		//Order full component restart
		cdh_heartbeat_flag = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 93 24 03 	sts	0x0324, r24
		
	}
	
	//else{
		PORTC ^= 0x01;		//LED for STK testing at PORTC0
    1b16:	85 b3       	in	r24, 0x15	; 21
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	89 27       	eor	r24, r25
    1b1c:	85 bb       	out	0x15, r24	; 21
    1b1e:	2f ef       	ldi	r18, 0xFF	; 255
    1b20:	8f e7       	ldi	r24, 0x7F	; 127
    1b22:	96 e1       	ldi	r25, 0x16	; 22
    1b24:	21 50       	subi	r18, 0x01	; 1
    1b26:	80 40       	sbci	r24, 0x00	; 0
    1b28:	90 40       	sbci	r25, 0x00	; 0
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <__vector_12+0xc0>
    1b2c:	00 c0       	rjmp	.+0      	; 0x1b2e <__vector_12+0xca>
    1b2e:	00 00       	nop
		_delay_ms(500);
		--timer1_counter[0];
    1b30:	80 91 be 0e 	lds	r24, 0x0EBE
    1b34:	81 50       	subi	r24, 0x01	; 1
    1b36:	80 93 be 0e 	sts	0x0EBE, r24
		--timer1_counter[1];
    1b3a:	80 91 bf 0e 	lds	r24, 0x0EBF
    1b3e:	81 50       	subi	r24, 0x01	; 1
    1b40:	80 93 bf 0e 	sts	0x0EBF, r24
	//   volatile float current_sample[t]
	// ADC current sample --> current_sample[t]
	// ADC voltage sample --> voltage_sample[t]
	// t = t + 1;
	// if t = max, make sure we call calc_OCV(method)
}
    1b44:	ff 91       	pop	r31
    1b46:	ef 91       	pop	r30
    1b48:	cf 91       	pop	r28
    1b4a:	bf 91       	pop	r27
    1b4c:	af 91       	pop	r26
    1b4e:	9f 91       	pop	r25
    1b50:	8f 91       	pop	r24
    1b52:	7f 91       	pop	r23
    1b54:	6f 91       	pop	r22
    1b56:	5f 91       	pop	r21
    1b58:	4f 91       	pop	r20
    1b5a:	3f 91       	pop	r19
    1b5c:	2f 91       	pop	r18
    1b5e:	0f 90       	pop	r0
    1b60:	0b be       	out	0x3b, r0	; 59
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti

00001b6c <__vector_32>:

ISR(USART1_TX_vect)
{
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	0b b6       	in	r0, 0x3b	; 59
    1b78:	0f 92       	push	r0
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <tx_put_byte.part.0>
  tx_put_byte( 1 );
}
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0b be       	out	0x3b, r0	; 59
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_30>:

ISR(USART1_RX_vect)
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	0b b6       	in	r0, 0x3b	; 59
    1bca:	0f 92       	push	r0
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
  if( Receive_VCP_byte( uart_vcp_buff[1], UDR1 ) == VCP_TERM )
    1be4:	60 91 9c 00 	lds	r22, 0x009C
    1be8:	80 91 c8 0e 	lds	r24, 0x0EC8
    1bec:	90 91 c9 0e 	lds	r25, 0x0EC9
    1bf0:	0e 94 3d 0c 	call	0x187a	; 0x187a <Receive_VCP_byte>
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	29 f4       	brne	.+10     	; 0x1c02 <__vector_30+0x44>
  {
    rx_flag[1]++;
    1bf8:	80 91 cc 0e 	lds	r24, 0x0ECC
    1bfc:	8f 5f       	subi	r24, 0xFF	; 255
    1bfe:	80 93 cc 0e 	sts	0x0ECC, r24
  }
}
    1c02:	ff 91       	pop	r31
    1c04:	ef 91       	pop	r30
    1c06:	bf 91       	pop	r27
    1c08:	af 91       	pop	r26
    1c0a:	9f 91       	pop	r25
    1c0c:	8f 91       	pop	r24
    1c0e:	7f 91       	pop	r23
    1c10:	6f 91       	pop	r22
    1c12:	5f 91       	pop	r21
    1c14:	4f 91       	pop	r20
    1c16:	3f 91       	pop	r19
    1c18:	2f 91       	pop	r18
    1c1a:	0f 90       	pop	r0
    1c1c:	0b be       	out	0x3b, r0	; 59
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__vector_21>:

ISR ( ADC_vect )
{
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
  ADC_low = ADCL;	// Left adjusted; read 2 LSB then 8 MSB
    1c40:	84 b1       	in	r24, 0x04	; 4
    1c42:	80 93 c0 0e 	sts	0x0EC0, r24
  ADC_high = ADCH;
    1c46:	85 b1       	in	r24, 0x05	; 5
    1c48:	80 93 86 0a 	sts	0x0A86, r24
  adc_flag = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 6c 0a 	sts	0x0A6C, r24
  coul_count_cnt = (coul_count_cnt + 1) % COUL_SAMPLES;
    1c52:	80 91 07 03 	lds	r24, 0x0307
    1c56:	90 91 08 03 	lds	r25, 0x0308
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	64 e6       	ldi	r22, 0x64	; 100
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodhi4>
    1c64:	90 93 08 03 	sts	0x0308, r25
    1c68:	80 93 07 03 	sts	0x0307, r24
}
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	0f 90       	pop	r0
    1c80:	1f 90       	pop	r1
    1c82:	18 95       	reti

00001c84 <__vector_20>:

ISR( USART0_TX_vect )
{
    1c84:	1f 92       	push	r1
    1c86:	0f 92       	push	r0
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	0f 92       	push	r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	0b b6       	in	r0, 0x3b	; 59
    1c90:	0f 92       	push	r0
    1c92:	2f 93       	push	r18
    1c94:	3f 93       	push	r19
    1c96:	4f 93       	push	r20
    1c98:	5f 93       	push	r21
    1c9a:	6f 93       	push	r22
    1c9c:	7f 93       	push	r23
    1c9e:	8f 93       	push	r24
    1ca0:	9f 93       	push	r25
    1ca2:	af 93       	push	r26
    1ca4:	bf 93       	push	r27
    1ca6:	ef 93       	push	r30
    1ca8:	ff 93       	push	r31
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <tx_put_byte.part.0>
  tx_put_byte( 0 );
}
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	7f 91       	pop	r23
    1cbe:	6f 91       	pop	r22
    1cc0:	5f 91       	pop	r21
    1cc2:	4f 91       	pop	r20
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	0b be       	out	0x3b, r0	; 59
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <__vector_18>:

ISR( USART0_RX_vect )
{
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	0b b6       	in	r0, 0x3b	; 59
    1ce2:	0f 92       	push	r0
    1ce4:	2f 93       	push	r18
    1ce6:	3f 93       	push	r19
    1ce8:	4f 93       	push	r20
    1cea:	5f 93       	push	r21
    1cec:	6f 93       	push	r22
    1cee:	7f 93       	push	r23
    1cf0:	8f 93       	push	r24
    1cf2:	9f 93       	push	r25
    1cf4:	af 93       	push	r26
    1cf6:	bf 93       	push	r27
    1cf8:	ef 93       	push	r30
    1cfa:	ff 93       	push	r31
  if( Receive_VCP_byte( uart_vcp_buff[0], UDR0 ) == VCP_TERM )
    1cfc:	6c b1       	in	r22, 0x0c	; 12
    1cfe:	80 91 c6 0e 	lds	r24, 0x0EC6
    1d02:	90 91 c7 0e 	lds	r25, 0x0EC7
    1d06:	0e 94 3d 0c 	call	0x187a	; 0x187a <Receive_VCP_byte>
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	29 f4       	brne	.+10     	; 0x1d18 <__vector_18+0x42>
  {
    rx_flag[0]++;
    1d0e:	80 91 cb 0e 	lds	r24, 0x0ECB
    1d12:	8f 5f       	subi	r24, 0xFF	; 255
    1d14:	80 93 cb 0e 	sts	0x0ECB, r24
  }
}
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	bf 91       	pop	r27
    1d1e:	af 91       	pop	r26
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	7f 91       	pop	r23
    1d26:	6f 91       	pop	r22
    1d28:	5f 91       	pop	r21
    1d2a:	4f 91       	pop	r20
    1d2c:	3f 91       	pop	r19
    1d2e:	2f 91       	pop	r18
    1d30:	0f 90       	pop	r0
    1d32:	0b be       	out	0x3b, r0	; 59
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <tx_put_byte>:

void tx_put_byte( uint8_t uart )
{
  if ( uart != 0 && uart != 1 )
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <tx_put_byte+0x8>
    1d42:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <tx_put_byte.part.0>
    1d46:	08 95       	ret

00001d48 <construct_telemetry_packet>:
  }
}


void construct_telemetry_packet( uint8_t* packet_payload )
{
    1d48:	2f 92       	push	r2
    1d4a:	3f 92       	push	r3
    1d4c:	4f 92       	push	r4
    1d4e:	5f 92       	push	r5
    1d50:	6f 92       	push	r6
    1d52:	7f 92       	push	r7
    1d54:	8f 92       	push	r8
    1d56:	9f 92       	push	r9
    1d58:	af 92       	push	r10
    1d5a:	bf 92       	push	r11
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	28 97       	sbiw	r28, 0x08	; 8
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	98 87       	std	Y+8, r25	; 0x08
    1d7e:	8f 83       	std	Y+7, r24	; 0x07
  packet_payload[0] = VCP_POWER_TELEMETRY;
    1d80:	dc 01       	movw	r26, r24
    1d82:	1c 92       	st	X, r1
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
                  ( svit[HEATER_2].switch_state << 7 )     ;

  on_off_state1 = ( svit[CMG].switch_state << 0 )        |
                  ( svit[SUN_SENSOR].switch_state << 1 ) |
    1d84:	30 91 a6 04 	lds	r19, 0x04A6
    1d88:	33 0f       	add	r19, r19
                  ( svit[RADIO_1].switch_state << 2 )    |
    1d8a:	80 91 ca 04 	lds	r24, 0x04CA
    1d8e:	b4 e0       	ldi	r27, 0x04	; 4
    1d90:	8b 9f       	mul	r24, r27
    1d92:	c0 01       	movw	r24, r0
    1d94:	11 24       	eor	r1, r1
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
                  ( svit[HEATER_2].switch_state << 7 )     ;

  on_off_state1 = ( svit[CMG].switch_state << 0 )        |
    1d96:	38 2b       	or	r19, r24
    1d98:	80 91 82 04 	lds	r24, 0x0482
    1d9c:	38 2b       	or	r19, r24
                  ( svit[SUN_SENSOR].switch_state << 1 ) |
                  ( svit[RADIO_1].switch_state << 2 )    |
                  ( svit[RADIO_2].switch_state << 3 )    |
    1d9e:	80 91 ee 04 	lds	r24, 0x04EE
    1da2:	e8 e0       	ldi	r30, 0x08	; 8
    1da4:	8e 9f       	mul	r24, r30
    1da6:	c0 01       	movw	r24, r0
    1da8:	11 24       	eor	r1, r1
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
                  ( svit[HEATER_2].switch_state << 7 )     ;

  on_off_state1 = ( svit[CMG].switch_state << 0 )        |
    1daa:	38 2b       	or	r19, r24
                  ( svit[SUN_SENSOR].switch_state << 1 ) |
                  ( svit[RADIO_1].switch_state << 2 )    |
                  ( svit[RADIO_2].switch_state << 3 )    |
                  ( svit[FOG_15V].switch_state << 4 )    |
    1dac:	80 91 5a 05 	lds	r24, 0x055A
    1db0:	f0 e1       	ldi	r31, 0x10	; 16
    1db2:	8f 9f       	mul	r24, r31
    1db4:	c0 01       	movw	r24, r0
    1db6:	11 24       	eor	r1, r1
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
                  ( svit[HEATER_2].switch_state << 7 )     ;

  on_off_state1 = ( svit[CMG].switch_state << 0 )        |
    1db8:	38 2b       	or	r19, r24
                  ( svit[SUN_SENSOR].switch_state << 1 ) |
                  ( svit[RADIO_1].switch_state << 2 )    |
                  ( svit[RADIO_2].switch_state << 3 )    |
                  ( svit[FOG_15V].switch_state << 4 )    |
                  ( svit[FOG_5V].switch_state << 5  )    ;
    1dba:	80 91 7e 05 	lds	r24, 0x057E
    1dbe:	20 e2       	ldi	r18, 0x20	; 32
    1dc0:	82 9f       	mul	r24, r18
    1dc2:	c0 01       	movw	r24, r0
    1dc4:	11 24       	eor	r1, r1
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
                  ( svit[HEATER_2].switch_state << 7 )     ;

  on_off_state1 = ( svit[CMG].switch_state << 0 )        |
    1dc6:	38 2b       	or	r19, r24
                  ( svit[RADIO_2].switch_state << 3 )    |
                  ( svit[FOG_15V].switch_state << 4 )    |
                  ( svit[FOG_5V].switch_state << 5  )    ;

  on_off_state2 = ( svit[TORQUER_1].switch_state << 0 )  |
                  ( svit[TORQUER_2].switch_state << 1 ) |
    1dc8:	40 91 c6 05 	lds	r20, 0x05C6
    1dcc:	44 0f       	add	r20, r20
                  ( svit[TORQUER_3].switch_state << 2 ) |
    1dce:	80 91 ea 05 	lds	r24, 0x05EA
    1dd2:	54 e0       	ldi	r21, 0x04	; 4
    1dd4:	85 9f       	mul	r24, r21
    1dd6:	c0 01       	movw	r24, r0
    1dd8:	11 24       	eor	r1, r1
                  ( svit[RADIO_1].switch_state << 2 )    |
                  ( svit[RADIO_2].switch_state << 3 )    |
                  ( svit[FOG_15V].switch_state << 4 )    |
                  ( svit[FOG_5V].switch_state << 5  )    ;

  on_off_state2 = ( svit[TORQUER_1].switch_state << 0 )  |
    1dda:	48 2b       	or	r20, r24
    1ddc:	80 91 a2 05 	lds	r24, 0x05A2
    1de0:	48 2b       	or	r20, r24
                  ( svit[TORQUER_2].switch_state << 1 ) |
                  ( svit[TORQUER_3].switch_state << 2 ) |
                  ( svit[MAESTRO].switch_state << 3 );
    1de2:	e2 e1       	ldi	r30, 0x12	; 18
    1de4:	f5 e0       	ldi	r31, 0x05	; 5
    1de6:	80 81       	ld	r24, Z
    1de8:	a8 e0       	ldi	r26, 0x08	; 8
    1dea:	8a 9f       	mul	r24, r26
    1dec:	c0 01       	movw	r24, r0
    1dee:	11 24       	eor	r1, r1
                  ( svit[RADIO_1].switch_state << 2 )    |
                  ( svit[RADIO_2].switch_state << 3 )    |
                  ( svit[FOG_15V].switch_state << 4 )    |
                  ( svit[FOG_5V].switch_state << 5  )    ;

  on_off_state2 = ( svit[TORQUER_1].switch_state << 0 )  |
    1df0:	48 2b       	or	r20, r24
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
                  ( svit[STAR_TRACKER].switch_state << 1 ) |
    1df2:	20 91 62 03 	lds	r18, 0x0362
    1df6:	22 0f       	add	r18, r18
                  ( svit[FC_5V].switch_state << 2 )        |
    1df8:	80 91 86 03 	lds	r24, 0x0386
    1dfc:	b4 e0       	ldi	r27, 0x04	; 4
    1dfe:	8b 9f       	mul	r24, r27
    1e00:	c0 01       	movw	r24, r0
    1e02:	11 24       	eor	r1, r1
  uint8_t on_off_state1;
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
    1e04:	28 2b       	or	r18, r24
    1e06:	80 91 3e 03 	lds	r24, 0x033E
    1e0a:	28 2b       	or	r18, r24
                  ( svit[STAR_TRACKER].switch_state << 1 ) |
                  ( svit[FC_5V].switch_state << 2 )        |
                  ( svit[GPS_1].switch_state << 3 )        |
    1e0c:	80 91 ce 03 	lds	r24, 0x03CE
    1e10:	58 e0       	ldi	r21, 0x08	; 8
    1e12:	85 9f       	mul	r24, r21
    1e14:	c0 01       	movw	r24, r0
    1e16:	11 24       	eor	r1, r1
  uint8_t on_off_state1;
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
    1e18:	28 2b       	or	r18, r24
                  ( svit[STAR_TRACKER].switch_state << 1 ) |
                  ( svit[FC_5V].switch_state << 2 )        |
                  ( svit[GPS_1].switch_state << 3 )        |
                  ( svit[GPS_2].switch_state << 4 )        |
    1e1a:	80 91 f2 03 	lds	r24, 0x03F2
    1e1e:	a0 e1       	ldi	r26, 0x10	; 16
    1e20:	8a 9f       	mul	r24, r26
    1e22:	c0 01       	movw	r24, r0
    1e24:	11 24       	eor	r1, r1
  uint8_t on_off_state1;
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
    1e26:	28 2b       	or	r18, r24
                  ( svit[STAR_TRACKER].switch_state << 1 ) |
                  ( svit[FC_5V].switch_state << 2 )        |
                  ( svit[GPS_1].switch_state << 3 )        |
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
    1e28:	80 91 16 04 	lds	r24, 0x0416
    1e2c:	b0 e2       	ldi	r27, 0x20	; 32
    1e2e:	8b 9f       	mul	r24, r27
    1e30:	c0 01       	movw	r24, r0
    1e32:	11 24       	eor	r1, r1
  uint8_t on_off_state1;
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
    1e34:	28 2b       	or	r18, r24
                  ( svit[STAR_TRACKER].switch_state << 1 ) |
                  ( svit[FC_5V].switch_state << 2 )        |
                  ( svit[GPS_1].switch_state << 3 )        |
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
    1e36:	80 91 3a 04 	lds	r24, 0x043A
    1e3a:	50 e4       	ldi	r21, 0x40	; 64
    1e3c:	85 9f       	mul	r24, r21
    1e3e:	c0 01       	movw	r24, r0
    1e40:	11 24       	eor	r1, r1
  uint8_t on_off_state1;
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
    1e42:	28 2b       	or	r18, r24
                  ( svit[FC_5V].switch_state << 2 )        |
                  ( svit[GPS_1].switch_state << 3 )        |
                  ( svit[GPS_2].switch_state << 4 )        |
                  ( svit[CDH_IB].switch_state << 5 )       |
                  ( svit[HEATER_1].switch_state << 6 )     |
                  ( svit[HEATER_2].switch_state << 7 )     ;
    1e44:	80 91 5e 04 	lds	r24, 0x045E
    1e48:	a0 e8       	ldi	r26, 0x80	; 128
    1e4a:	8a 9f       	mul	r24, r26
    1e4c:	c0 01       	movw	r24, r0
    1e4e:	11 24       	eor	r1, r1
  uint8_t on_off_state1;
  uint8_t on_off_state2;
  uint8_t on_off_state3;
  uint8_t on_off_state4;

  on_off_state0 = ( svit[SPECTROMETER].switch_state << 0 ) |
    1e50:	28 2b       	or	r18, r24
  on_off_state2 = ( svit[TORQUER_1].switch_state << 0 )  |
                  ( svit[TORQUER_2].switch_state << 1 ) |
                  ( svit[TORQUER_3].switch_state << 2 ) |
                  ( svit[MAESTRO].switch_state << 3 );

  packet_payload[1] = on_off_state0;
    1e52:	af 81       	ldd	r26, Y+7	; 0x07
    1e54:	b8 85       	ldd	r27, Y+8	; 0x08
    1e56:	11 96       	adiw	r26, 0x01	; 1
    1e58:	2c 93       	st	X, r18
    1e5a:	11 97       	sbiw	r26, 0x01	; 1
  packet_payload[2] = on_off_state1;
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	3c 93       	st	X, r19
    1e60:	12 97       	sbiw	r26, 0x02	; 2
  packet_payload[3] = on_off_state2;
    1e62:	13 96       	adiw	r26, 0x03	; 3
    1e64:	4c 93       	st	X, r20
    1e66:	13 97       	sbiw	r26, 0x03	; 3
  packet_payload[4] = 0x99;
    1e68:	89 e9       	ldi	r24, 0x99	; 153
    1e6a:	14 96       	adiw	r26, 0x04	; 4
    1e6c:	8c 93       	st	X, r24
    1e6e:	14 97       	sbiw	r26, 0x04	; 4
  packet_payload[5] = svit[MAESTRO].switch_state;
    1e70:	80 81       	ld	r24, Z
    1e72:	15 96       	adiw	r26, 0x05	; 5
    1e74:	8c 93       	st	X, r24

  // voltage values (raw ADC output)
  packet_payload[6]  = SVIT_check_V_critical( svit[SPECTROMETER].name );
    1e76:	2c e3       	ldi	r18, 0x3C	; 60
    1e78:	62 2e       	mov	r6, r18
    1e7a:	23 e0       	ldi	r18, 0x03	; 3
    1e7c:	72 2e       	mov	r7, r18
    1e7e:	f3 01       	movw	r30, r6
    1e80:	80 81       	ld	r24, Z
    1e82:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1e86:	af 81       	ldd	r26, Y+7	; 0x07
    1e88:	b8 85       	ldd	r27, Y+8	; 0x08
    1e8a:	16 96       	adiw	r26, 0x06	; 6
    1e8c:	8c 93       	st	X, r24
  packet_payload[7]  = SVIT_check_V_critical( svit[STAR_TRACKER].name );
    1e8e:	30 e6       	ldi	r19, 0x60	; 96
    1e90:	83 2e       	mov	r8, r19
    1e92:	33 e0       	ldi	r19, 0x03	; 3
    1e94:	93 2e       	mov	r9, r19
    1e96:	f4 01       	movw	r30, r8
    1e98:	80 81       	ld	r24, Z
    1e9a:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1e9e:	af 81       	ldd	r26, Y+7	; 0x07
    1ea0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ea2:	17 96       	adiw	r26, 0x07	; 7
    1ea4:	8c 93       	st	X, r24
  packet_payload[8]  = SVIT_check_V_critical( svit[FC_5V].name );
    1ea6:	44 e8       	ldi	r20, 0x84	; 132
    1ea8:	a4 2e       	mov	r10, r20
    1eaa:	43 e0       	ldi	r20, 0x03	; 3
    1eac:	b4 2e       	mov	r11, r20
    1eae:	f5 01       	movw	r30, r10
    1eb0:	80 81       	ld	r24, Z
    1eb2:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1eb6:	af 81       	ldd	r26, Y+7	; 0x07
    1eb8:	b8 85       	ldd	r27, Y+8	; 0x08
    1eba:	18 96       	adiw	r26, 0x08	; 8
    1ebc:	8c 93       	st	X, r24
  packet_payload[9]  = SVIT_check_V_critical( svit[FC_3_3V].name );
    1ebe:	58 ea       	ldi	r21, 0xA8	; 168
    1ec0:	c5 2e       	mov	r12, r21
    1ec2:	53 e0       	ldi	r21, 0x03	; 3
    1ec4:	d5 2e       	mov	r13, r21
    1ec6:	f6 01       	movw	r30, r12
    1ec8:	80 81       	ld	r24, Z
    1eca:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1ece:	af 81       	ldd	r26, Y+7	; 0x07
    1ed0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ed2:	19 96       	adiw	r26, 0x09	; 9
    1ed4:	8c 93       	st	X, r24
  packet_payload[10] = SVIT_check_V_critical( svit[GPS_1].name );
    1ed6:	6c ec       	ldi	r22, 0xCC	; 204
    1ed8:	e6 2e       	mov	r14, r22
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	f6 2e       	mov	r15, r22
    1ede:	f7 01       	movw	r30, r14
    1ee0:	80 81       	ld	r24, Z
    1ee2:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1ee6:	af 81       	ldd	r26, Y+7	; 0x07
    1ee8:	b8 85       	ldd	r27, Y+8	; 0x08
    1eea:	1a 96       	adiw	r26, 0x0a	; 10
    1eec:	8c 93       	st	X, r24
  packet_payload[11] = SVIT_check_V_critical( svit[CDH_IB].name );
    1eee:	04 e1       	ldi	r16, 0x14	; 20
    1ef0:	14 e0       	ldi	r17, 0x04	; 4
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 81       	ld	r24, Z
    1ef6:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1efa:	af 81       	ldd	r26, Y+7	; 0x07
    1efc:	b8 85       	ldd	r27, Y+8	; 0x08
    1efe:	1b 96       	adiw	r26, 0x0b	; 11
    1f00:	8c 93       	st	X, r24
  packet_payload[12] = SVIT_check_V_critical( svit[HEATER_1].name );
    1f02:	e8 e3       	ldi	r30, 0x38	; 56
    1f04:	f4 e0       	ldi	r31, 0x04	; 4
    1f06:	80 81       	ld	r24, Z
    1f08:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f0c:	af 81       	ldd	r26, Y+7	; 0x07
    1f0e:	b8 85       	ldd	r27, Y+8	; 0x08
    1f10:	1c 96       	adiw	r26, 0x0c	; 12
    1f12:	8c 93       	st	X, r24
  packet_payload[13] = SVIT_check_V_critical( svit[HEATER_2].name );
    1f14:	7c e5       	ldi	r23, 0x5C	; 92
    1f16:	47 2e       	mov	r4, r23
    1f18:	74 e0       	ldi	r23, 0x04	; 4
    1f1a:	57 2e       	mov	r5, r23
    1f1c:	f2 01       	movw	r30, r4
    1f1e:	80 81       	ld	r24, Z
    1f20:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f24:	af 81       	ldd	r26, Y+7	; 0x07
    1f26:	b8 85       	ldd	r27, Y+8	; 0x08
    1f28:	1d 96       	adiw	r26, 0x0d	; 13
    1f2a:	8c 93       	st	X, r24
  packet_payload[14] = SVIT_check_V_critical( svit[CMG].name );
    1f2c:	e0 e8       	ldi	r30, 0x80	; 128
    1f2e:	2e 2e       	mov	r2, r30
    1f30:	e4 e0       	ldi	r30, 0x04	; 4
    1f32:	3e 2e       	mov	r3, r30
    1f34:	f1 01       	movw	r30, r2
    1f36:	80 81       	ld	r24, Z
    1f38:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f3c:	af 81       	ldd	r26, Y+7	; 0x07
    1f3e:	b8 85       	ldd	r27, Y+8	; 0x08
    1f40:	1e 96       	adiw	r26, 0x0e	; 14
    1f42:	8c 93       	st	X, r24
  packet_payload[15] = SVIT_check_V_critical( svit[SUN_SENSOR].name );
    1f44:	24 ea       	ldi	r18, 0xA4	; 164
    1f46:	34 e0       	ldi	r19, 0x04	; 4
    1f48:	f9 01       	movw	r30, r18
    1f4a:	80 81       	ld	r24, Z
    1f4c:	29 83       	std	Y+1, r18	; 0x01
    1f4e:	3a 83       	std	Y+2, r19	; 0x02
    1f50:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f54:	af 81       	ldd	r26, Y+7	; 0x07
    1f56:	b8 85       	ldd	r27, Y+8	; 0x08
    1f58:	1f 96       	adiw	r26, 0x0f	; 15
    1f5a:	8c 93       	st	X, r24
  packet_payload[16] = SVIT_check_V_critical( svit[RADIO_1].name );
    1f5c:	48 ec       	ldi	r20, 0xC8	; 200
    1f5e:	54 e0       	ldi	r21, 0x04	; 4
    1f60:	fa 01       	movw	r30, r20
    1f62:	80 81       	ld	r24, Z
    1f64:	4b 83       	std	Y+3, r20	; 0x03
    1f66:	5c 83       	std	Y+4, r21	; 0x04
    1f68:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f6c:	af 81       	ldd	r26, Y+7	; 0x07
    1f6e:	b8 85       	ldd	r27, Y+8	; 0x08
    1f70:	50 96       	adiw	r26, 0x10	; 16
    1f72:	8c 93       	st	X, r24
  packet_payload[17] = SVIT_check_V_critical( svit[RADIO_2].name );
    1f74:	6c ee       	ldi	r22, 0xEC	; 236
    1f76:	74 e0       	ldi	r23, 0x04	; 4
    1f78:	fb 01       	movw	r30, r22
    1f7a:	80 81       	ld	r24, Z
    1f7c:	6d 83       	std	Y+5, r22	; 0x05
    1f7e:	7e 83       	std	Y+6, r23	; 0x06
    1f80:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f84:	af 81       	ldd	r26, Y+7	; 0x07
    1f86:	b8 85       	ldd	r27, Y+8	; 0x08
    1f88:	51 96       	adiw	r26, 0x11	; 17
    1f8a:	8c 93       	st	X, r24
  packet_payload[18] = SVIT_check_V_critical( svit[FOG_15V].name );
    1f8c:	e8 e5       	ldi	r30, 0x58	; 88
    1f8e:	f5 e0       	ldi	r31, 0x05	; 5
    1f90:	80 81       	ld	r24, Z
    1f92:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1f96:	af 81       	ldd	r26, Y+7	; 0x07
    1f98:	b8 85       	ldd	r27, Y+8	; 0x08
    1f9a:	52 96       	adiw	r26, 0x12	; 18
    1f9c:	8c 93       	st	X, r24
  packet_payload[19] = SVIT_check_V_critical( svit[FOG_5V].name );
    1f9e:	ec e7       	ldi	r30, 0x7C	; 124
    1fa0:	f5 e0       	ldi	r31, 0x05	; 5
    1fa2:	80 81       	ld	r24, Z
    1fa4:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1fa8:	af 81       	ldd	r26, Y+7	; 0x07
    1faa:	b8 85       	ldd	r27, Y+8	; 0x08
    1fac:	53 96       	adiw	r26, 0x13	; 19
    1fae:	8c 93       	st	X, r24
  packet_payload[20] = SVIT_check_V_critical( svit[TORQUER_1].name );
    1fb0:	e0 ea       	ldi	r30, 0xA0	; 160
    1fb2:	f5 e0       	ldi	r31, 0x05	; 5
    1fb4:	80 81       	ld	r24, Z
    1fb6:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1fba:	af 81       	ldd	r26, Y+7	; 0x07
    1fbc:	b8 85       	ldd	r27, Y+8	; 0x08
    1fbe:	54 96       	adiw	r26, 0x14	; 20
    1fc0:	8c 93       	st	X, r24
  packet_payload[21] = SVIT_check_V_critical( svit[TORQUER_2].name );
    1fc2:	e4 ec       	ldi	r30, 0xC4	; 196
    1fc4:	f5 e0       	ldi	r31, 0x05	; 5
    1fc6:	80 81       	ld	r24, Z
    1fc8:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1fcc:	af 81       	ldd	r26, Y+7	; 0x07
    1fce:	b8 85       	ldd	r27, Y+8	; 0x08
    1fd0:	55 96       	adiw	r26, 0x15	; 21
    1fd2:	8c 93       	st	X, r24
  packet_payload[22] = SVIT_check_V_critical( svit[TORQUER_3].name );
    1fd4:	e8 ee       	ldi	r30, 0xE8	; 232
    1fd6:	f5 e0       	ldi	r31, 0x05	; 5
    1fd8:	80 81       	ld	r24, Z
    1fda:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1fde:	af 81       	ldd	r26, Y+7	; 0x07
    1fe0:	b8 85       	ldd	r27, Y+8	; 0x08
    1fe2:	56 96       	adiw	r26, 0x16	; 22
    1fe4:	8c 93       	st	X, r24
  packet_payload[23] = SVIT_check_V_critical( svit[BATTERY_1].name );
    1fe6:	ec e0       	ldi	r30, 0x0C	; 12
    1fe8:	f6 e0       	ldi	r31, 0x06	; 6
    1fea:	80 81       	ld	r24, Z
    1fec:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    1ff0:	af 81       	ldd	r26, Y+7	; 0x07
    1ff2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ff4:	57 96       	adiw	r26, 0x17	; 23
    1ff6:	8c 93       	st	X, r24
  packet_payload[24] = SVIT_check_V_critical( svit[BATTERY_2].name );
    1ff8:	e0 e3       	ldi	r30, 0x30	; 48
    1ffa:	f6 e0       	ldi	r31, 0x06	; 6
    1ffc:	80 81       	ld	r24, Z
    1ffe:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    2002:	af 81       	ldd	r26, Y+7	; 0x07
    2004:	b8 85       	ldd	r27, Y+8	; 0x08
    2006:	58 96       	adiw	r26, 0x18	; 24
    2008:	8c 93       	st	X, r24
  packet_payload[25] = SVIT_check_V_critical( svit[SOLAR_FULL].name );
    200a:	e4 e5       	ldi	r30, 0x54	; 84
    200c:	f6 e0       	ldi	r31, 0x06	; 6
    200e:	80 81       	ld	r24, Z
    2010:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    2014:	af 81       	ldd	r26, Y+7	; 0x07
    2016:	b8 85       	ldd	r27, Y+8	; 0x08
    2018:	59 96       	adiw	r26, 0x19	; 25
    201a:	8c 93       	st	X, r24
  packet_payload[26] = SVIT_check_V_critical( svit[SOLAR_1].name );
    201c:	e8 e7       	ldi	r30, 0x78	; 120
    201e:	f6 e0       	ldi	r31, 0x06	; 6
    2020:	80 81       	ld	r24, Z
    2022:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    2026:	af 81       	ldd	r26, Y+7	; 0x07
    2028:	b8 85       	ldd	r27, Y+8	; 0x08
    202a:	5a 96       	adiw	r26, 0x1a	; 26
    202c:	8c 93       	st	X, r24
  packet_payload[27] = SVIT_check_V_critical( svit[SOLAR_2].name );
    202e:	ec e9       	ldi	r30, 0x9C	; 156
    2030:	f6 e0       	ldi	r31, 0x06	; 6
    2032:	80 81       	ld	r24, Z
    2034:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    2038:	af 81       	ldd	r26, Y+7	; 0x07
    203a:	b8 85       	ldd	r27, Y+8	; 0x08
    203c:	5b 96       	adiw	r26, 0x1b	; 27
    203e:	8c 93       	st	X, r24
  packet_payload[28] = SVIT_check_V_critical( svit[SOLAR_3].name );
    2040:	e0 ec       	ldi	r30, 0xC0	; 192
    2042:	f6 e0       	ldi	r31, 0x06	; 6
    2044:	80 81       	ld	r24, Z
    2046:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    204a:	af 81       	ldd	r26, Y+7	; 0x07
    204c:	b8 85       	ldd	r27, Y+8	; 0x08
    204e:	5c 96       	adiw	r26, 0x1c	; 28
    2050:	8c 93       	st	X, r24
  packet_payload[29] = SVIT_check_V_critical( svit[SOLAR_4].name );
    2052:	e4 ee       	ldi	r30, 0xE4	; 228
    2054:	f6 e0       	ldi	r31, 0x06	; 6
    2056:	80 81       	ld	r24, Z
    2058:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    205c:	af 81       	ldd	r26, Y+7	; 0x07
    205e:	b8 85       	ldd	r27, Y+8	; 0x08
    2060:	5d 96       	adiw	r26, 0x1d	; 29
    2062:	8c 93       	st	X, r24
  packet_payload[30] = SVIT_check_V_critical( svit[SOLAR_5].name );
    2064:	e8 e0       	ldi	r30, 0x08	; 8
    2066:	f7 e0       	ldi	r31, 0x07	; 7
    2068:	80 81       	ld	r24, Z
    206a:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    206e:	af 81       	ldd	r26, Y+7	; 0x07
    2070:	b8 85       	ldd	r27, Y+8	; 0x08
    2072:	5e 96       	adiw	r26, 0x1e	; 30
    2074:	8c 93       	st	X, r24
  packet_payload[31] = SVIT_check_V_critical( svit[SOLAR_6].name );
    2076:	ec e2       	ldi	r30, 0x2C	; 44
    2078:	f7 e0       	ldi	r31, 0x07	; 7
    207a:	80 81       	ld	r24, Z
    207c:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    2080:	af 81       	ldd	r26, Y+7	; 0x07
    2082:	b8 85       	ldd	r27, Y+8	; 0x08
    2084:	5f 96       	adiw	r26, 0x1f	; 31
    2086:	8c 93       	st	X, r24
  packet_payload[32] = SVIT_check_V_critical( svit[SOLAR_7].name );
    2088:	e0 e5       	ldi	r30, 0x50	; 80
    208a:	f7 e0       	ldi	r31, 0x07	; 7
    208c:	80 81       	ld	r24, Z
    208e:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    2092:	af 81       	ldd	r26, Y+7	; 0x07
    2094:	b8 85       	ldd	r27, Y+8	; 0x08
    2096:	90 96       	adiw	r26, 0x20	; 32
    2098:	8c 93       	st	X, r24
  packet_payload[33] = SVIT_check_V_critical( svit[SOLAR_8].name );
    209a:	e4 e7       	ldi	r30, 0x74	; 116
    209c:	f7 e0       	ldi	r31, 0x07	; 7
    209e:	80 81       	ld	r24, Z
    20a0:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    20a4:	af 81       	ldd	r26, Y+7	; 0x07
    20a6:	b8 85       	ldd	r27, Y+8	; 0x08
    20a8:	91 96       	adiw	r26, 0x21	; 33
    20aa:	8c 93       	st	X, r24
  packet_payload[34] = SVIT_check_V_critical( svit[SOLAR_9].name );
    20ac:	e8 e9       	ldi	r30, 0x98	; 152
    20ae:	f7 e0       	ldi	r31, 0x07	; 7
    20b0:	80 81       	ld	r24, Z
    20b2:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    20b6:	af 81       	ldd	r26, Y+7	; 0x07
    20b8:	b8 85       	ldd	r27, Y+8	; 0x08
    20ba:	92 96       	adiw	r26, 0x22	; 34
    20bc:	8c 93       	st	X, r24
  packet_payload[35] = SVIT_check_V_critical( svit[SOLAR_10].name );
    20be:	ec eb       	ldi	r30, 0xBC	; 188
    20c0:	f7 e0       	ldi	r31, 0x07	; 7
    20c2:	80 81       	ld	r24, Z
    20c4:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    20c8:	af 81       	ldd	r26, Y+7	; 0x07
    20ca:	b8 85       	ldd	r27, Y+8	; 0x08
    20cc:	93 96       	adiw	r26, 0x23	; 35
    20ce:	8c 93       	st	X, r24
  packet_payload[36] = SVIT_check_V_critical( svit[SOLAR_11].name );
    20d0:	e0 ee       	ldi	r30, 0xE0	; 224
    20d2:	f7 e0       	ldi	r31, 0x07	; 7
    20d4:	80 81       	ld	r24, Z
    20d6:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    20da:	af 81       	ldd	r26, Y+7	; 0x07
    20dc:	b8 85       	ldd	r27, Y+8	; 0x08
    20de:	94 96       	adiw	r26, 0x24	; 36
    20e0:	8c 93       	st	X, r24
  packet_payload[37] = SVIT_check_V_critical( svit[SOLAR_12].name );
    20e2:	e4 e0       	ldi	r30, 0x04	; 4
    20e4:	f8 e0       	ldi	r31, 0x08	; 8
    20e6:	80 81       	ld	r24, Z
    20e8:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    20ec:	af 81       	ldd	r26, Y+7	; 0x07
    20ee:	b8 85       	ldd	r27, Y+8	; 0x08
    20f0:	95 96       	adiw	r26, 0x25	; 37
    20f2:	8c 93       	st	X, r24
  packet_payload[38] = SVIT_check_V_critical( svit[POWER_BOARD].name );
    20f4:	80 91 28 08 	lds	r24, 0x0828
    20f8:	0e 94 27 0a 	call	0x144e	; 0x144e <SVIT_check_V_critical>
    20fc:	ef 81       	ldd	r30, Y+7	; 0x07
    20fe:	f8 85       	ldd	r31, Y+8	; 0x08
    2100:	86 a3       	std	Z+38, r24	; 0x26
  //uint8_t voltage_error1;
  //uint8_t voltage_error2;
  //uint8_t voltage_error3;
  //uint8_t voltage_error4;
 
  packet_payload[39] = 0;
    2102:	17 a2       	std	Z+39, r1	; 0x27
  packet_payload[40] = 0;
    2104:	10 a6       	std	Z+40, r1	; 0x28
  packet_payload[41] = 0;
    2106:	11 a6       	std	Z+41, r1	; 0x29
  packet_payload[42] = 0;
    2108:	12 a6       	std	Z+42, r1	; 0x2a
  packet_payload[43] = 0;
    210a:	13 a6       	std	Z+43, r1	; 0x2b

  // current values (raw ADC output)
  packet_payload[44] = SVIT_check_I_critical( svit[SPECTROMETER].name );
    210c:	d3 01       	movw	r26, r6
    210e:	8c 91       	ld	r24, X
    2110:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2114:	ef 81       	ldd	r30, Y+7	; 0x07
    2116:	f8 85       	ldd	r31, Y+8	; 0x08
    2118:	84 a7       	std	Z+44, r24	; 0x2c
  packet_payload[45] = SVIT_check_I_critical( svit[STAR_TRACKER].name );
    211a:	d4 01       	movw	r26, r8
    211c:	8c 91       	ld	r24, X
    211e:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2122:	ef 81       	ldd	r30, Y+7	; 0x07
    2124:	f8 85       	ldd	r31, Y+8	; 0x08
    2126:	85 a7       	std	Z+45, r24	; 0x2d
  packet_payload[46] = SVIT_check_I_critical( svit[FC_5V].name );
    2128:	d5 01       	movw	r26, r10
    212a:	8c 91       	ld	r24, X
    212c:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2130:	ef 81       	ldd	r30, Y+7	; 0x07
    2132:	f8 85       	ldd	r31, Y+8	; 0x08
    2134:	86 a7       	std	Z+46, r24	; 0x2e
  packet_payload[47] = SVIT_check_I_critical( svit[FC_3_3V].name );
    2136:	d6 01       	movw	r26, r12
    2138:	8c 91       	ld	r24, X
    213a:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    213e:	ef 81       	ldd	r30, Y+7	; 0x07
    2140:	f8 85       	ldd	r31, Y+8	; 0x08
    2142:	87 a7       	std	Z+47, r24	; 0x2f
  packet_payload[48] = SVIT_check_I_critical( svit[GPS_1].name );
    2144:	d7 01       	movw	r26, r14
    2146:	8c 91       	ld	r24, X
    2148:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    214c:	ef 81       	ldd	r30, Y+7	; 0x07
    214e:	f8 85       	ldd	r31, Y+8	; 0x08
    2150:	80 ab       	std	Z+48, r24	; 0x30
  packet_payload[49] = SVIT_check_I_critical( svit[CDH_IB].name );
    2152:	d8 01       	movw	r26, r16
    2154:	8c 91       	ld	r24, X
    2156:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    215a:	ef 81       	ldd	r30, Y+7	; 0x07
    215c:	f8 85       	ldd	r31, Y+8	; 0x08
    215e:	81 ab       	std	Z+49, r24	; 0x31
  packet_payload[50] = SVIT_check_I_critical( svit[HEATER_1].name );
    2160:	a8 e3       	ldi	r26, 0x38	; 56
    2162:	b4 e0       	ldi	r27, 0x04	; 4
    2164:	8c 91       	ld	r24, X
    2166:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    216a:	ef 81       	ldd	r30, Y+7	; 0x07
    216c:	f8 85       	ldd	r31, Y+8	; 0x08
    216e:	82 ab       	std	Z+50, r24	; 0x32
  packet_payload[51] = SVIT_check_I_critical( svit[HEATER_2].name );
    2170:	d2 01       	movw	r26, r4
    2172:	8c 91       	ld	r24, X
    2174:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2178:	ef 81       	ldd	r30, Y+7	; 0x07
    217a:	f8 85       	ldd	r31, Y+8	; 0x08
    217c:	83 ab       	std	Z+51, r24	; 0x33
  packet_payload[52] = SVIT_check_I_critical( svit[CMG].name );
    217e:	d1 01       	movw	r26, r2
    2180:	8c 91       	ld	r24, X
    2182:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2186:	ef 81       	ldd	r30, Y+7	; 0x07
    2188:	f8 85       	ldd	r31, Y+8	; 0x08
    218a:	84 ab       	std	Z+52, r24	; 0x34
  packet_payload[53] = SVIT_check_I_critical( svit[SUN_SENSOR].name );
    218c:	29 81       	ldd	r18, Y+1	; 0x01
    218e:	3a 81       	ldd	r19, Y+2	; 0x02
    2190:	d9 01       	movw	r26, r18
    2192:	8c 91       	ld	r24, X
    2194:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2198:	ef 81       	ldd	r30, Y+7	; 0x07
    219a:	f8 85       	ldd	r31, Y+8	; 0x08
    219c:	85 ab       	std	Z+53, r24	; 0x35
  packet_payload[54] = SVIT_check_I_critical( svit[RADIO_1].name );
    219e:	4b 81       	ldd	r20, Y+3	; 0x03
    21a0:	5c 81       	ldd	r21, Y+4	; 0x04
    21a2:	da 01       	movw	r26, r20
    21a4:	8c 91       	ld	r24, X
    21a6:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    21aa:	ef 81       	ldd	r30, Y+7	; 0x07
    21ac:	f8 85       	ldd	r31, Y+8	; 0x08
    21ae:	86 ab       	std	Z+54, r24	; 0x36
  packet_payload[55] = SVIT_check_I_critical( svit[RADIO_2].name );
    21b0:	6d 81       	ldd	r22, Y+5	; 0x05
    21b2:	7e 81       	ldd	r23, Y+6	; 0x06
    21b4:	db 01       	movw	r26, r22
    21b6:	8c 91       	ld	r24, X
    21b8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    21bc:	ef 81       	ldd	r30, Y+7	; 0x07
    21be:	f8 85       	ldd	r31, Y+8	; 0x08
    21c0:	87 ab       	std	Z+55, r24	; 0x37
  packet_payload[56] = SVIT_check_I_critical( svit[FOG_15V].name );
    21c2:	a8 e5       	ldi	r26, 0x58	; 88
    21c4:	b5 e0       	ldi	r27, 0x05	; 5
    21c6:	8c 91       	ld	r24, X
    21c8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    21cc:	ef 81       	ldd	r30, Y+7	; 0x07
    21ce:	f8 85       	ldd	r31, Y+8	; 0x08
    21d0:	80 af       	std	Z+56, r24	; 0x38
  packet_payload[57] = SVIT_check_I_critical( svit[FOG_5V].name );
    21d2:	ac e7       	ldi	r26, 0x7C	; 124
    21d4:	b5 e0       	ldi	r27, 0x05	; 5
    21d6:	8c 91       	ld	r24, X
    21d8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    21dc:	ef 81       	ldd	r30, Y+7	; 0x07
    21de:	f8 85       	ldd	r31, Y+8	; 0x08
    21e0:	81 af       	std	Z+57, r24	; 0x39
  packet_payload[58] = SVIT_check_I_critical( svit[TORQUER_1].name );
    21e2:	a0 ea       	ldi	r26, 0xA0	; 160
    21e4:	b5 e0       	ldi	r27, 0x05	; 5
    21e6:	8c 91       	ld	r24, X
    21e8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    21ec:	ef 81       	ldd	r30, Y+7	; 0x07
    21ee:	f8 85       	ldd	r31, Y+8	; 0x08
    21f0:	82 af       	std	Z+58, r24	; 0x3a
  packet_payload[59] = SVIT_check_I_critical( svit[TORQUER_2].name );
    21f2:	a4 ec       	ldi	r26, 0xC4	; 196
    21f4:	b5 e0       	ldi	r27, 0x05	; 5
    21f6:	8c 91       	ld	r24, X
    21f8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    21fc:	ef 81       	ldd	r30, Y+7	; 0x07
    21fe:	f8 85       	ldd	r31, Y+8	; 0x08
    2200:	83 af       	std	Z+59, r24	; 0x3b
  packet_payload[60] = SVIT_check_I_critical( svit[TORQUER_3].name );
    2202:	a8 ee       	ldi	r26, 0xE8	; 232
    2204:	b5 e0       	ldi	r27, 0x05	; 5
    2206:	8c 91       	ld	r24, X
    2208:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    220c:	ef 81       	ldd	r30, Y+7	; 0x07
    220e:	f8 85       	ldd	r31, Y+8	; 0x08
    2210:	84 af       	std	Z+60, r24	; 0x3c
  packet_payload[61] = SVIT_check_I_critical( svit[BATTERY_1].name );
    2212:	ac e0       	ldi	r26, 0x0C	; 12
    2214:	b6 e0       	ldi	r27, 0x06	; 6
    2216:	8c 91       	ld	r24, X
    2218:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    221c:	ef 81       	ldd	r30, Y+7	; 0x07
    221e:	f8 85       	ldd	r31, Y+8	; 0x08
    2220:	85 af       	std	Z+61, r24	; 0x3d
  packet_payload[62] = SVIT_check_I_critical( svit[BATTERY_2].name );
    2222:	a0 e3       	ldi	r26, 0x30	; 48
    2224:	b6 e0       	ldi	r27, 0x06	; 6
    2226:	8c 91       	ld	r24, X
    2228:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    222c:	ef 81       	ldd	r30, Y+7	; 0x07
    222e:	f8 85       	ldd	r31, Y+8	; 0x08
    2230:	86 af       	std	Z+62, r24	; 0x3e
  packet_payload[63] = SVIT_check_I_critical( svit[SOLAR_FULL].name );
    2232:	a4 e5       	ldi	r26, 0x54	; 84
    2234:	b6 e0       	ldi	r27, 0x06	; 6
    2236:	8c 91       	ld	r24, X
    2238:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    223c:	ef 81       	ldd	r30, Y+7	; 0x07
    223e:	f8 85       	ldd	r31, Y+8	; 0x08
    2240:	87 af       	std	Z+63, r24	; 0x3f
  packet_payload[64] = SVIT_check_I_critical( svit[SOLAR_1].name );
    2242:	a8 e7       	ldi	r26, 0x78	; 120
    2244:	b6 e0       	ldi	r27, 0x06	; 6
    2246:	8c 91       	ld	r24, X
    2248:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    224c:	ef 81       	ldd	r30, Y+7	; 0x07
    224e:	f8 85       	ldd	r31, Y+8	; 0x08
    2250:	e0 5c       	subi	r30, 0xC0	; 192
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 83       	st	Z, r24
  packet_payload[65] = SVIT_check_I_critical( svit[SOLAR_2].name );
    2256:	ec e9       	ldi	r30, 0x9C	; 156
    2258:	f6 e0       	ldi	r31, 0x06	; 6
    225a:	80 81       	ld	r24, Z
    225c:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2260:	ef 81       	ldd	r30, Y+7	; 0x07
    2262:	f8 85       	ldd	r31, Y+8	; 0x08
    2264:	ef 5b       	subi	r30, 0xBF	; 191
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 83       	st	Z, r24
  packet_payload[66] = SVIT_check_I_critical( svit[SOLAR_3].name );
    226a:	a0 ec       	ldi	r26, 0xC0	; 192
    226c:	b6 e0       	ldi	r27, 0x06	; 6
    226e:	8c 91       	ld	r24, X
    2270:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2274:	ef 81       	ldd	r30, Y+7	; 0x07
    2276:	f8 85       	ldd	r31, Y+8	; 0x08
    2278:	ee 5b       	subi	r30, 0xBE	; 190
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 83       	st	Z, r24
  packet_payload[67] = SVIT_check_I_critical( svit[SOLAR_4].name );
    227e:	e4 ee       	ldi	r30, 0xE4	; 228
    2280:	f6 e0       	ldi	r31, 0x06	; 6
    2282:	80 81       	ld	r24, Z
    2284:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2288:	ef 81       	ldd	r30, Y+7	; 0x07
    228a:	f8 85       	ldd	r31, Y+8	; 0x08
    228c:	ed 5b       	subi	r30, 0xBD	; 189
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 83       	st	Z, r24
  packet_payload[68] = SVIT_check_I_critical( svit[SOLAR_5].name );
    2292:	a8 e0       	ldi	r26, 0x08	; 8
    2294:	b7 e0       	ldi	r27, 0x07	; 7
    2296:	8c 91       	ld	r24, X
    2298:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    229c:	ef 81       	ldd	r30, Y+7	; 0x07
    229e:	f8 85       	ldd	r31, Y+8	; 0x08
    22a0:	ec 5b       	subi	r30, 0xBC	; 188
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 83       	st	Z, r24
  packet_payload[69] = SVIT_check_I_critical( svit[SOLAR_6].name );
    22a6:	ec e2       	ldi	r30, 0x2C	; 44
    22a8:	f7 e0       	ldi	r31, 0x07	; 7
    22aa:	80 81       	ld	r24, Z
    22ac:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    22b0:	ef 81       	ldd	r30, Y+7	; 0x07
    22b2:	f8 85       	ldd	r31, Y+8	; 0x08
    22b4:	eb 5b       	subi	r30, 0xBB	; 187
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 83       	st	Z, r24
  packet_payload[70] = SVIT_check_I_critical( svit[SOLAR_7].name );
    22ba:	a0 e5       	ldi	r26, 0x50	; 80
    22bc:	b7 e0       	ldi	r27, 0x07	; 7
    22be:	8c 91       	ld	r24, X
    22c0:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    22c4:	ef 81       	ldd	r30, Y+7	; 0x07
    22c6:	f8 85       	ldd	r31, Y+8	; 0x08
    22c8:	ea 5b       	subi	r30, 0xBA	; 186
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 83       	st	Z, r24
  packet_payload[71] = SVIT_check_I_critical( svit[SOLAR_8].name );
    22ce:	e4 e7       	ldi	r30, 0x74	; 116
    22d0:	f7 e0       	ldi	r31, 0x07	; 7
    22d2:	80 81       	ld	r24, Z
    22d4:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    22d8:	ef 81       	ldd	r30, Y+7	; 0x07
    22da:	f8 85       	ldd	r31, Y+8	; 0x08
    22dc:	e9 5b       	subi	r30, 0xB9	; 185
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 83       	st	Z, r24
  packet_payload[72] = SVIT_check_I_critical( svit[SOLAR_9].name );
    22e2:	a8 e9       	ldi	r26, 0x98	; 152
    22e4:	b7 e0       	ldi	r27, 0x07	; 7
    22e6:	8c 91       	ld	r24, X
    22e8:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    22ec:	ef 81       	ldd	r30, Y+7	; 0x07
    22ee:	f8 85       	ldd	r31, Y+8	; 0x08
    22f0:	e8 5b       	subi	r30, 0xB8	; 184
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 83       	st	Z, r24
  packet_payload[73] = SVIT_check_I_critical( svit[SOLAR_10].name );
    22f6:	ec eb       	ldi	r30, 0xBC	; 188
    22f8:	f7 e0       	ldi	r31, 0x07	; 7
    22fa:	80 81       	ld	r24, Z
    22fc:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2300:	ef 81       	ldd	r30, Y+7	; 0x07
    2302:	f8 85       	ldd	r31, Y+8	; 0x08
    2304:	e7 5b       	subi	r30, 0xB7	; 183
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 83       	st	Z, r24
  packet_payload[74] = SVIT_check_I_critical( svit[SOLAR_11].name );
    230a:	a0 ee       	ldi	r26, 0xE0	; 224
    230c:	b7 e0       	ldi	r27, 0x07	; 7
    230e:	8c 91       	ld	r24, X
    2310:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2314:	ef 81       	ldd	r30, Y+7	; 0x07
    2316:	f8 85       	ldd	r31, Y+8	; 0x08
    2318:	e6 5b       	subi	r30, 0xB6	; 182
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 83       	st	Z, r24
  packet_payload[75] = SVIT_check_I_critical( svit[SOLAR_12].name );
    231e:	e4 e0       	ldi	r30, 0x04	; 4
    2320:	f8 e0       	ldi	r31, 0x08	; 8
    2322:	80 81       	ld	r24, Z
    2324:	0e 94 18 0a 	call	0x1430	; 0x1430 <SVIT_check_I_critical>
    2328:	ef 81       	ldd	r30, Y+7	; 0x07
    232a:	f8 85       	ldd	r31, Y+8	; 0x08
    232c:	e5 5b       	subi	r30, 0xB5	; 181
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 83       	st	Z, r24
  packet_payload[76] = 0xFF;//SVIT_check_I_critical( svit[POWER_BOARD].name );
    2332:	ef 81       	ldd	r30, Y+7	; 0x07
    2334:	f8 85       	ldd	r31, Y+8	; 0x08
    2336:	e4 5b       	subi	r30, 0xB4	; 180
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	80 83       	st	Z, r24
  //uint8_t current_error1;
  //uint8_t current_error2;
  //uint8_t current_error3;
  //uint8_t current_error4;

  packet_payload[77] = batt1_voltage;//V_ack_change();
    233e:	ef 81       	ldd	r30, Y+7	; 0x07
    2340:	f8 85       	ldd	r31, Y+8	; 0x08
    2342:	e3 5b       	subi	r30, 0xB3	; 179
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	90 91 90 0a 	lds	r25, 0x0A90
    234a:	90 83       	st	Z, r25
  packet_payload[78] = soc;//soc;// I_ack_change();
    234c:	ef 81       	ldd	r30, Y+7	; 0x07
    234e:	f8 85       	ldd	r31, Y+8	; 0x08
    2350:	e2 5b       	subi	r30, 0xB2	; 178
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	90 91 cf 10 	lds	r25, 0x10CF
    2358:	90 83       	st	Z, r25
  packet_payload[79] = 0x00;//low >> 6;//safe_mode;
    235a:	ef 81       	ldd	r30, Y+7	; 0x07
    235c:	f8 85       	ldd	r31, Y+8	; 0x08
    235e:	e1 5b       	subi	r30, 0xB1	; 177
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	10 82       	st	Z, r1
  packet_payload[80] = 0x00;//charging;
    2364:	ef 81       	ldd	r30, Y+7	; 0x07
    2366:	f8 85       	ldd	r31, Y+8	; 0x08
    2368:	e0 5b       	subi	r30, 0xB0	; 176
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	10 82       	st	Z, r1
  packet_payload[81] = 0x00;//chargeforward;
    236e:	ef 81       	ldd	r30, Y+7	; 0x07
    2370:	f8 85       	ldd	r31, Y+8	; 0x08
    2372:	ef 5a       	subi	r30, 0xAF	; 175
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	10 82       	st	Z, r1

  // temperature values (raw ADC output)
  packet_payload[82] = debug;//average_samples( svit[STAR_TRACKER].T_samples );
    2378:	ef 81       	ldd	r30, Y+7	; 0x07
    237a:	f8 85       	ldd	r31, Y+8	; 0x08
    237c:	ee 5a       	subi	r30, 0xAE	; 174
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	90 91 5b 08 	lds	r25, 0x085B
    2384:	90 83       	st	Z, r25
  packet_payload[83] = 0xFF;//average_samples( svit[BATTERY_1].T_samples );
    2386:	ef 81       	ldd	r30, Y+7	; 0x07
    2388:	f8 85       	ldd	r31, Y+8	; 0x08
    238a:	ed 5a       	subi	r30, 0xAD	; 173
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 83       	st	Z, r24
  packet_payload[84] = average_samples( svit[BATTERY_2].T_samples );
    2390:	88 e4       	ldi	r24, 0x48	; 72
    2392:	96 e0       	ldi	r25, 0x06	; 6
    2394:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    2398:	ef 81       	ldd	r30, Y+7	; 0x07
    239a:	f8 85       	ldd	r31, Y+8	; 0x08
    239c:	ec 5a       	subi	r30, 0xAC	; 172
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 83       	st	Z, r24
  packet_payload[85] = average_samples( svit[SOLAR_1].T_samples );
    23a2:	80 e9       	ldi	r24, 0x90	; 144
    23a4:	96 e0       	ldi	r25, 0x06	; 6
    23a6:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    23aa:	ef 81       	ldd	r30, Y+7	; 0x07
    23ac:	f8 85       	ldd	r31, Y+8	; 0x08
    23ae:	eb 5a       	subi	r30, 0xAB	; 171
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 83       	st	Z, r24
  packet_payload[86] = average_samples( svit[SOLAR_2].T_samples );
    23b4:	84 eb       	ldi	r24, 0xB4	; 180
    23b6:	96 e0       	ldi	r25, 0x06	; 6
    23b8:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    23bc:	ef 81       	ldd	r30, Y+7	; 0x07
    23be:	f8 85       	ldd	r31, Y+8	; 0x08
    23c0:	ea 5a       	subi	r30, 0xAA	; 170
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 83       	st	Z, r24
  packet_payload[87] = average_samples( svit[SOLAR_3].T_samples );
    23c6:	88 ed       	ldi	r24, 0xD8	; 216
    23c8:	96 e0       	ldi	r25, 0x06	; 6
    23ca:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    23ce:	ef 81       	ldd	r30, Y+7	; 0x07
    23d0:	f8 85       	ldd	r31, Y+8	; 0x08
    23d2:	e9 5a       	subi	r30, 0xA9	; 169
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 83       	st	Z, r24
  packet_payload[88] = average_samples( svit[SOLAR_4].T_samples );
    23d8:	8c ef       	ldi	r24, 0xFC	; 252
    23da:	96 e0       	ldi	r25, 0x06	; 6
    23dc:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    23e0:	ef 81       	ldd	r30, Y+7	; 0x07
    23e2:	f8 85       	ldd	r31, Y+8	; 0x08
    23e4:	e8 5a       	subi	r30, 0xA8	; 168
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 83       	st	Z, r24
  packet_payload[89] = average_samples( svit[SOLAR_5].T_samples );
    23ea:	80 e2       	ldi	r24, 0x20	; 32
    23ec:	97 e0       	ldi	r25, 0x07	; 7
    23ee:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    23f2:	ef 81       	ldd	r30, Y+7	; 0x07
    23f4:	f8 85       	ldd	r31, Y+8	; 0x08
    23f6:	e7 5a       	subi	r30, 0xA7	; 167
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 83       	st	Z, r24
  packet_payload[90] = average_samples( svit[SOLAR_9].T_samples );
    23fc:	80 eb       	ldi	r24, 0xB0	; 176
    23fe:	97 e0       	ldi	r25, 0x07	; 7
    2400:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    2404:	ef 81       	ldd	r30, Y+7	; 0x07
    2406:	f8 85       	ldd	r31, Y+8	; 0x08
    2408:	e6 5a       	subi	r30, 0xA6	; 166
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 83       	st	Z, r24
  packet_payload[91] = average_samples( svit[POWER_BOARD].T_samples );
    240e:	80 e4       	ldi	r24, 0x40	; 64
    2410:	98 e0       	ldi	r25, 0x08	; 8
    2412:	0e 94 09 0a 	call	0x1412	; 0x1412 <average_samples>
    2416:	ef 81       	ldd	r30, Y+7	; 0x07
    2418:	f8 85       	ldd	r31, Y+8	; 0x08
    241a:	e5 5a       	subi	r30, 0xA5	; 165
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 83       	st	Z, r24

uint8_t V_ack_change( void )
{
  uint8_t temp;

  temp = V_upper_val_change;
    2420:	80 91 9d 0c 	lds	r24, 0x0C9D
  V_upper_val_change = 0;
    2424:	10 92 9d 0c 	sts	0x0C9D, r1
  //uint8_t temperature_error1;
  //uint8_t temperature_error2;
  //uint8_t temperature_error3;
  //uint8_t temperature_error4;
  
  packet_payload[92] = V_ack_change();
    2428:	ef 81       	ldd	r30, Y+7	; 0x07
    242a:	f8 85       	ldd	r31, Y+8	; 0x08
    242c:	e4 5a       	subi	r30, 0xA4	; 164
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 83       	st	Z, r24

uint8_t I_ack_change( void )
{
  uint8_t temp;

  temp = I_upper_val_change;
    2432:	80 91 98 0c 	lds	r24, 0x0C98
  I_upper_val_change = 0;
    2436:	10 92 98 0c 	sts	0x0C98, r1
  //uint8_t temperature_error2;
  //uint8_t temperature_error3;
  //uint8_t temperature_error4;
  
  packet_payload[92] = V_ack_change();
  packet_payload[93] = I_ack_change();
    243a:	ef 81       	ldd	r30, Y+7	; 0x07
    243c:	f8 85       	ldd	r31, Y+8	; 0x08
    243e:	e3 5a       	subi	r30, 0xA3	; 163
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 83       	st	Z, r24
}
    2444:	28 96       	adiw	r28, 0x08	; 8
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	ef 90       	pop	r14
    245c:	df 90       	pop	r13
    245e:	cf 90       	pop	r12
    2460:	bf 90       	pop	r11
    2462:	af 90       	pop	r10
    2464:	9f 90       	pop	r9
    2466:	8f 90       	pop	r8
    2468:	7f 90       	pop	r7
    246a:	6f 90       	pop	r6
    246c:	5f 90       	pop	r5
    246e:	4f 90       	pop	r4
    2470:	3f 90       	pop	r3
    2472:	2f 90       	pop	r2
    2474:	08 95       	ret

00002476 <transmit_packet>:

void transmit_packet( uint8_t uart, uint8_t packet_type, uint8_t ack_command )
{
    2476:	6f 92       	push	r6
    2478:	7f 92       	push	r7
    247a:	8f 92       	push	r8
    247c:	9f 92       	push	r9
    247e:	bf 92       	push	r11
    2480:	cf 92       	push	r12
    2482:	df 92       	push	r13
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	b8 2e       	mov	r11, r24
  uint8_t VCP_tx_status;

  switch( packet_type )
    2492:	61 30       	cpi	r22, 0x01	; 1
    2494:	b9 f0       	breq	.+46     	; 0x24c4 <transmit_packet+0x4e>
    2496:	20 f0       	brcs	.+8      	; 0x24a0 <transmit_packet+0x2a>
    2498:	62 30       	cpi	r22, 0x02	; 2
    249a:	09 f0       	breq	.+2      	; 0x249e <transmit_packet+0x28>
    249c:	8b c0       	rjmp	.+278    	; 0x25b4 <transmit_packet+0x13e>
    249e:	22 c0       	rjmp	.+68     	; 0x24e4 <transmit_packet+0x6e>
  {
    case VCP_POWER_TELEMETRY:
      construct_telemetry_packet( tel_packet_payload[uart] );
    24a0:	c8 2f       	mov	r28, r24
    24a2:	d0 e0       	ldi	r29, 0x00	; 0
    24a4:	2f ef       	ldi	r18, 0xFF	; 255
    24a6:	82 9f       	mul	r24, r18
    24a8:	c0 01       	movw	r24, r0
    24aa:	11 24       	eor	r1, r1
    24ac:	8f 52       	subi	r24, 0x2F	; 47
    24ae:	91 4f       	sbci	r25, 0xF1	; 241
    24b0:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <construct_telemetry_packet>
      tel_packet_payload_size[uart] = 96;
    24b4:	fe 01       	movw	r30, r28
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	e3 5a       	subi	r30, 0xA3	; 163
    24bc:	f7 4f       	sbci	r31, 0xF7	; 247
    24be:	80 e6       	ldi	r24, 0x60	; 96
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	21 c0       	rjmp	.+66     	; 0x2506 <transmit_packet+0x90>
      break;
    case VCP_INVALID_COMMAND:
      tel_packet_payload[uart][0] = VCP_INVALID_COMMAND;
    24c4:	e8 2f       	mov	r30, r24
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	b8 9e       	mul	r11, r24
    24cc:	d0 01       	movw	r26, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	af 52       	subi	r26, 0x2F	; 47
    24d2:	b1 4f       	sbci	r27, 0xF1	; 241
    24d4:	6c 93       	st	X, r22
      tel_packet_payload_size[uart] = 1;
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	e3 5a       	subi	r30, 0xA3	; 163
    24dc:	f7 4f       	sbci	r31, 0xF7	; 247
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	11 c0       	rjmp	.+34     	; 0x2506 <transmit_packet+0x90>
      break;
    case VCP_ACK:
      tel_packet_payload[uart][0] = VCP_ACK;
    24e4:	e8 2f       	mov	r30, r24
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	2f ef       	ldi	r18, 0xFF	; 255
    24ea:	82 9f       	mul	r24, r18
    24ec:	d0 01       	movw	r26, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	af 52       	subi	r26, 0x2F	; 47
    24f2:	b1 4f       	sbci	r27, 0xF1	; 241
    24f4:	6c 93       	st	X, r22
      tel_packet_payload[uart][1] = ack_command;
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	4c 93       	st	X, r20
      tel_packet_payload_size[uart] = 2;
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	e3 5a       	subi	r30, 0xA3	; 163
    2500:	f7 4f       	sbci	r31, 0xF7	; 247
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    default:
      return;
  }

  // create VCP frame in the peripheral transmit buffer
  VCP_tx_status = Create_VCP_frame( dest_data[uart],
    250a:	8b 2c       	mov	r8, r11
    250c:	91 2c       	mov	r9, r1
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	b8 9e       	mul	r11, r24
    2512:	70 01       	movw	r14, r0
    2514:	11 24       	eor	r1, r1
    2516:	e7 01       	movw	r28, r14
    2518:	c8 56       	subi	r28, 0x68	; 104
    251a:	d5 4f       	sbci	r29, 0xF5	; 245
                                    &dest_size[uart],
                                    VCP_PWR_BOARD_ADDR,
                                    tel_packet_payload[uart],
                                    tel_packet_payload_size[uart]
    251c:	64 01       	movw	r12, r8
    251e:	cc 0c       	add	r12, r12
    2520:	dd 1c       	adc	r13, r13
    2522:	f6 01       	movw	r30, r12
    2524:	e3 5a       	subi	r30, 0xA3	; 163
    2526:	f7 4f       	sbci	r31, 0xF7	; 247
    default:
      return;
  }

  // create VCP frame in the peripheral transmit buffer
  VCP_tx_status = Create_VCP_frame( dest_data[uart],
    2528:	00 81       	ld	r16, Z
    252a:	11 81       	ldd	r17, Z+1	; 0x01
                                    &dest_size[uart],
                                    VCP_PWR_BOARD_ADDR,
                                    tel_packet_payload[uart],
    252c:	97 01       	movw	r18, r14
    252e:	2f 52       	subi	r18, 0x2F	; 47
    2530:	31 4f       	sbci	r19, 0xF1	; 241
    default:
      return;
  }

  // create VCP frame in the peripheral transmit buffer
  VCP_tx_status = Create_VCP_frame( dest_data[uart],
    2532:	a2 ea       	ldi	r26, 0xA2	; 162
    2534:	6a 2e       	mov	r6, r26
    2536:	ae e0       	ldi	r26, 0x0E	; 14
    2538:	7a 2e       	mov	r7, r26
    253a:	6c 0c       	add	r6, r12
    253c:	7d 1c       	adc	r7, r13
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	b3 01       	movw	r22, r6
    2542:	ce 01       	movw	r24, r28
    2544:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Create_VCP_frame>
                                    tel_packet_payload[uart],
                                    tel_packet_payload_size[uart]
                  );

  // VCP frame creation was successful
  if ( VCP_tx_status == VCP_TERM )
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	a1 f5       	brne	.+104    	; 0x25b4 <transmit_packet+0x13e>
  {
    tel_packet_size[uart] = dest_size[uart];
    254c:	f3 01       	movw	r30, r6
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	f6 01       	movw	r30, r12
    2554:	e7 5d       	subi	r30, 0xD7	; 215
    2556:	fc 4f       	sbci	r31, 0xFC	; 252
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
    memcpy( tel_packet[uart], dest_data[uart], tel_packet_size[uart] );
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	97 01       	movw	r18, r14
    2562:	23 59       	subi	r18, 0x93	; 147
    2564:	37 4f       	sbci	r19, 0xF7	; 247
    2566:	ac 01       	movw	r20, r24
    2568:	be 01       	movw	r22, r28
    256a:	c9 01       	movw	r24, r18
    256c:	0e 94 34 16 	call	0x2c68	; 0x2c68 <memcpy>
    tel_packet_index[uart] = 0;
    2570:	f4 01       	movw	r30, r8
    2572:	eb 59       	subi	r30, 0x9B	; 155
    2574:	f7 4f       	sbci	r31, 0xF7	; 247
    2576:	10 82       	st	Z, r1
    // transmit first byte
    if ( uart == 1  && UCSR1A && ( 1 << UDRE ) )
    2578:	f1 e0       	ldi	r31, 0x01	; 1
    257a:	bf 12       	cpse	r11, r31
    257c:	06 c0       	rjmp	.+12     	; 0x258a <transmit_packet+0x114>
    257e:	80 91 9b 00 	lds	r24, 0x009B
    2582:	88 23       	and	r24, r24
    2584:	b9 f0       	breq	.+46     	; 0x25b4 <transmit_packet+0x13e>
      tx_put_byte( uart );
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <transmit_packet+0x120>
    else if ( uart == 0  && UCSR0A && ( 1 << UDRE ) )
    258a:	b1 10       	cpse	r11, r1
    258c:	13 c0       	rjmp	.+38     	; 0x25b4 <transmit_packet+0x13e>
    258e:	8b b1       	in	r24, 0x0b	; 11
    2590:	88 23       	and	r24, r24
    2592:	81 f0       	breq	.+32     	; 0x25b4 <transmit_packet+0x13e>
      tx_put_byte( uart );
    2594:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	df 90       	pop	r13
    25a4:	cf 90       	pop	r12
    25a6:	bf 90       	pop	r11
    25a8:	9f 90       	pop	r9
    25aa:	8f 90       	pop	r8
    25ac:	7f 90       	pop	r7
    25ae:	6f 90       	pop	r6
    tel_packet_index[uart] = 0;
    // transmit first byte
    if ( uart == 1  && UCSR1A && ( 1 << UDRE ) )
      tx_put_byte( uart );
    else if ( uart == 0  && UCSR0A && ( 1 << UDRE ) )
      tx_put_byte( uart );
    25b0:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <tx_put_byte>
  }
}
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	ff 90       	pop	r15
    25be:	ef 90       	pop	r14
    25c0:	df 90       	pop	r13
    25c2:	cf 90       	pop	r12
    25c4:	bf 90       	pop	r11
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	7f 90       	pop	r7
    25cc:	6f 90       	pop	r6
    25ce:	08 95       	ret

000025d0 <__subsf3>:
    25d0:	50 58       	subi	r21, 0x80	; 128

000025d2 <__addsf3>:
    25d2:	bb 27       	eor	r27, r27
    25d4:	aa 27       	eor	r26, r26
    25d6:	0e d0       	rcall	.+28     	; 0x25f4 <__addsf3x>
    25d8:	44 c1       	rjmp	.+648    	; 0x2862 <__fp_round>
    25da:	35 d1       	rcall	.+618    	; 0x2846 <__fp_pscA>
    25dc:	30 f0       	brcs	.+12     	; 0x25ea <__addsf3+0x18>
    25de:	3a d1       	rcall	.+628    	; 0x2854 <__fp_pscB>
    25e0:	20 f0       	brcs	.+8      	; 0x25ea <__addsf3+0x18>
    25e2:	31 f4       	brne	.+12     	; 0x25f0 <__addsf3+0x1e>
    25e4:	9f 3f       	cpi	r25, 0xFF	; 255
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__addsf3+0x1a>
    25e8:	1e f4       	brtc	.+6      	; 0x25f0 <__addsf3+0x1e>
    25ea:	2a c1       	rjmp	.+596    	; 0x2840 <__fp_nan>
    25ec:	0e f4       	brtc	.+2      	; 0x25f0 <__addsf3+0x1e>
    25ee:	e0 95       	com	r30
    25f0:	e7 fb       	bst	r30, 7
    25f2:	20 c1       	rjmp	.+576    	; 0x2834 <__fp_inf>

000025f4 <__addsf3x>:
    25f4:	e9 2f       	mov	r30, r25
    25f6:	46 d1       	rcall	.+652    	; 0x2884 <__fp_split3>
    25f8:	80 f3       	brcs	.-32     	; 0x25da <__addsf3+0x8>
    25fa:	ba 17       	cp	r27, r26
    25fc:	62 07       	cpc	r22, r18
    25fe:	73 07       	cpc	r23, r19
    2600:	84 07       	cpc	r24, r20
    2602:	95 07       	cpc	r25, r21
    2604:	18 f0       	brcs	.+6      	; 0x260c <__addsf3x+0x18>
    2606:	71 f4       	brne	.+28     	; 0x2624 <__addsf3x+0x30>
    2608:	9e f5       	brtc	.+102    	; 0x2670 <__addsf3x+0x7c>
    260a:	5e c1       	rjmp	.+700    	; 0x28c8 <__fp_zero>
    260c:	0e f4       	brtc	.+2      	; 0x2610 <__addsf3x+0x1c>
    260e:	e0 95       	com	r30
    2610:	0b 2e       	mov	r0, r27
    2612:	ba 2f       	mov	r27, r26
    2614:	a0 2d       	mov	r26, r0
    2616:	0b 01       	movw	r0, r22
    2618:	b9 01       	movw	r22, r18
    261a:	90 01       	movw	r18, r0
    261c:	0c 01       	movw	r0, r24
    261e:	ca 01       	movw	r24, r20
    2620:	a0 01       	movw	r20, r0
    2622:	11 24       	eor	r1, r1
    2624:	ff 27       	eor	r31, r31
    2626:	59 1b       	sub	r21, r25
    2628:	99 f0       	breq	.+38     	; 0x2650 <__addsf3x+0x5c>
    262a:	59 3f       	cpi	r21, 0xF9	; 249
    262c:	50 f4       	brcc	.+20     	; 0x2642 <__addsf3x+0x4e>
    262e:	50 3e       	cpi	r21, 0xE0	; 224
    2630:	68 f1       	brcs	.+90     	; 0x268c <__addsf3x+0x98>
    2632:	1a 16       	cp	r1, r26
    2634:	f0 40       	sbci	r31, 0x00	; 0
    2636:	a2 2f       	mov	r26, r18
    2638:	23 2f       	mov	r18, r19
    263a:	34 2f       	mov	r19, r20
    263c:	44 27       	eor	r20, r20
    263e:	58 5f       	subi	r21, 0xF8	; 248
    2640:	f3 cf       	rjmp	.-26     	; 0x2628 <__addsf3x+0x34>
    2642:	46 95       	lsr	r20
    2644:	37 95       	ror	r19
    2646:	27 95       	ror	r18
    2648:	a7 95       	ror	r26
    264a:	f0 40       	sbci	r31, 0x00	; 0
    264c:	53 95       	inc	r21
    264e:	c9 f7       	brne	.-14     	; 0x2642 <__addsf3x+0x4e>
    2650:	7e f4       	brtc	.+30     	; 0x2670 <__addsf3x+0x7c>
    2652:	1f 16       	cp	r1, r31
    2654:	ba 0b       	sbc	r27, r26
    2656:	62 0b       	sbc	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	ba f0       	brmi	.+46     	; 0x268c <__addsf3x+0x98>
    265e:	91 50       	subi	r25, 0x01	; 1
    2660:	a1 f0       	breq	.+40     	; 0x268a <__addsf3x+0x96>
    2662:	ff 0f       	add	r31, r31
    2664:	bb 1f       	adc	r27, r27
    2666:	66 1f       	adc	r22, r22
    2668:	77 1f       	adc	r23, r23
    266a:	88 1f       	adc	r24, r24
    266c:	c2 f7       	brpl	.-16     	; 0x265e <__addsf3x+0x6a>
    266e:	0e c0       	rjmp	.+28     	; 0x268c <__addsf3x+0x98>
    2670:	ba 0f       	add	r27, r26
    2672:	62 1f       	adc	r22, r18
    2674:	73 1f       	adc	r23, r19
    2676:	84 1f       	adc	r24, r20
    2678:	48 f4       	brcc	.+18     	; 0x268c <__addsf3x+0x98>
    267a:	87 95       	ror	r24
    267c:	77 95       	ror	r23
    267e:	67 95       	ror	r22
    2680:	b7 95       	ror	r27
    2682:	f7 95       	ror	r31
    2684:	9e 3f       	cpi	r25, 0xFE	; 254
    2686:	08 f0       	brcs	.+2      	; 0x268a <__addsf3x+0x96>
    2688:	b3 cf       	rjmp	.-154    	; 0x25f0 <__addsf3+0x1e>
    268a:	93 95       	inc	r25
    268c:	88 0f       	add	r24, r24
    268e:	08 f0       	brcs	.+2      	; 0x2692 <__addsf3x+0x9e>
    2690:	99 27       	eor	r25, r25
    2692:	ee 0f       	add	r30, r30
    2694:	97 95       	ror	r25
    2696:	87 95       	ror	r24
    2698:	08 95       	ret

0000269a <__cmpsf2>:
    269a:	a8 d0       	rcall	.+336    	; 0x27ec <__fp_cmp>
    269c:	08 f4       	brcc	.+2      	; 0x26a0 <__cmpsf2+0x6>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	08 95       	ret

000026a2 <__divsf3>:
    26a2:	0c d0       	rcall	.+24     	; 0x26bc <__divsf3x>
    26a4:	de c0       	rjmp	.+444    	; 0x2862 <__fp_round>
    26a6:	d6 d0       	rcall	.+428    	; 0x2854 <__fp_pscB>
    26a8:	40 f0       	brcs	.+16     	; 0x26ba <__divsf3+0x18>
    26aa:	cd d0       	rcall	.+410    	; 0x2846 <__fp_pscA>
    26ac:	30 f0       	brcs	.+12     	; 0x26ba <__divsf3+0x18>
    26ae:	21 f4       	brne	.+8      	; 0x26b8 <__divsf3+0x16>
    26b0:	5f 3f       	cpi	r21, 0xFF	; 255
    26b2:	19 f0       	breq	.+6      	; 0x26ba <__divsf3+0x18>
    26b4:	bf c0       	rjmp	.+382    	; 0x2834 <__fp_inf>
    26b6:	51 11       	cpse	r21, r1
    26b8:	08 c1       	rjmp	.+528    	; 0x28ca <__fp_szero>
    26ba:	c2 c0       	rjmp	.+388    	; 0x2840 <__fp_nan>

000026bc <__divsf3x>:
    26bc:	e3 d0       	rcall	.+454    	; 0x2884 <__fp_split3>
    26be:	98 f3       	brcs	.-26     	; 0x26a6 <__divsf3+0x4>

000026c0 <__divsf3_pse>:
    26c0:	99 23       	and	r25, r25
    26c2:	c9 f3       	breq	.-14     	; 0x26b6 <__divsf3+0x14>
    26c4:	55 23       	and	r21, r21
    26c6:	b1 f3       	breq	.-20     	; 0x26b4 <__divsf3+0x12>
    26c8:	95 1b       	sub	r25, r21
    26ca:	55 0b       	sbc	r21, r21
    26cc:	bb 27       	eor	r27, r27
    26ce:	aa 27       	eor	r26, r26
    26d0:	62 17       	cp	r22, r18
    26d2:	73 07       	cpc	r23, r19
    26d4:	84 07       	cpc	r24, r20
    26d6:	38 f0       	brcs	.+14     	; 0x26e6 <__divsf3_pse+0x26>
    26d8:	9f 5f       	subi	r25, 0xFF	; 255
    26da:	5f 4f       	sbci	r21, 0xFF	; 255
    26dc:	22 0f       	add	r18, r18
    26de:	33 1f       	adc	r19, r19
    26e0:	44 1f       	adc	r20, r20
    26e2:	aa 1f       	adc	r26, r26
    26e4:	a9 f3       	breq	.-22     	; 0x26d0 <__divsf3_pse+0x10>
    26e6:	33 d0       	rcall	.+102    	; 0x274e <__divsf3_pse+0x8e>
    26e8:	0e 2e       	mov	r0, r30
    26ea:	3a f0       	brmi	.+14     	; 0x26fa <__divsf3_pse+0x3a>
    26ec:	e0 e8       	ldi	r30, 0x80	; 128
    26ee:	30 d0       	rcall	.+96     	; 0x2750 <__divsf3_pse+0x90>
    26f0:	91 50       	subi	r25, 0x01	; 1
    26f2:	50 40       	sbci	r21, 0x00	; 0
    26f4:	e6 95       	lsr	r30
    26f6:	00 1c       	adc	r0, r0
    26f8:	ca f7       	brpl	.-14     	; 0x26ec <__divsf3_pse+0x2c>
    26fa:	29 d0       	rcall	.+82     	; 0x274e <__divsf3_pse+0x8e>
    26fc:	fe 2f       	mov	r31, r30
    26fe:	27 d0       	rcall	.+78     	; 0x274e <__divsf3_pse+0x8e>
    2700:	66 0f       	add	r22, r22
    2702:	77 1f       	adc	r23, r23
    2704:	88 1f       	adc	r24, r24
    2706:	bb 1f       	adc	r27, r27
    2708:	26 17       	cp	r18, r22
    270a:	37 07       	cpc	r19, r23
    270c:	48 07       	cpc	r20, r24
    270e:	ab 07       	cpc	r26, r27
    2710:	b0 e8       	ldi	r27, 0x80	; 128
    2712:	09 f0       	breq	.+2      	; 0x2716 <__divsf3_pse+0x56>
    2714:	bb 0b       	sbc	r27, r27
    2716:	80 2d       	mov	r24, r0
    2718:	bf 01       	movw	r22, r30
    271a:	ff 27       	eor	r31, r31
    271c:	93 58       	subi	r25, 0x83	; 131
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	2a f0       	brmi	.+10     	; 0x272c <__divsf3_pse+0x6c>
    2722:	9e 3f       	cpi	r25, 0xFE	; 254
    2724:	51 05       	cpc	r21, r1
    2726:	68 f0       	brcs	.+26     	; 0x2742 <__divsf3_pse+0x82>
    2728:	85 c0       	rjmp	.+266    	; 0x2834 <__fp_inf>
    272a:	cf c0       	rjmp	.+414    	; 0x28ca <__fp_szero>
    272c:	5f 3f       	cpi	r21, 0xFF	; 255
    272e:	ec f3       	brlt	.-6      	; 0x272a <__divsf3_pse+0x6a>
    2730:	98 3e       	cpi	r25, 0xE8	; 232
    2732:	dc f3       	brlt	.-10     	; 0x272a <__divsf3_pse+0x6a>
    2734:	86 95       	lsr	r24
    2736:	77 95       	ror	r23
    2738:	67 95       	ror	r22
    273a:	b7 95       	ror	r27
    273c:	f7 95       	ror	r31
    273e:	9f 5f       	subi	r25, 0xFF	; 255
    2740:	c9 f7       	brne	.-14     	; 0x2734 <__divsf3_pse+0x74>
    2742:	88 0f       	add	r24, r24
    2744:	91 1d       	adc	r25, r1
    2746:	96 95       	lsr	r25
    2748:	87 95       	ror	r24
    274a:	97 f9       	bld	r25, 7
    274c:	08 95       	ret
    274e:	e1 e0       	ldi	r30, 0x01	; 1
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	88 1f       	adc	r24, r24
    2756:	bb 1f       	adc	r27, r27
    2758:	62 17       	cp	r22, r18
    275a:	73 07       	cpc	r23, r19
    275c:	84 07       	cpc	r24, r20
    275e:	ba 07       	cpc	r27, r26
    2760:	20 f0       	brcs	.+8      	; 0x276a <__divsf3_pse+0xaa>
    2762:	62 1b       	sub	r22, r18
    2764:	73 0b       	sbc	r23, r19
    2766:	84 0b       	sbc	r24, r20
    2768:	ba 0b       	sbc	r27, r26
    276a:	ee 1f       	adc	r30, r30
    276c:	88 f7       	brcc	.-30     	; 0x2750 <__divsf3_pse+0x90>
    276e:	e0 95       	com	r30
    2770:	08 95       	ret

00002772 <__floatunsisf>:
    2772:	e8 94       	clt
    2774:	09 c0       	rjmp	.+18     	; 0x2788 <__floatsisf+0x12>

00002776 <__floatsisf>:
    2776:	97 fb       	bst	r25, 7
    2778:	3e f4       	brtc	.+14     	; 0x2788 <__floatsisf+0x12>
    277a:	90 95       	com	r25
    277c:	80 95       	com	r24
    277e:	70 95       	com	r23
    2780:	61 95       	neg	r22
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	8f 4f       	sbci	r24, 0xFF	; 255
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	99 23       	and	r25, r25
    278a:	a9 f0       	breq	.+42     	; 0x27b6 <__floatsisf+0x40>
    278c:	f9 2f       	mov	r31, r25
    278e:	96 e9       	ldi	r25, 0x96	; 150
    2790:	bb 27       	eor	r27, r27
    2792:	93 95       	inc	r25
    2794:	f6 95       	lsr	r31
    2796:	87 95       	ror	r24
    2798:	77 95       	ror	r23
    279a:	67 95       	ror	r22
    279c:	b7 95       	ror	r27
    279e:	f1 11       	cpse	r31, r1
    27a0:	f8 cf       	rjmp	.-16     	; 0x2792 <__floatsisf+0x1c>
    27a2:	fa f4       	brpl	.+62     	; 0x27e2 <__floatsisf+0x6c>
    27a4:	bb 0f       	add	r27, r27
    27a6:	11 f4       	brne	.+4      	; 0x27ac <__floatsisf+0x36>
    27a8:	60 ff       	sbrs	r22, 0
    27aa:	1b c0       	rjmp	.+54     	; 0x27e2 <__floatsisf+0x6c>
    27ac:	6f 5f       	subi	r22, 0xFF	; 255
    27ae:	7f 4f       	sbci	r23, 0xFF	; 255
    27b0:	8f 4f       	sbci	r24, 0xFF	; 255
    27b2:	9f 4f       	sbci	r25, 0xFF	; 255
    27b4:	16 c0       	rjmp	.+44     	; 0x27e2 <__floatsisf+0x6c>
    27b6:	88 23       	and	r24, r24
    27b8:	11 f0       	breq	.+4      	; 0x27be <__floatsisf+0x48>
    27ba:	96 e9       	ldi	r25, 0x96	; 150
    27bc:	11 c0       	rjmp	.+34     	; 0x27e0 <__floatsisf+0x6a>
    27be:	77 23       	and	r23, r23
    27c0:	21 f0       	breq	.+8      	; 0x27ca <__floatsisf+0x54>
    27c2:	9e e8       	ldi	r25, 0x8E	; 142
    27c4:	87 2f       	mov	r24, r23
    27c6:	76 2f       	mov	r23, r22
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <__floatsisf+0x5e>
    27ca:	66 23       	and	r22, r22
    27cc:	71 f0       	breq	.+28     	; 0x27ea <__floatsisf+0x74>
    27ce:	96 e8       	ldi	r25, 0x86	; 134
    27d0:	86 2f       	mov	r24, r22
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	2a f0       	brmi	.+10     	; 0x27e2 <__floatsisf+0x6c>
    27d8:	9a 95       	dec	r25
    27da:	66 0f       	add	r22, r22
    27dc:	77 1f       	adc	r23, r23
    27de:	88 1f       	adc	r24, r24
    27e0:	da f7       	brpl	.-10     	; 0x27d8 <__floatsisf+0x62>
    27e2:	88 0f       	add	r24, r24
    27e4:	96 95       	lsr	r25
    27e6:	87 95       	ror	r24
    27e8:	97 f9       	bld	r25, 7
    27ea:	08 95       	ret

000027ec <__fp_cmp>:
    27ec:	99 0f       	add	r25, r25
    27ee:	00 08       	sbc	r0, r0
    27f0:	55 0f       	add	r21, r21
    27f2:	aa 0b       	sbc	r26, r26
    27f4:	e0 e8       	ldi	r30, 0x80	; 128
    27f6:	fe ef       	ldi	r31, 0xFE	; 254
    27f8:	16 16       	cp	r1, r22
    27fa:	17 06       	cpc	r1, r23
    27fc:	e8 07       	cpc	r30, r24
    27fe:	f9 07       	cpc	r31, r25
    2800:	c0 f0       	brcs	.+48     	; 0x2832 <__fp_cmp+0x46>
    2802:	12 16       	cp	r1, r18
    2804:	13 06       	cpc	r1, r19
    2806:	e4 07       	cpc	r30, r20
    2808:	f5 07       	cpc	r31, r21
    280a:	98 f0       	brcs	.+38     	; 0x2832 <__fp_cmp+0x46>
    280c:	62 1b       	sub	r22, r18
    280e:	73 0b       	sbc	r23, r19
    2810:	84 0b       	sbc	r24, r20
    2812:	95 0b       	sbc	r25, r21
    2814:	39 f4       	brne	.+14     	; 0x2824 <__fp_cmp+0x38>
    2816:	0a 26       	eor	r0, r26
    2818:	61 f0       	breq	.+24     	; 0x2832 <__fp_cmp+0x46>
    281a:	23 2b       	or	r18, r19
    281c:	24 2b       	or	r18, r20
    281e:	25 2b       	or	r18, r21
    2820:	21 f4       	brne	.+8      	; 0x282a <__fp_cmp+0x3e>
    2822:	08 95       	ret
    2824:	0a 26       	eor	r0, r26
    2826:	09 f4       	brne	.+2      	; 0x282a <__fp_cmp+0x3e>
    2828:	a1 40       	sbci	r26, 0x01	; 1
    282a:	a6 95       	lsr	r26
    282c:	8f ef       	ldi	r24, 0xFF	; 255
    282e:	81 1d       	adc	r24, r1
    2830:	81 1d       	adc	r24, r1
    2832:	08 95       	ret

00002834 <__fp_inf>:
    2834:	97 f9       	bld	r25, 7
    2836:	9f 67       	ori	r25, 0x7F	; 127
    2838:	80 e8       	ldi	r24, 0x80	; 128
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	08 95       	ret

00002840 <__fp_nan>:
    2840:	9f ef       	ldi	r25, 0xFF	; 255
    2842:	80 ec       	ldi	r24, 0xC0	; 192
    2844:	08 95       	ret

00002846 <__fp_pscA>:
    2846:	00 24       	eor	r0, r0
    2848:	0a 94       	dec	r0
    284a:	16 16       	cp	r1, r22
    284c:	17 06       	cpc	r1, r23
    284e:	18 06       	cpc	r1, r24
    2850:	09 06       	cpc	r0, r25
    2852:	08 95       	ret

00002854 <__fp_pscB>:
    2854:	00 24       	eor	r0, r0
    2856:	0a 94       	dec	r0
    2858:	12 16       	cp	r1, r18
    285a:	13 06       	cpc	r1, r19
    285c:	14 06       	cpc	r1, r20
    285e:	05 06       	cpc	r0, r21
    2860:	08 95       	ret

00002862 <__fp_round>:
    2862:	09 2e       	mov	r0, r25
    2864:	03 94       	inc	r0
    2866:	00 0c       	add	r0, r0
    2868:	11 f4       	brne	.+4      	; 0x286e <__fp_round+0xc>
    286a:	88 23       	and	r24, r24
    286c:	52 f0       	brmi	.+20     	; 0x2882 <__fp_round+0x20>
    286e:	bb 0f       	add	r27, r27
    2870:	40 f4       	brcc	.+16     	; 0x2882 <__fp_round+0x20>
    2872:	bf 2b       	or	r27, r31
    2874:	11 f4       	brne	.+4      	; 0x287a <__fp_round+0x18>
    2876:	60 ff       	sbrs	r22, 0
    2878:	04 c0       	rjmp	.+8      	; 0x2882 <__fp_round+0x20>
    287a:	6f 5f       	subi	r22, 0xFF	; 255
    287c:	7f 4f       	sbci	r23, 0xFF	; 255
    287e:	8f 4f       	sbci	r24, 0xFF	; 255
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	08 95       	ret

00002884 <__fp_split3>:
    2884:	57 fd       	sbrc	r21, 7
    2886:	90 58       	subi	r25, 0x80	; 128
    2888:	44 0f       	add	r20, r20
    288a:	55 1f       	adc	r21, r21
    288c:	59 f0       	breq	.+22     	; 0x28a4 <__fp_splitA+0x10>
    288e:	5f 3f       	cpi	r21, 0xFF	; 255
    2890:	71 f0       	breq	.+28     	; 0x28ae <__fp_splitA+0x1a>
    2892:	47 95       	ror	r20

00002894 <__fp_splitA>:
    2894:	88 0f       	add	r24, r24
    2896:	97 fb       	bst	r25, 7
    2898:	99 1f       	adc	r25, r25
    289a:	61 f0       	breq	.+24     	; 0x28b4 <__fp_splitA+0x20>
    289c:	9f 3f       	cpi	r25, 0xFF	; 255
    289e:	79 f0       	breq	.+30     	; 0x28be <__fp_splitA+0x2a>
    28a0:	87 95       	ror	r24
    28a2:	08 95       	ret
    28a4:	12 16       	cp	r1, r18
    28a6:	13 06       	cpc	r1, r19
    28a8:	14 06       	cpc	r1, r20
    28aa:	55 1f       	adc	r21, r21
    28ac:	f2 cf       	rjmp	.-28     	; 0x2892 <__fp_split3+0xe>
    28ae:	46 95       	lsr	r20
    28b0:	f1 df       	rcall	.-30     	; 0x2894 <__fp_splitA>
    28b2:	08 c0       	rjmp	.+16     	; 0x28c4 <__fp_splitA+0x30>
    28b4:	16 16       	cp	r1, r22
    28b6:	17 06       	cpc	r1, r23
    28b8:	18 06       	cpc	r1, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	f1 cf       	rjmp	.-30     	; 0x28a0 <__fp_splitA+0xc>
    28be:	86 95       	lsr	r24
    28c0:	71 05       	cpc	r23, r1
    28c2:	61 05       	cpc	r22, r1
    28c4:	08 94       	sec
    28c6:	08 95       	ret

000028c8 <__fp_zero>:
    28c8:	e8 94       	clt

000028ca <__fp_szero>:
    28ca:	bb 27       	eor	r27, r27
    28cc:	66 27       	eor	r22, r22
    28ce:	77 27       	eor	r23, r23
    28d0:	cb 01       	movw	r24, r22
    28d2:	97 f9       	bld	r25, 7
    28d4:	08 95       	ret

000028d6 <__gesf2>:
    28d6:	8a df       	rcall	.-236    	; 0x27ec <__fp_cmp>
    28d8:	08 f4       	brcc	.+2      	; 0x28dc <__gesf2+0x6>
    28da:	8f ef       	ldi	r24, 0xFF	; 255
    28dc:	08 95       	ret

000028de <__mulsf3>:
    28de:	0b d0       	rcall	.+22     	; 0x28f6 <__mulsf3x>
    28e0:	c0 cf       	rjmp	.-128    	; 0x2862 <__fp_round>
    28e2:	b1 df       	rcall	.-158    	; 0x2846 <__fp_pscA>
    28e4:	28 f0       	brcs	.+10     	; 0x28f0 <__mulsf3+0x12>
    28e6:	b6 df       	rcall	.-148    	; 0x2854 <__fp_pscB>
    28e8:	18 f0       	brcs	.+6      	; 0x28f0 <__mulsf3+0x12>
    28ea:	95 23       	and	r25, r21
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <__mulsf3+0x12>
    28ee:	a2 cf       	rjmp	.-188    	; 0x2834 <__fp_inf>
    28f0:	a7 cf       	rjmp	.-178    	; 0x2840 <__fp_nan>
    28f2:	11 24       	eor	r1, r1
    28f4:	ea cf       	rjmp	.-44     	; 0x28ca <__fp_szero>

000028f6 <__mulsf3x>:
    28f6:	c6 df       	rcall	.-116    	; 0x2884 <__fp_split3>
    28f8:	a0 f3       	brcs	.-24     	; 0x28e2 <__mulsf3+0x4>

000028fa <__mulsf3_pse>:
    28fa:	95 9f       	mul	r25, r21
    28fc:	d1 f3       	breq	.-12     	; 0x28f2 <__mulsf3+0x14>
    28fe:	95 0f       	add	r25, r21
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	55 1f       	adc	r21, r21
    2904:	62 9f       	mul	r22, r18
    2906:	f0 01       	movw	r30, r0
    2908:	72 9f       	mul	r23, r18
    290a:	bb 27       	eor	r27, r27
    290c:	f0 0d       	add	r31, r0
    290e:	b1 1d       	adc	r27, r1
    2910:	63 9f       	mul	r22, r19
    2912:	aa 27       	eor	r26, r26
    2914:	f0 0d       	add	r31, r0
    2916:	b1 1d       	adc	r27, r1
    2918:	aa 1f       	adc	r26, r26
    291a:	64 9f       	mul	r22, r20
    291c:	66 27       	eor	r22, r22
    291e:	b0 0d       	add	r27, r0
    2920:	a1 1d       	adc	r26, r1
    2922:	66 1f       	adc	r22, r22
    2924:	82 9f       	mul	r24, r18
    2926:	22 27       	eor	r18, r18
    2928:	b0 0d       	add	r27, r0
    292a:	a1 1d       	adc	r26, r1
    292c:	62 1f       	adc	r22, r18
    292e:	73 9f       	mul	r23, r19
    2930:	b0 0d       	add	r27, r0
    2932:	a1 1d       	adc	r26, r1
    2934:	62 1f       	adc	r22, r18
    2936:	83 9f       	mul	r24, r19
    2938:	a0 0d       	add	r26, r0
    293a:	61 1d       	adc	r22, r1
    293c:	22 1f       	adc	r18, r18
    293e:	74 9f       	mul	r23, r20
    2940:	33 27       	eor	r19, r19
    2942:	a0 0d       	add	r26, r0
    2944:	61 1d       	adc	r22, r1
    2946:	23 1f       	adc	r18, r19
    2948:	84 9f       	mul	r24, r20
    294a:	60 0d       	add	r22, r0
    294c:	21 1d       	adc	r18, r1
    294e:	82 2f       	mov	r24, r18
    2950:	76 2f       	mov	r23, r22
    2952:	6a 2f       	mov	r22, r26
    2954:	11 24       	eor	r1, r1
    2956:	9f 57       	subi	r25, 0x7F	; 127
    2958:	50 40       	sbci	r21, 0x00	; 0
    295a:	8a f0       	brmi	.+34     	; 0x297e <__mulsf3_pse+0x84>
    295c:	e1 f0       	breq	.+56     	; 0x2996 <__mulsf3_pse+0x9c>
    295e:	88 23       	and	r24, r24
    2960:	4a f0       	brmi	.+18     	; 0x2974 <__mulsf3_pse+0x7a>
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	bb 1f       	adc	r27, r27
    2968:	66 1f       	adc	r22, r22
    296a:	77 1f       	adc	r23, r23
    296c:	88 1f       	adc	r24, r24
    296e:	91 50       	subi	r25, 0x01	; 1
    2970:	50 40       	sbci	r21, 0x00	; 0
    2972:	a9 f7       	brne	.-22     	; 0x295e <__mulsf3_pse+0x64>
    2974:	9e 3f       	cpi	r25, 0xFE	; 254
    2976:	51 05       	cpc	r21, r1
    2978:	70 f0       	brcs	.+28     	; 0x2996 <__mulsf3_pse+0x9c>
    297a:	5c cf       	rjmp	.-328    	; 0x2834 <__fp_inf>
    297c:	a6 cf       	rjmp	.-180    	; 0x28ca <__fp_szero>
    297e:	5f 3f       	cpi	r21, 0xFF	; 255
    2980:	ec f3       	brlt	.-6      	; 0x297c <__mulsf3_pse+0x82>
    2982:	98 3e       	cpi	r25, 0xE8	; 232
    2984:	dc f3       	brlt	.-10     	; 0x297c <__mulsf3_pse+0x82>
    2986:	86 95       	lsr	r24
    2988:	77 95       	ror	r23
    298a:	67 95       	ror	r22
    298c:	b7 95       	ror	r27
    298e:	f7 95       	ror	r31
    2990:	e7 95       	ror	r30
    2992:	9f 5f       	subi	r25, 0xFF	; 255
    2994:	c1 f7       	brne	.-16     	; 0x2986 <__mulsf3_pse+0x8c>
    2996:	fe 2b       	or	r31, r30
    2998:	88 0f       	add	r24, r24
    299a:	91 1d       	adc	r25, r1
    299c:	96 95       	lsr	r25
    299e:	87 95       	ror	r24
    29a0:	97 f9       	bld	r25, 7
    29a2:	08 95       	ret

000029a4 <__udivmodhi4>:
    29a4:	aa 1b       	sub	r26, r26
    29a6:	bb 1b       	sub	r27, r27
    29a8:	51 e1       	ldi	r21, 0x11	; 17
    29aa:	07 c0       	rjmp	.+14     	; 0x29ba <__udivmodhi4_ep>

000029ac <__udivmodhi4_loop>:
    29ac:	aa 1f       	adc	r26, r26
    29ae:	bb 1f       	adc	r27, r27
    29b0:	a6 17       	cp	r26, r22
    29b2:	b7 07       	cpc	r27, r23
    29b4:	10 f0       	brcs	.+4      	; 0x29ba <__udivmodhi4_ep>
    29b6:	a6 1b       	sub	r26, r22
    29b8:	b7 0b       	sbc	r27, r23

000029ba <__udivmodhi4_ep>:
    29ba:	88 1f       	adc	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	5a 95       	dec	r21
    29c0:	a9 f7       	brne	.-22     	; 0x29ac <__udivmodhi4_loop>
    29c2:	80 95       	com	r24
    29c4:	90 95       	com	r25
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	08 95       	ret

000029cc <__divmodhi4>:
    29cc:	97 fb       	bst	r25, 7
    29ce:	07 2e       	mov	r0, r23
    29d0:	16 f4       	brtc	.+4      	; 0x29d6 <__divmodhi4+0xa>
    29d2:	00 94       	com	r0
    29d4:	07 d0       	rcall	.+14     	; 0x29e4 <__divmodhi4_neg1>
    29d6:	77 fd       	sbrc	r23, 7
    29d8:	09 d0       	rcall	.+18     	; 0x29ec <__divmodhi4_neg2>
    29da:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodhi4>
    29de:	07 fc       	sbrc	r0, 7
    29e0:	05 d0       	rcall	.+10     	; 0x29ec <__divmodhi4_neg2>
    29e2:	3e f4       	brtc	.+14     	; 0x29f2 <__divmodhi4_exit>

000029e4 <__divmodhi4_neg1>:
    29e4:	90 95       	com	r25
    29e6:	81 95       	neg	r24
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	08 95       	ret

000029ec <__divmodhi4_neg2>:
    29ec:	70 95       	com	r23
    29ee:	61 95       	neg	r22
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255

000029f2 <__divmodhi4_exit>:
    29f2:	08 95       	ret

000029f4 <malloc>:
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	82 30       	cpi	r24, 0x02	; 2
    29fe:	91 05       	cpc	r25, r1
    2a00:	10 f4       	brcc	.+4      	; 0x2a06 <malloc+0x12>
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	e0 91 d2 10 	lds	r30, 0x10D2
    2a0a:	f0 91 d3 10 	lds	r31, 0x10D3
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	c0 e0       	ldi	r28, 0x00	; 0
    2a14:	d0 e0       	ldi	r29, 0x00	; 0
    2a16:	23 c0       	rjmp	.+70     	; 0x2a5e <malloc+0x6a>
    2a18:	40 81       	ld	r20, Z
    2a1a:	51 81       	ldd	r21, Z+1	; 0x01
    2a1c:	48 17       	cp	r20, r24
    2a1e:	59 07       	cpc	r21, r25
    2a20:	a8 f0       	brcs	.+42     	; 0x2a4c <malloc+0x58>
    2a22:	48 17       	cp	r20, r24
    2a24:	59 07       	cpc	r21, r25
    2a26:	61 f4       	brne	.+24     	; 0x2a40 <malloc+0x4c>
    2a28:	82 81       	ldd	r24, Z+2	; 0x02
    2a2a:	93 81       	ldd	r25, Z+3	; 0x03
    2a2c:	20 97       	sbiw	r28, 0x00	; 0
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <malloc+0x42>
    2a30:	9b 83       	std	Y+3, r25	; 0x03
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	2e c0       	rjmp	.+92     	; 0x2a92 <malloc+0x9e>
    2a36:	90 93 d3 10 	sts	0x10D3, r25
    2a3a:	80 93 d2 10 	sts	0x10D2, r24
    2a3e:	29 c0       	rjmp	.+82     	; 0x2a92 <malloc+0x9e>
    2a40:	21 15       	cp	r18, r1
    2a42:	31 05       	cpc	r19, r1
    2a44:	29 f0       	breq	.+10     	; 0x2a50 <malloc+0x5c>
    2a46:	42 17       	cp	r20, r18
    2a48:	53 07       	cpc	r21, r19
    2a4a:	10 f0       	brcs	.+4      	; 0x2a50 <malloc+0x5c>
    2a4c:	a9 01       	movw	r20, r18
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <malloc+0x60>
    2a50:	be 01       	movw	r22, r28
    2a52:	df 01       	movw	r26, r30
    2a54:	02 81       	ldd	r16, Z+2	; 0x02
    2a56:	13 81       	ldd	r17, Z+3	; 0x03
    2a58:	ef 01       	movw	r28, r30
    2a5a:	9a 01       	movw	r18, r20
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	30 97       	sbiw	r30, 0x00	; 0
    2a60:	d9 f6       	brne	.-74     	; 0x2a18 <malloc+0x24>
    2a62:	21 15       	cp	r18, r1
    2a64:	31 05       	cpc	r19, r1
    2a66:	09 f1       	breq	.+66     	; 0x2aaa <malloc+0xb6>
    2a68:	28 1b       	sub	r18, r24
    2a6a:	39 0b       	sbc	r19, r25
    2a6c:	24 30       	cpi	r18, 0x04	; 4
    2a6e:	31 05       	cpc	r19, r1
    2a70:	90 f4       	brcc	.+36     	; 0x2a96 <malloc+0xa2>
    2a72:	12 96       	adiw	r26, 0x02	; 2
    2a74:	8d 91       	ld	r24, X+
    2a76:	9c 91       	ld	r25, X
    2a78:	13 97       	sbiw	r26, 0x03	; 3
    2a7a:	61 15       	cp	r22, r1
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	21 f0       	breq	.+8      	; 0x2a88 <malloc+0x94>
    2a80:	fb 01       	movw	r30, r22
    2a82:	93 83       	std	Z+3, r25	; 0x03
    2a84:	82 83       	std	Z+2, r24	; 0x02
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <malloc+0x9c>
    2a88:	90 93 d3 10 	sts	0x10D3, r25
    2a8c:	80 93 d2 10 	sts	0x10D2, r24
    2a90:	fd 01       	movw	r30, r26
    2a92:	32 96       	adiw	r30, 0x02	; 2
    2a94:	44 c0       	rjmp	.+136    	; 0x2b1e <malloc+0x12a>
    2a96:	fd 01       	movw	r30, r26
    2a98:	e2 0f       	add	r30, r18
    2a9a:	f3 1f       	adc	r31, r19
    2a9c:	81 93       	st	Z+, r24
    2a9e:	91 93       	st	Z+, r25
    2aa0:	22 50       	subi	r18, 0x02	; 2
    2aa2:	31 09       	sbc	r19, r1
    2aa4:	2d 93       	st	X+, r18
    2aa6:	3c 93       	st	X, r19
    2aa8:	3a c0       	rjmp	.+116    	; 0x2b1e <malloc+0x12a>
    2aaa:	20 91 d0 10 	lds	r18, 0x10D0
    2aae:	30 91 d1 10 	lds	r19, 0x10D1
    2ab2:	23 2b       	or	r18, r19
    2ab4:	41 f4       	brne	.+16     	; 0x2ac6 <malloc+0xd2>
    2ab6:	20 91 02 01 	lds	r18, 0x0102
    2aba:	30 91 03 01 	lds	r19, 0x0103
    2abe:	30 93 d1 10 	sts	0x10D1, r19
    2ac2:	20 93 d0 10 	sts	0x10D0, r18
    2ac6:	20 91 00 01 	lds	r18, 0x0100
    2aca:	30 91 01 01 	lds	r19, 0x0101
    2ace:	21 15       	cp	r18, r1
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	41 f4       	brne	.+16     	; 0x2ae4 <malloc+0xf0>
    2ad4:	2d b7       	in	r18, 0x3d	; 61
    2ad6:	3e b7       	in	r19, 0x3e	; 62
    2ad8:	40 91 04 01 	lds	r20, 0x0104
    2adc:	50 91 05 01 	lds	r21, 0x0105
    2ae0:	24 1b       	sub	r18, r20
    2ae2:	35 0b       	sbc	r19, r21
    2ae4:	e0 91 d0 10 	lds	r30, 0x10D0
    2ae8:	f0 91 d1 10 	lds	r31, 0x10D1
    2aec:	e2 17       	cp	r30, r18
    2aee:	f3 07       	cpc	r31, r19
    2af0:	a0 f4       	brcc	.+40     	; 0x2b1a <malloc+0x126>
    2af2:	2e 1b       	sub	r18, r30
    2af4:	3f 0b       	sbc	r19, r31
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	78 f0       	brcs	.+30     	; 0x2b1a <malloc+0x126>
    2afc:	ac 01       	movw	r20, r24
    2afe:	4e 5f       	subi	r20, 0xFE	; 254
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	24 17       	cp	r18, r20
    2b04:	35 07       	cpc	r19, r21
    2b06:	48 f0       	brcs	.+18     	; 0x2b1a <malloc+0x126>
    2b08:	4e 0f       	add	r20, r30
    2b0a:	5f 1f       	adc	r21, r31
    2b0c:	50 93 d1 10 	sts	0x10D1, r21
    2b10:	40 93 d0 10 	sts	0x10D0, r20
    2b14:	81 93       	st	Z+, r24
    2b16:	91 93       	st	Z+, r25
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <malloc+0x12a>
    2b1a:	e0 e0       	ldi	r30, 0x00	; 0
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	cf 01       	movw	r24, r30
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	08 95       	ret

00002b2a <free>:
    2b2a:	ef 92       	push	r14
    2b2c:	ff 92       	push	r15
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <free+0x12>
    2b3a:	8f c0       	rjmp	.+286    	; 0x2c5a <free+0x130>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	12 97       	sbiw	r26, 0x02	; 2
    2b40:	13 96       	adiw	r26, 0x03	; 3
    2b42:	1c 92       	st	X, r1
    2b44:	1e 92       	st	-X, r1
    2b46:	12 97       	sbiw	r26, 0x02	; 2
    2b48:	e0 90 d2 10 	lds	r14, 0x10D2
    2b4c:	f0 90 d3 10 	lds	r15, 0x10D3
    2b50:	e1 14       	cp	r14, r1
    2b52:	f1 04       	cpc	r15, r1
    2b54:	89 f4       	brne	.+34     	; 0x2b78 <free+0x4e>
    2b56:	2d 91       	ld	r18, X+
    2b58:	3c 91       	ld	r19, X
    2b5a:	11 97       	sbiw	r26, 0x01	; 1
    2b5c:	28 0f       	add	r18, r24
    2b5e:	39 1f       	adc	r19, r25
    2b60:	80 91 d0 10 	lds	r24, 0x10D0
    2b64:	90 91 d1 10 	lds	r25, 0x10D1
    2b68:	82 17       	cp	r24, r18
    2b6a:	93 07       	cpc	r25, r19
    2b6c:	89 f5       	brne	.+98     	; 0x2bd0 <free+0xa6>
    2b6e:	b0 93 d1 10 	sts	0x10D1, r27
    2b72:	a0 93 d0 10 	sts	0x10D0, r26
    2b76:	71 c0       	rjmp	.+226    	; 0x2c5a <free+0x130>
    2b78:	e7 01       	movw	r28, r14
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <free+0x58>
    2b80:	ea 01       	movw	r28, r20
    2b82:	ca 17       	cp	r28, r26
    2b84:	db 07       	cpc	r29, r27
    2b86:	38 f4       	brcc	.+14     	; 0x2b96 <free+0x6c>
    2b88:	4a 81       	ldd	r20, Y+2	; 0x02
    2b8a:	5b 81       	ldd	r21, Y+3	; 0x03
    2b8c:	9e 01       	movw	r18, r28
    2b8e:	41 15       	cp	r20, r1
    2b90:	51 05       	cpc	r21, r1
    2b92:	b1 f7       	brne	.-20     	; 0x2b80 <free+0x56>
    2b94:	22 c0       	rjmp	.+68     	; 0x2bda <free+0xb0>
    2b96:	bc 01       	movw	r22, r24
    2b98:	62 50       	subi	r22, 0x02	; 2
    2b9a:	71 09       	sbc	r23, r1
    2b9c:	fb 01       	movw	r30, r22
    2b9e:	d3 83       	std	Z+3, r29	; 0x03
    2ba0:	c2 83       	std	Z+2, r28	; 0x02
    2ba2:	00 81       	ld	r16, Z
    2ba4:	11 81       	ldd	r17, Z+1	; 0x01
    2ba6:	ac 01       	movw	r20, r24
    2ba8:	40 0f       	add	r20, r16
    2baa:	51 1f       	adc	r21, r17
    2bac:	4c 17       	cp	r20, r28
    2bae:	5d 07       	cpc	r21, r29
    2bb0:	61 f4       	brne	.+24     	; 0x2bca <free+0xa0>
    2bb2:	48 81       	ld	r20, Y
    2bb4:	59 81       	ldd	r21, Y+1	; 0x01
    2bb6:	40 0f       	add	r20, r16
    2bb8:	51 1f       	adc	r21, r17
    2bba:	4e 5f       	subi	r20, 0xFE	; 254
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	51 83       	std	Z+1, r21	; 0x01
    2bc0:	40 83       	st	Z, r20
    2bc2:	4a 81       	ldd	r20, Y+2	; 0x02
    2bc4:	5b 81       	ldd	r21, Y+3	; 0x03
    2bc6:	53 83       	std	Z+3, r21	; 0x03
    2bc8:	42 83       	std	Z+2, r20	; 0x02
    2bca:	21 15       	cp	r18, r1
    2bcc:	31 05       	cpc	r19, r1
    2bce:	29 f4       	brne	.+10     	; 0x2bda <free+0xb0>
    2bd0:	b0 93 d3 10 	sts	0x10D3, r27
    2bd4:	a0 93 d2 10 	sts	0x10D2, r26
    2bd8:	40 c0       	rjmp	.+128    	; 0x2c5a <free+0x130>
    2bda:	f9 01       	movw	r30, r18
    2bdc:	b3 83       	std	Z+3, r27	; 0x03
    2bde:	a2 83       	std	Z+2, r26	; 0x02
    2be0:	e9 01       	movw	r28, r18
    2be2:	69 91       	ld	r22, Y+
    2be4:	79 91       	ld	r23, Y+
    2be6:	c6 0f       	add	r28, r22
    2be8:	d7 1f       	adc	r29, r23
    2bea:	ac 17       	cp	r26, r28
    2bec:	bd 07       	cpc	r27, r29
    2bee:	79 f4       	brne	.+30     	; 0x2c0e <free+0xe4>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	5e 91       	ld	r21, -X
    2bf4:	4e 91       	ld	r20, -X
    2bf6:	46 0f       	add	r20, r22
    2bf8:	57 1f       	adc	r21, r23
    2bfa:	4e 5f       	subi	r20, 0xFE	; 254
    2bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfe:	51 83       	std	Z+1, r21	; 0x01
    2c00:	40 83       	st	Z, r20
    2c02:	12 96       	adiw	r26, 0x02	; 2
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	13 97       	sbiw	r26, 0x03	; 3
    2c0a:	93 83       	std	Z+3, r25	; 0x03
    2c0c:	82 83       	std	Z+2, r24	; 0x02
    2c0e:	a0 e0       	ldi	r26, 0x00	; 0
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <free+0xee>
    2c14:	d7 01       	movw	r26, r14
    2c16:	7c 01       	movw	r14, r24
    2c18:	f7 01       	movw	r30, r14
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	c9 f7       	brne	.-14     	; 0x2c14 <free+0xea>
    2c22:	c7 01       	movw	r24, r14
    2c24:	02 96       	adiw	r24, 0x02	; 2
    2c26:	20 81       	ld	r18, Z
    2c28:	31 81       	ldd	r19, Z+1	; 0x01
    2c2a:	82 0f       	add	r24, r18
    2c2c:	93 1f       	adc	r25, r19
    2c2e:	20 91 d0 10 	lds	r18, 0x10D0
    2c32:	30 91 d1 10 	lds	r19, 0x10D1
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	79 f4       	brne	.+30     	; 0x2c5a <free+0x130>
    2c3c:	10 97       	sbiw	r26, 0x00	; 0
    2c3e:	29 f4       	brne	.+10     	; 0x2c4a <free+0x120>
    2c40:	10 92 d3 10 	sts	0x10D3, r1
    2c44:	10 92 d2 10 	sts	0x10D2, r1
    2c48:	04 c0       	rjmp	.+8      	; 0x2c52 <free+0x128>
    2c4a:	13 96       	adiw	r26, 0x03	; 3
    2c4c:	1c 92       	st	X, r1
    2c4e:	1e 92       	st	-X, r1
    2c50:	12 97       	sbiw	r26, 0x02	; 2
    2c52:	f0 92 d1 10 	sts	0x10D1, r15
    2c56:	e0 92 d0 10 	sts	0x10D0, r14
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	08 95       	ret

00002c68 <memcpy>:
    2c68:	fb 01       	movw	r30, r22
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <memcpy+0xa>
    2c6e:	01 90       	ld	r0, Z+
    2c70:	0d 92       	st	X+, r0
    2c72:	41 50       	subi	r20, 0x01	; 1
    2c74:	50 40       	sbci	r21, 0x00	; 0
    2c76:	d8 f7       	brcc	.-10     	; 0x2c6e <memcpy+0x6>
    2c78:	08 95       	ret

00002c7a <_exit>:
    2c7a:	f8 94       	cli

00002c7c <__stop_program>:
    2c7c:	ff cf       	rjmp	.-2      	; 0x2c7c <__stop_program>
